; Generated by c86 (BYU-NASM) 5.1 (beta) from myinth.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_myinth_1:
	DB	0xA,"RESET PROGRAM",0xA,0
	ALIGN	2
c_reset_handler:
	; >>>>> Line:	11
	; >>>>> void c_reset_handler(){ 
	jmp	L_myinth_2
L_myinth_3:
	; >>>>> Line:	12
	; >>>>> printString("\nRESET PROGRAM\n"); 
	mov	ax, L_myinth_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	13
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_2:
	push	bp
	mov	bp, sp
	jmp	L_myinth_3
	ALIGN	2
L_myinth_5:
	DW	0
L_myinth_6:
	DB	0xA,"TICK ",0
	ALIGN	2
c_tick_handler:
	; >>>>> Line:	17
	; >>>>> void c_tick_handler(){ 
	jmp	L_myinth_7
L_myinth_8:
	; >>>>> Line:	19
	; >>>>> printString("\nTICK "); 
	mov	ax, L_myinth_6
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	20
	; >>>>> printInt(tick++); 
	mov	ax, word [L_myinth_5]
	inc	word [L_myinth_5]
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	21
	; >>>>> printNewLine(); 
	call	printNewLine
	mov	sp, bp
	pop	bp
	ret
L_myinth_7:
	push	bp
	mov	bp, sp
	jmp	L_myinth_8
L_myinth_13:
	DB	") IGNORED",0xD,0xA,0
L_myinth_12:
	DB	0xD,0xA,"KEYPRESS (",0
L_myinth_11:
	DB	0xD,0xA,"DELAY FINISHED",0xD,0xA,0
L_myinth_10:
	DB	0xD,0xA,"DELAY KEY PRESSED",0xD,0xA,0
	ALIGN	2
c_key_handler:
	; >>>>> Line:	24
	; >>>>> void c_key_handler(){ 
	jmp	L_myinth_14
L_myinth_15:
	; >>>>> Line:	26
	; >>>>> if (c == 'd'){ 
	mov	al, byte [KeyBuffer]
	mov	byte [bp-1], al
	; >>>>> Line:	26
	; >>>>> if (c == 'd'){ 
	cmp	byte [bp-1], 100
	jne	L_myinth_16
	; >>>>> Line:	27
	; >>>>> printString("\r\nDELAY KEY PRESSED\r\n"); 
	mov	ax, L_myinth_10
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	28
	; >>>>> delay(); 
	call	delay
	; >>>>> Line:	29
	; >>>>> printString("\r\nDELAY FINISHED\r\n"); 
	mov	ax, L_myinth_11
	push	ax
	call	printString
	add	sp, 2
	jmp	L_myinth_17
L_myinth_16:
	; >>>>> Line:	32
	; >>>>> printString("\r\nKEYPRESS ("); 
	mov	ax, L_myinth_12
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	33
	; >>>>> printChar(c); 
	push	word [bp-1]
	call	printChar
	add	sp, 2
	; >>>>> Line:	34
	; >>>>> printString(") IGNORED\r\n") 
	mov	ax, L_myinth_13
	push	ax
	call	printString
	add	sp, 2
L_myinth_17:
	mov	sp, bp
	pop	bp
	ret
L_myinth_14:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_myinth_15
	ALIGN	2
delay:
	; >>>>> Line:	38
	; >>>>> void delay(){ 
	jmp	L_myinth_19
L_myinth_20:
	; >>>>> Line:	40
	; >>>>> for(i = 0; i < 5000; i++){ 
	mov	word [bp-2], 0
	; >>>>> Line:	40
	; >>>>> for(i = 0; i < 5000; i++){ 
	mov	word [bp-2], 0
	jmp	L_myinth_22
L_myinth_21:
L_myinth_24:
	; >>>>> Line:	41
	; >>>>> ; 
	inc	word [bp-2]
L_myinth_22:
	cmp	word [bp-2], 5000
	jl	L_myinth_21
L_myinth_23:
	mov	sp, bp
	pop	bp
	ret
L_myinth_19:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_myinth_20
