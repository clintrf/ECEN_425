; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
run_flag:
	DB	0
L_yakc_1:
	DB	"before new task...",0xA,0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	26
	; >>>>> void YKInitialize(void){ 
	jmp	L_yakc_2
L_yakc_3:
	; >>>>> Line:	28
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	29
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	32
	; >>>>> YKISRCallDepth = 0; 
	mov	word [YKISRCallDepth], 0
	; >>>>> Line:	33
	; >>>>> TKCurrentlyRunning = 0; 
	mov	word [TKCurrentlyRunning], 0
	; >>>>> Line:	35
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	38
	; >>>>> YKAvailTCBList = &(YKTCBArray[0]); 
	mov	word [YKAvailTCBList], YKTCBArray
	; >>>>> Line:	40
	; >>>>> for (i = 0; i < 4; i++) 
	mov	word [bp-2], 0
	jmp	L_yakc_5
L_yakc_4:
	; >>>>> Line:	41
	; >>>>> YKTCBArray[i].next = &(YKTCBArray[i+1]); 
	mov	ax, word [bp-2]
	inc	ax
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	push	ax
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	mov	dx, ax
	add	dx, YKTCBArray
	mov	si, dx
	add	si, 10
	pop	ax
	mov	word [si], ax
L_yakc_7:
	inc	word [bp-2]
L_yakc_5:
	cmp	word [bp-2], 4
	jl	L_yakc_4
L_yakc_6:
	; >>>>> Line:	42
	; >>>>> YKTCBArray[4].next = 0; 
	mov	word [(66+YKTCBArray)], 0
	; >>>>> Line:	44
	; >>>>> printString("before new task...\n"); 
	mov	ax, L_yakc_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	46
	; >>>>> YKNewTask(YKIdleTask, (void*)&idleStack[256], 100); 
	mov	al, 100
	push	ax
	mov	ax, (idleStack+512)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	sp, bp
	pop	bp
	ret
L_yakc_2:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_3
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	53
	; >>>>> void YKIdleTask(void){ 
	jmp	L_yakc_9
L_yakc_10:
	; >>>>> Line:	54
	; >>>>> while(1){ 
	jmp	L_yakc_12
L_yakc_11:
	; >>>>> Line:	55
	; >>>>> YKIdleCount=YKIdleCount+1; 
	mov	ax, word [YKIdleCount]
	inc	ax
	mov	word [YKIdleCount], ax
	; >>>>> Line:	56
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_12:
	jmp	L_yakc_11
L_yakc_13:
	mov	sp, bp
	pop	bp
	ret
L_yakc_9:
	push	bp
	mov	bp, sp
	jmp	L_yakc_10
L_yakc_16:
	DB	"before Scheduler...",0xA,0
L_yakc_15:
	DB	"Address for new task's SP is ",0
	ALIGN	2
YKNewTask:
	; >>>>> Line:	66
	; >>>>> void YKNewTask( void (*task)(void), void *taskStack, unsigned char priority){ 
	jmp	L_yakc_17
L_yakc_18:
	; >>>>> Line:	71
	; >>>>> tmp = YKAvailTCBList; 
	mov	ax, word [YKAvailTCBList]
	mov	word [bp-2], ax
	; >>>>> Line:	72
	; >>>>> YKAvailTCBList = tmp->next; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	mov	word [YKAvailTCBList], ax
	; >>>>> Line:	77
	; >>>>> tmp->delay = 0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	78
	; >>>>> tmp->priority = priority; 
	mov	al, byte [bp+8]
	xor	ah, ah
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], ax
	; >>>>> Line:	81
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	85
	; >>>>> if (YKRdyList == 0){ 
	mov	ax, word [YKRdyList]
	test	ax, ax
	jne	L_yakc_19
	; >>>>> Line:	86
	; >>>>> YKRdyList = tmp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	; >>>>> Line:	87
	; >>>>> tmp->next = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	88
	; >>>>> tmp->prev = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	jmp	L_yakc_20
L_yakc_19:
	; >>>>> Line:	91
	; >>>>> tmp2 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	92
	; >>>>> while (tmp2->priority < tmp->priority){ 
	jmp	L_yakc_22
L_yakc_21:
	; >>>>> Line:	93
	; >>>>> tmp2 = tmp2->next; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_22:
	mov	si, word [bp-4]
	add	si, 6
	mov	di, word [bp-2]
	add	di, 6
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_21
L_yakc_23:
	; >>>>> Line:	100
	; >>>>> if (tmp2->prev == 0) 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_24
	; >>>>> Line:	101
	; >>>>> YKRdyList = tmp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_25
L_yakc_24:
	; >>>>> Line:	103
	; >>>>> tmp2->prev->next = tmp; 
	mov	si, word [bp-4]
	add	si, 12
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_25:
	; >>>>> Line:	104
	; >>>>> tmp->prev = tmp2->prev; 
	mov	si, word [bp-4]
	add	si, 12
	mov	di, word [bp-2]
	add	di, 12
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	105
	; >>>>> tmp->next = tmp2; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	106
	; >>>>> tmp2->prev = tmp; 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_20:
	; >>>>> Line:	109
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	115
	; >>>>> tmp->stackptr = taskStack; 
	mov	si, word [bp-2]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	117
	; >>>>> printString("Address for new task's SP is "); 
	mov	ax, L_yakc_15
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	118
	; >>>>> printInt((int) &(tmp->stackptr)); 
	push	word [bp-2]
	call	printInt
	add	sp, 2
	; >>>>> Line:	119
	; >>>>> printString("\n"); 
	mov	ax, (L_yakc_1+18)
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	121
	; >>>>> tmp->ss = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	122
	; >>>>> tmp->stackptr = tmp->stackptr - 11; 
	mov	si, word [bp-2]
	mov	ax, word [si]
	sub	ax, 22
	mov	word [si], ax
	; >>>>> Line:	123
	; >>>>> *(tmp->stackptr+11) = 0x200; 
	mov	si, word [bp-2]
	mov	si, word [si]
	add	si, 22
	mov	word [si], 512
	; >>>>> Line:	124
	; >>>>> *(tmp->stackptr+10) = 0; 
	mov	si, word [bp-2]
	mov	si, word [si]
	add	si, 20
	mov	word [si], 0
	; >>>>> Line:	125
	; >>>>> *(tmp->stackptr+9) = (int)task; 
	mov	si, word [bp-2]
	mov	si, word [si]
	add	si, 18
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	126
	; >>>>> *(tmp->stackptr+8) = 0; 
	mov	si, word [bp-2]
	mov	si, word [si]
	add	si, 16
	mov	word [si], 0
	; >>>>> Line:	127
	; >>>>> *(tmp->stackptr+7) = 0; 
	mov	si, word [bp-2]
	mov	si, word [si]
	add	si, 14
	mov	word [si], 0
	; >>>>> Line:	128
	; >>>>> *(tmp->stackptr 
	mov	si, word [bp-2]
	mov	si, word [si]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	129
	; >>>>> *(tmp->stackptr+5) = 0; 
	mov	si, word [bp-2]
	mov	si, word [si]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	130
	; >>>>> *(tmp->stackptr+4) = 0; 
	mov	si, word [bp-2]
	mov	si, word [si]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	131
	; >>>>> *(tmp->stackptr+3) = 0; 
	mov	si, word [bp-2]
	mov	si, word [si]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	132
	; >>>>> *(tmp->stackptr+2) = 0; 
	mov	si, word [bp-2]
	mov	si, word [si]
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	133
	; >>>>> *(tmp->stackptr+1) = 0; 
	mov	si, word [bp-2]
	mov	si, word [si]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	134
	; >>>>> *(tmp->stackptr+0) = 0; 
	mov	si, word [bp-2]
	mov	si, word [si]
	mov	word [si], 0
	; >>>>> Line:	136
	; >>>>> printString("before Scheduler...\n"); 
	mov	ax, L_yakc_16
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	138
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_17:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_18
	ALIGN	2
YKRun:
	; >>>>> Line:	142
	; >>>>> void YKRun(void){ 
	jmp	L_yakc_27
L_yakc_28:
	; >>>>> Line:	143
	; >>>>> run_flag = 1; 
	mov	byte [run_flag], 1
	; >>>>> Line:	144
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_27:
	push	bp
	mov	bp, sp
	jmp	L_yakc_28
L_yakc_30:
	DB	"before dipatcher...",0xA,0
	ALIGN	2
YKScheduler:
	; >>>>> Line:	147
	; >>>>> void YKScheduler(int save_flag){ 
	jmp	L_yakc_31
L_yakc_32:
	; >>>>> Line:	150
	; >>>>> if(!run_flag){ 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	mov	ax, word [TKCurrentlyRunning]
	mov	word [bp-4], ax
	; >>>>> Line:	150
	; >>>>> if(!run_flag){ 
	mov	al, byte [run_flag]
	test	al, al
	jne	L_yakc_33
	; >>>>> Line:	151
	; >>>>> return; 
	jmp	L_yakc_34
L_yakc_33:
	; >>>>> Line:	153
	; >>>>> if (TKCurrentlyRunning == highest_priority_task){ 
	mov	ax, word [bp-2]
	cmp	ax, word [TKCurrentlyRunning]
	jne	L_yakc_35
	; >>>>> Line:	154
	; >>>>> return; 
	jmp	L_yakc_34
L_yakc_35:
	; >>>>> Line:	156
	; >>>>>  
	mov	ax, word [YKCtxSwCount]
	inc	ax
	mov	word [YKCtxSwCount], ax
	; >>>>> Line:	157
	; >>>>> TKCurrentlyRunning = highest_priority_task; 
	mov	ax, word [bp-2]
	mov	word [TKCurrentlyRunning], ax
	; >>>>> Line:	159
	; >>>>> printString("before dipatcher...\n"); 
	mov	ax, L_yakc_30
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	161
	; >>>>> if(!save_flag){ 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_36
	; >>>>> Line:	162
	; >>>>> YKDispatcherSave(0,(int **) 1,(int ** ) 1, highest_priority_task->stackptr, highest_priority_task->ss); 
	mov	si, word [bp-2]
	add	si, 2
	push	word [si]
	mov	si, word [bp-2]
	push	word [si]
	mov	ax, 1
	push	ax
	mov	ax, 1
	push	ax
	xor	ax, ax
	push	ax
	call	YKDispatcherSave
	add	sp, 10
	jmp	L_yakc_37
L_yakc_36:
	; >>>>> Line:	165
	; >>>>> YKDispatcherSave(save_flag,&(currentlyRunning->stackptr),&(currentlyRunning->ss), highest_priority_task->stackptr, highest_priority_task->ss); 
	mov	si, word [bp-2]
	add	si, 2
	push	word [si]
	mov	si, word [bp-2]
	push	word [si]
	mov	ax, word [bp-4]
	add	ax, 2
	push	ax
	push	word [bp-4]
	push	word [bp+4]
	call	YKDispatcherSave
	add	sp, 10
L_yakc_37:
L_yakc_34:
	mov	sp, bp
	pop	bp
	ret
L_yakc_31:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_32
	ALIGN	2
YKCtxSwCount:
	TIMES	2 db 0
YKIdleCount:
	TIMES	2 db 0
YKRdyList:
	TIMES	2 db 0
YKSuspList:
	TIMES	2 db 0
YKAvailTCBList:
	TIMES	2 db 0
YKTCBArray:
	TIMES	70 db 0
YKISRCallDepth:
	TIMES	2 db 0
TKCurrentlyRunning:
	TIMES	2 db 0
idleStack:
	TIMES	512 db 0
