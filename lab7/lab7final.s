        CPU     8086
        ORG     0h
InterruptVectorTable:
        ; Internal x86 Interrupts:
        dd      0 ; Reserved (Div err)  ; Int 00h
        dd      0 ; Reserved (Step)     ; Int 01h
        dd      0 ; Reserved (NMI)      ; Int 02h
        dd      0 ; Reserved (Break)    ; Int 03h
        dd      0 ; Reserved (Overflow) ; Int 04h
        dd      0                       ; Int 05h
        dd      0                       ; Int 06h
        dd      0                       ; Int 07h
        ; Hardware Interrupts:
        dd      RESET ; Reset               ; Int 08h (IRQ 0)
        dd      TICK ; Tick                ; Int 09h (IRQ 1)
        dd      KEY ; Keyboard            ; Int 0Ah (IRQ 2)
        dd      0 ; Simptris Game Over  ; Int 0Bh (IRQ 3)
        dd      0 ; Simptris New Piece  ; Int 0Ch (IRQ 4)
        dd      0 ; Simptris Received   ; Int 0Dh (IRQ 5)
        dd      0 ; Simptris Touchdown  ; Int 0Eh (IRQ 6)
        dd      0 ; Simptris Clear      ; Int 0Fh (IRQ 7)
        ; Software Interrupts:
        dd      0 ; Reserved (PC BIOS)  ; Int 10h
        dd      0                       ; Int 11h
        dd      0                       ; Int 12h
        dd      0                       ; Int 13h
        dd      0                       ; Int 14h
        dd      0                       ; Int 15h
        dd      0                       ; Int 16h
        dd      0                       ; Int 17h
        dd      0                       ; Int 18h
        dd      0                       ; Int 19h
        dd      0                       ; Int 1Ah
        dd      0                       ; Int 1Bh
        dd      0                       ; Int 1Ch
        dd      0                       ; Int 1Dh
        dd      0                       ; Int 1Eh
        dd      0                       ; Int 1Fh
        dd      0                       ; Int 20h
        dd      0 ; Reserved (DOS)      ; Int 21h
        dd      0 ; Simptris Services   ; Int 22h
        dd      0                       ; Int 23h
        dd      0                       ; Int 24h
        dd      0                       ; Int 25h
        dd      0                       ; Int 26h
        dd      0                       ; Int 27h
        dd      0                       ; Int 28h
        dd      0                       ; Int 29h
        dd      0                       ; Int 2Ah
        dd      0                       ; Int 2Bh
        dd      0                       ; Int 2Ch
        dd      0                       ; Int 2Dh
        dd      0                       ; Int 2Eh
        dd      0                       ; Int 2Fh
KeyBuffer:                              ; Address 0xC0
        dw      0
NewPieceType:                           ; Address 0xC2
        dw      0
NewPieceID:                             ; Address 0xC4
        dw      0
NewPieceOrientation:                    ; Address 0xC6
        dw      0
NewPieceColumn:                         ; Address 0xC8
        dw      0
TouchdownID:                            ; Address 0xCA
	dw	0
ScreenBitMap0:                          ; Address 0xCC
        dw      0
ScreenBitMap1:
        dw      0
ScreenBitMap2:
        dw      0
ScreenBitMap3:
        dw      0
ScreenBitMap4:
        dw      0
ScreenBitMap5:
        dw      0
TIMES   100h-($-$$) db  0               ; Fill up to (but not including) address 100h with 0
	jmp	main
; This file contains support routines for 32-bit on the 8086.
; It is intended for use code generated by the C86 compiler.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SR_asldiv:			; l1 /= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_ldiv
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmod:			; l1 %= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmod
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmul:			; l1 *= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmul
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshl:			; l1 <<= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshl
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshr:			; l1 >>= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshr
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


SR_asuldiv:			; u1 /= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_uldiv
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asilmod:			; u1 %= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ilmod
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulmul:			; u1 *= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulmul
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshl:			; u1 << u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshl
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshr:			; u1 >> u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshr
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


; Main 32-bit routines begin here:

SR_ldiv:	; N_LDIV@
	pop    cx
	push   cs
	push   cx
	; LDIV@
	xor    cx,cx
	jmp    LSR_01
SR_uldiv:	; N_LUDIV@
	pop    cx
	push   cs
	push   cx
	; F_LUDIV@
	mov    cx,0001
	jmp    LSR_01
SR_lmod:	; N_LMOD@
	pop    cx
	push   cs
	push   cx
	; F_LMOD@
	mov    cx,0002
	jmp    LSR_01
SR_ilmod:	; N_LUMOD@
	pop    cx
	push   cs
	push   cx
	; LUMOD@
	mov    cx,0003
LSR_01:
	push   bp
	push   si
	push   di
	mov    bp,sp
	mov    di,cx
	mov    ax,[bp+0Ah]
	mov    dx,[bp+0Ch]
	mov    bx,[bp+0Eh]
	mov    cx,[bp+10h]
	or     cx,cx
	jne    LSR_02
	or     dx,dx
	je     LSR_10
	or     bx,bx
	je     LSR_10
LSR_02:
	test   di,0001
	jne    LSR_04
	or     dx,dx
	jns    LSR_03
	neg    dx
	neg    ax
	sbb    dx,0000
	or     di,000Ch
LSR_03:
	or     cx,cx
	jns    LSR_04
	neg    cx
	neg    bx
	sbb    cx,0000
	xor    di,0004
LSR_04:
	mov    bp,cx
	mov    cx,0020h
	push   di
	xor    di,di
	xor    si,si
LSR_05:
	shl    ax,1
	rcl    dx,1
	rcl    si,1
	rcl    di,1
	cmp    di,bp
	jb     LSR_07
	ja     LSR_06
	cmp    si,bx
	jb     LSR_07
LSR_06:
	sub    si,bx
	sbb    di,bp
	inc    ax
LSR_07:
	loop   LSR_05
	pop    bx
	test   bx,0002
	je     LSR_08
	mov    ax,si
	mov    dx,di
	shr    bx,1
LSR_08:
	test   bx,0004h
	je     LSR_09
	neg    dx
	neg    ax
	sbb    dx,0000
LSR_09:
	pop    di
	pop    si
	pop    bp
	retf   0008
LSR_10:
	div    bx
	test   di,0002
	je     LSR_11
	xchg   dx,ax
LSR_11:
	xor    dx,dx
	jmp    LSR_09
SR_lshl:	; N_LXLSH@
SR_ulshl:
	; r = a << b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

	mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXLSH@
	cmp    cl,10h
	jnb    LSR_12
	mov    bx,ax
	shl    ax,cl
	shl    dx,cl
	neg    cl
	add    cl,10h
	shr    bx,cl
	or     dx,bx
	pop    cx
	pop    bp
	retf
LSR_12:
	sub    cl,10h
	xchg   dx,ax
	xor    ax,ax
	shl    dx,cl
	pop    cx
	pop    bp
	retf
SR_lshr:	; N_LXRSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXRSH@
	cmp    cl,10h
	jnb    LSR_13
	mov    bx,dx
	shr    ax,cl
	sar    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_13:
	sub    cl,10h
	xchg   dx,ax
	cwd
	sar    ax,cl
	pop    cx
	pop    bp
	retf
SR_ulshr:	; N_LXURSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXURSH@
	cmp    cl,10h
	jnb    LSR_14
	mov    bx,dx
	shr    ax,cl
	shr    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_14:
	sub    cl,10h
	xchg   dx,ax
	xor    dx,dx
	shr    ax,cl
	pop    cx
	pop    bp
	retf
SR_lmul:	; N_LXMUL@
SR_ulmul:
	; r = a * b
	push   bp
	push   si
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx
	push   bx

        mov    bx, [bp+6]	; pop loword(a)
	mov    cx, [bp+8]	; pop hiword(a)
	mov    ax, [bp+10]	; pop loword(b)
	mov    dx, [bp+12]	; pop hiword(b)
	
	xchg   si,ax
	xchg   dx,ax
	test   ax,ax
	je     LSR_15
	mul    bx
LSR_15:
	jcxz   LSR_16
	xchg   cx,ax
	mul    si
	add    ax,cx
LSR_16:
	xchg   si,ax
	mul    bx
	add    dx,si
	pop    bx
	pop    cx
	pop    si
	pop    bp
	ret

; Generated by c86 (BYU-NASM) 5.1 (beta) from clib.c
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
new_line:
	db	13,10,36
	ALIGN	2
signalEOI:
	jmp	L_clib_1
L_clib_2:
	mov	al, 0x20
	out	0x20, al
	mov	sp, bp
	pop	bp
	ret
L_clib_1:
	push	bp
	mov	bp, sp
	jmp	L_clib_2
	ALIGN	2
exit:
	jmp	L_clib_4
L_clib_5:
	mov	ah, 4Ch
	mov	al, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_4:
	push	bp
	mov	bp, sp
	jmp	L_clib_5
	ALIGN	2
print:
	jmp	L_clib_7
L_clib_8:
	mov	ah, 40h
	mov	bx, 1
	mov	cx, [bp+6]
	mov	dx, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_7:
	push	bp
	mov	bp, sp
	jmp	L_clib_8
	ALIGN	2
printChar:
	jmp	L_clib_10
L_clib_11:
	mov	ah, 2
	mov	dl, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_10:
	push	bp
	mov	bp, sp
	jmp	L_clib_11
	ALIGN	2
printNewLine:
	jmp	L_clib_13
L_clib_14:
	mov	ah, 9
	mov	dx, new_line
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_13:
	push	bp
	mov	bp, sp
	jmp	L_clib_14
	ALIGN	2
printString:
	jmp	L_clib_16
L_clib_17:
	xor	si,si
	mov	bx, [bp+4]
	jmp	printString2
	printString1:
	inc	si
	printString2:
	cmp	byte [bx+si],0
	jne	printString1
	mov	dx, bx
	mov	cx, si
	mov	ah, 40h
	mov	bx, 1
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_16:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_clib_17
	ALIGN	2
printInt:
	jmp	L_clib_19
L_clib_20:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	cmp	word [bp+4], 0
	jge	L_clib_21
	mov	byte [bp-10], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	neg	ax
	mov	word [bp+4], ax
L_clib_21:
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_22
	mov	word [bp-4], 1
	jmp	L_clib_23
L_clib_22:
	jmp	L_clib_25
L_clib_24:
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
L_clib_25:
	mov	ax, word [bp+4]
	cwd
	idiv	word [bp-4]
	test	ax, ax
	je	L_clib_24
L_clib_26:
L_clib_23:
	jmp	L_clib_28
L_clib_27:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	ax, dx
	mov	word [bp+4], ax
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
	mov	ax, word [bp-4]
	mov	word [bp-4], ax
L_clib_28:
	cmp	word [bp-4], 0
	jg	L_clib_27
L_clib_29:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_19:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_20
	ALIGN	2
printLong:
	jmp	L_clib_31
L_clib_32:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	cmp	word [bp+6], 0
	jg	L_clib_33
	jl	L_clib_34
	cmp	word [bp+4], 0
	jae	L_clib_33
L_clib_34:
	mov	byte [bp-17], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	neg	ax
	adc	dx, 0
	neg	dx
	mov	word [bp+4], ax
	mov	word [bp+6], dx
L_clib_33:
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_35
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_36
L_clib_35:
	jmp	L_clib_38
L_clib_37:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_38:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_ldiv
	or	dx, ax
	je	L_clib_37
L_clib_39:
L_clib_36:
	jmp	L_clib_41
L_clib_40:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_lmod
	mov	word [bp+4], ax
	mov	word [bp+6], dx
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_41:
	cmp	word [bp-4], 0
	jg	L_clib_40
	jne	L_clib_43
	cmp	word [bp-6], 0
	ja	L_clib_40
L_clib_43:
L_clib_42:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_31:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_32
	ALIGN	2
printUInt:
	jmp	L_clib_45
L_clib_46:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_47
	mov	word [bp-4], 1
	jmp	L_clib_48
L_clib_47:
	jmp	L_clib_50
L_clib_49:
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_50:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	test	ax, ax
	je	L_clib_49
L_clib_51:
L_clib_48:
	jmp	L_clib_53
L_clib_52:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	word [bp+4], dx
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_53:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_clib_52
L_clib_54:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_45:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_46
	ALIGN	2
printULong:
	jmp	L_clib_56
L_clib_57:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_58
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_59
L_clib_58:
	jmp	L_clib_61
L_clib_60:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_61:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	or	dx, ax
	je	L_clib_60
L_clib_62:
L_clib_59:
	jmp	L_clib_64
L_clib_63:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	lea	ax, [bp+4]
	push	ax
	call	SR_asilmod
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_64:
	mov	ax, word [bp-6]
	mov	dx, word [bp-4]
	or	dx, ax
	jne	L_clib_63
L_clib_65:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_56:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_57
	ALIGN	2
printByte:
	jmp	L_clib_67
L_clib_68:
	mov	al, byte [bp+4]
	cbw
	mov	cx, 4
	sar	ax, cl
	and	ax, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_69
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_70
L_clib_69:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_70:
	mov	byte [bp-3], al
	mov	al, byte [bp+4]
	and	al, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_71
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_72
L_clib_71:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_72:
	mov	byte [bp-2], al
	mov	ax, 2
	push	ax
	lea	ax, [bp-3]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_67:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_clib_68
	ALIGN	2
printWord:
	jmp	L_clib_74
L_clib_75:
	mov	word [bp-2], 3
	jmp	L_clib_77
L_clib_76:
	mov	ax, word [bp+4]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_80
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_81
L_clib_80:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_81:
	mov	si, word [bp-2]
	lea	dx, [bp-7]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp+4]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp+4], ax
L_clib_79:
	dec	word [bp-2]
L_clib_77:
	cmp	word [bp-2], 0
	jge	L_clib_76
L_clib_78:
	mov	ax, 4
	push	ax
	lea	ax, [bp-7]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_74:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_clib_75
	ALIGN	2
printDWord:
	jmp	L_clib_83
L_clib_84:
	lea	ax, [bp+4]
	mov	si, ax
	mov	ax, word [si]
	mov	word [bp-6], ax
	lea	ax, [bp+4]
	mov	si, ax
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-8], ax
	mov	word [bp-2], 3
	jmp	L_clib_86
L_clib_85:
	mov	ax, word [bp-6]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_89
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_90
L_clib_89:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_90:
	mov	dx, word [bp-2]
	add	dx, 4
	mov	si, dx
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-6]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_91
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_92
L_clib_91:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_92:
	mov	si, word [bp-2]
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-8]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-8], ax
L_clib_88:
	dec	word [bp-2]
L_clib_86:
	cmp	word [bp-2], 0
	jge	L_clib_85
L_clib_87:
	mov	ax, 8
	push	ax
	lea	ax, [bp-16]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_83:
	push	bp
	mov	bp, sp
	sub	sp, 16
	jmp	L_clib_84
; ISR file
;1 Save the context of whatever was running by pushing all registers onto the stack, except SP, SS, CS, IP, and the flags.
;2 Enable interrupts to allow higher priority IRQs to interrupt.
;3 Run the interrupt handler, which is usually a C function that does the work for this interrupt.
;4 Disable interrupts.
;5 Send the EOI command to the PIC, informing it that the handler is finished.
;6 Restore the context of what was running before the interrupt occurred by popping the registers saved in step 1 off the stack.
;7 Execute the iret instruction. This restores in one atomic operation the values for IP, CS, and the flags, which were automatically -
;	; - saved on the stack by the processor when the interrupt occurred. This effectively restores execution to the point where the interrupt occurred.

RESET:
	push ax
	push bx
	push cx
	push dx
	push bp
	push si
	push di
	push ds
	push es

	call YKEnterISR

	sti
	call c_reset_handler
	cli

	mov al, 0x20        ; send eoi to pic
	out 0x20, al        ; send eoi to pic

	call YKExitISR

	pop es
	pop ds
	pop di
	pop si
	pop bp
	pop dx
	pop cx
	pop bx
	pop ax

	iret


KEY:

	push ax
	push bx
	push cx
	push dx
	push bp
	push si
	push di
	push ds
	push es

  mov ax, [YKISRDepth]          ;save the depth counter
	cmp ax, 0                     ; check if the depth is zero, if it is save the SP of the task we are interupting
	jnz key_not_lowest_interrupt  ; skip saving the stack because we are not interupting that task

	mov bx, [YKRdyList] ; save the sp
	mov [bx], sp

key_not_lowest_interrupt:
	call YKEnterISR

	sti                 ; enable interrupts for higher priority IRQs ?
	call c_key_handler  ; run
	cli                 ; disable interrupts ?

	mov al, 0x20        ; send eoi to pic
	out 0x20, al        ; send eoi to pic

	call YKExitISR

	;restore reg
	pop es
	pop ds
	pop di
	pop si
	pop bp
	pop dx
	pop cx
	pop bx
	pop ax

	iret

TICK:
	; save reg
	push ax
	push bx
	push cx
	push dx
	push bp
	push si
	push di
	push ds
	push es

  mov ax, [YKISRDepth] ;save the depth counter
	cmp ax, 0            ; check if the depth is zero, if it is save the SP of the task we are interupting
	jnz not_lowest_interrupt


	mov bx, [YKRdyList] ; save SP of interupted task
	mov [bx], sp

not_lowest_interrupt:
	call YKEnterISR

	sti                 ; enable interrupts for higher priority IRQs ?

	;call YKTickHandler;
	call c_tick_handler ; run interrupt handler ? I think this is the c file

	cli                 ; disable interrupts

	mov al, 0x20        ; send eoi to pic
	out 0x20, al        ; send eoi to pic

	call YKExitISR

	;restore
	pop es
	pop ds
	pop di
	pop si
	pop bp
	pop dx
	pop cx
	pop bx
	pop ax

	iret
; Generated by c86 (BYU-NASM) 5.1 (beta) from myinth.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
c_reset_handler:
	; >>>>> Line:	8
	; >>>>> void c_reset_handler(){ 
	jmp	L_myinth_1
L_myinth_2:
	; >>>>> Line:	9
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_1:
	push	bp
	mov	bp, sp
	jmp	L_myinth_2
	ALIGN	2
c_tick_handler:
	; >>>>> Line:	12
	; >>>>> void c_tick_handler(){ 
	jmp	L_myinth_4
L_myinth_5:
	; >>>>> Line:	13
	; >>>>> YKTickHandler(); 
	call	YKTickHandler
	mov	sp, bp
	pop	bp
	ret
L_myinth_4:
	push	bp
	mov	bp, sp
	jmp	L_myinth_5
L_myinth_8:
	DB	") IGNORED",0xA,0
L_myinth_7:
	DB	0xA,"KEYPRESS (",0
	ALIGN	2
c_key_handler:
	; >>>>> Line:	16
	; >>>>> 0); 
	jmp	L_myinth_9
L_myinth_10:
	; >>>>> Line:	18
	; >>>>> c = KeyBuffer; 
	mov	al, byte [KeyBuffer]
	mov	byte [bp-1], al
	; >>>>> Line:	20
	; >>>>> if(c == 'a') YKEventSet(charEvent, 0x1); 
	cmp	byte [bp-1], 97
	jne	L_myinth_11
	; >>>>> Line:	20
	; >>>>> if(c == 'a') YKEventSet(charEvent, 0x1); 
	mov	ax, 1
	push	ax
	push	word [charEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_myinth_12
L_myinth_11:
	; >>>>> Line:	21
	; >>>>> else if(c == 'b') YKEventSet(charEvent, 0x2); 
	cmp	byte [bp-1], 98
	jne	L_myinth_13
	; >>>>> Line:	21
	; >>>>> else if(c == 'b') YKEventSet(charEvent, 0x2); 
	mov	ax, 2
	push	ax
	push	word [charEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_myinth_14
L_myinth_13:
	; >>>>> Line:	22
	; >>>>> else if(c == 'c') YKEventSet(charEvent, 0x4); 
	cmp	byte [bp-1], 99
	jne	L_myinth_15
	; >>>>> Line:	22
	; >>>>> else if(c == 'c') YKEventSet(charEvent, 0x4); 
	mov	ax, 4
	push	ax
	push	word [charEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_myinth_16
L_myinth_15:
	; >>>>> Line:	23
	; >>>>> else if(c == 'd') YKEventSet(charEvent, 0x1 | 0x2 | 0x4); 
	cmp	byte [bp-1], 100
	jne	L_myinth_17
	; >>>>> Line:	23
	; >>>>> else if(c == 'd') YKEventSet(charEvent, 0x1 | 0x2 | 0x4); 
	mov	ax, 7
	push	ax
	push	word [charEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_myinth_18
L_myinth_17:
	; >>>>> Line:	24
	; >>>>> else if(c == '1') YKEventSet(numEvent, 0x1); 
	cmp	byte [bp-1], 49
	jne	L_myinth_19
	; >>>>> Line:	24
	; >>>>> else if(c == '1') YKEventSet(numEvent, 0x1); 
	mov	ax, 1
	push	ax
	push	word [numEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_myinth_20
L_myinth_19:
	; >>>>> Line:	25
	; >>>>> else if(c == '2') YKEventSet(numEvent, 0x2); 
	cmp	byte [bp-1], 50
	jne	L_myinth_21
	; >>>>> Line:	25
	; >>>>> else if(c == '2') YKEventSet(numEvent, 0x2); 
	mov	ax, 2
	push	ax
	push	word [numEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_myinth_22
L_myinth_21:
	; >>>>> Line:	26
	; >>>>> else if(c == '3') YKEventSet(numEvent, 0x4); 
	cmp	byte [bp-1], 51
	jne	L_myinth_23
	; >>>>> Line:	26
	; >>>>> else if(c == '3') YKEventSet(numEvent, 0x4); 
	mov	ax, 4
	push	ax
	push	word [numEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_myinth_24
L_myinth_23:
	; >>>>> Line:	28
	; >>>>> print("\nKEYPRESS (", 11); 
	mov	ax, 11
	push	ax
	mov	ax, L_myinth_7
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	29
	; >>>>> printChar(c); 
	push	word [bp-1]
	call	printChar
	add	sp, 2
	; >>>>> Line:	30
	; >>>>> print(") IGNORED\n", 10); 
	mov	ax, 10
	push	ax
	mov	ax, L_myinth_8
	push	ax
	call	print
	add	sp, 4
L_myinth_24:
L_myinth_22:
L_myinth_20:
L_myinth_18:
L_myinth_16:
L_myinth_14:
L_myinth_12:
	mov	sp, bp
	pop	bp
	ret
L_myinth_9:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_myinth_10
; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
run_flag:
	DB	0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	29
	; >>>>> void YKInitialize(void){ 
	jmp	L_yakc_1
L_yakc_2:
	; >>>>> Line:	31
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	32
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	33
	; >>>>> TKCurrentlyRunning = 0; 
	mov	word [TKCurrentlyRunning], 0
	; >>>>> Line:	34
	; >>>>> YKISRDepth = 0; 
	mov	word [YKISRDepth], 0
	; >>>>> Line:	35
	; >>>>> YKTickNum = 0; 
	mov	word [YKTickNum], 0
	; >>>>> Line:	37
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	39
	; >>>>> YKAvailTCBList = &(YKTCBArray[0]); 
	mov	word [YKAvailTCBList], YKTCBArray
	; >>>>> Line:	41
	; >>>>> for (i = 0; i < 9; i++){ 
	mov	word [bp-2], 0
	jmp	L_yakc_4
L_yakc_3:
	; >>>>> Line:	42
	; >>>>> YKTCBArray[i].next = &(YKTCBArray[i+1]); 
	mov	ax, word [bp-2]
	inc	ax
	mov	cx, 18
	imul	cx
	add	ax, YKTCBArray
	push	ax
	mov	ax, word [bp-2]
	mov	cx, 18
	imul	cx
	mov	dx, ax
	add	dx, YKTCBArray
	mov	si, dx
	add	si, 8
	pop	ax
	mov	word [si], ax
L_yakc_6:
	inc	word [bp-2]
L_yakc_4:
	cmp	word [bp-2], 9
	jl	L_yakc_3
L_yakc_5:
	; >>>>> Line:	44
	; >>>>> YKTCBArray[9].next = 0; 
	mov	word [(170+YKTCBArray)], 0
	; >>>>> Line:	67
	; >>>>> YKNewTask(YKIdleTask, (void*)&idleStack[256], 100); 
	mov	al, 100
	push	ax
	mov	ax, (idleStack+512)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	sp, bp
	pop	bp
	ret
L_yakc_1:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_2
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	70
	; >>>>> void YKIdleTask(void){ 
	jmp	L_yakc_8
L_yakc_9:
	; >>>>> Line:	71
	; >>>>> while(1) 
	jmp	L_yakc_11
L_yakc_10:
	; >>>>> Line:	72
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	73
	; >>>>> YKIdleCount=YKIdleCount+1; 
	mov	ax, word [YKIdleCount]
	inc	ax
	mov	word [YKIdleCount], ax
	; >>>>> Line:	74
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_11:
	jmp	L_yakc_10
L_yakc_12:
	mov	sp, bp
	pop	bp
	ret
L_yakc_8:
	push	bp
	mov	bp, sp
	jmp	L_yakc_9
	ALIGN	2
YKNewTask:
	; >>>>> Line:	78
	; >>>>> void YKNewTask( void (*task)(void), void *taskStack, unsigned char priority){ 
	jmp	L_yakc_14
L_yakc_15:
	; >>>>> Line:	82
	; >>>>> taskStack = ((int *)taskStack) - 1; 
	mov	ax, word [bp+6]
	sub	ax, 2
	mov	word [bp+6], ax
	; >>>>> Line:	85
	; >>>>> tmp = YKAvailTCBList; 
	mov	ax, word [YKAvailTCBList]
	mov	word [bp-2], ax
	; >>>>> Line:	86
	; >>>>> YKAvailTCBList = tmp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKAvailTCBList], ax
	; >>>>> Line:	88
	; >>>>> tmp->priority = priority; 
	mov	al, byte [bp+8]
	xor	ah, ah
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], ax
	; >>>>> Line:	89
	; >>>>> tmp->delay = 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	91
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	93
	; >>>>> if (YKRdyList == 0){ 
	mov	ax, word [YKRdyList]
	test	ax, ax
	jne	L_yakc_16
	; >>>>> Line:	94
	; >>>>> YKRdyList = tmp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	; >>>>> Line:	95
	; >>>>> tmp->next = 0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	96
	; >>>>> tmp->prev = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	jmp	L_yakc_17
L_yakc_16:
	; >>>>> Line:	99
	; >>>>> tmp2 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	100
	; >>>>> while (tmp2->priority < tmp->priority){ 
	jmp	L_yakc_19
L_yakc_18:
	; >>>>> Line:	101
	; >>>>> +i) 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_19:
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_18
L_yakc_20:
	; >>>>> Line:	103
	; >>>>> if (tmp2->prev == 0){ 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_21
	; >>>>> Line:	104
	; >>>>> YKRdyList = tmp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_22
L_yakc_21:
	; >>>>> Line:	107
	; >>>>> tmp2->prev->next = tmp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_22:
	; >>>>> Line:	109
	; >>>>> tmp->prev = tmp2->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	110
	; >>>>> tmp->next = tmp2; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	111
	; >>>>> tmp2->prev = tmp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_17:
	; >>>>> Line:	115
	; >>>>> tmp->stackptr = taskStack; 
	mov	si, word [bp-2]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	118
	; >>>>> tmp->stackptr = tmp->stackptr - 11; 
	mov	si, word [bp-2]
	mov	ax, word [si]
	sub	ax, 22
	mov	word [si], ax
	; >>>>> Line:	119
	; >>>>> for(i=11; i>=0;i--){ 
	mov	word [bp-6], 11
	jmp	L_yakc_24
L_yakc_23:
	; >>>>> Line:	120
	; >>>>> if(i == 11){ 
	cmp	word [bp-6], 11
	jne	L_yakc_27
	; >>>>> Line:	121
	; >>>>> *(tmp->stackptr+i) = 0x200; 
	mov	ax, word [bp-6]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp-2]
	add	si, word [di]
	mov	word [si], 512
	jmp	L_yakc_28
L_yakc_27:
	; >>>>> Line:	123
	; >>>>> else if(i == 10){ 
	cmp	word [bp-6], 10
	jne	L_yakc_29
	; >>>>> Line:	124
	; >>>>> *(tmp->stackptr+i) = 0; 
	mov	ax, word [bp-6]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp-2]
	add	si, word [di]
	mov	word [si], 0
	jmp	L_yakc_30
L_yakc_29:
	; >>>>> Line:	126
	; >>>>> else if(i == 9){ 
	cmp	word [bp-6], 9
	jne	L_yakc_31
	; >>>>> Line:	127
	; >>>>> *(tmp->stackptr+i) = (int)task; 
	mov	ax, word [bp-6]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp-2]
	add	si, word [di]
	mov	ax, word [bp+4]
	mov	word [si], ax
	jmp	L_yakc_32
L_yakc_31:
	; >>>>> Line:	130
	; >>>>> *(tmp->stackptr+i) 
	mov	ax, word [bp-6]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp-2]
	add	si, word [di]
	mov	word [si], 0
L_yakc_32:
L_yakc_30:
L_yakc_28:
L_yakc_26:
	dec	word [bp-6]
L_yakc_24:
	cmp	word [bp-6], 0
	jge	L_yakc_23
L_yakc_25:
	; >>>>> Line:	135
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_14:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_15
L_yakc_34:
	DB	"Start Run and call scheduler",0xA,0
	ALIGN	2
YKRun:
	; >>>>> Line:	138
	; >>>>> void YKRun(void){ 
	jmp	L_yakc_35
L_yakc_36:
	; >>>>> Line:	139
	; >>>>> printString("Start Run and call scheduler\n"); 
	mov	ax, L_yakc_34
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	140
	; >>>>> run_flag = 1; 
	mov	byte [run_flag], 1
	; >>>>> Line:	141
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_35:
	push	bp
	mov	bp, sp
	jmp	L_yakc_36
	ALIGN	2
YKScheduler:
	; >>>>> Line:	144
	; >>>>> void YKScheduler(int save_flag){ 
	jmp	L_yakc_38
L_yakc_39:
	; >>>>> Line:	148
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	150
	; >>>>> highest_priority_task = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	151
	; >>>>> currentlyRunning = TKCurrentlyRunning; 
	mov	ax, word [TKCurrentlyRunning]
	mov	word [bp-4], ax
	; >>>>> Line:	153
	; >>>>> if(!run_flag || (TKCurrentlyRunning == highest_priority_task)){ 
	mov	al, byte [run_flag]
	test	al, al
	je	L_yakc_41
	mov	ax, word [bp-2]
	cmp	ax, word [TKCurrentlyRunning]
	jne	L_yakc_40
L_yakc_41:
	; >>>>> Line:	154
	; >>>>> return; 
	jmp	L_yakc_42
L_yakc_40:
	; >>>>> Line:	157
	; >>>>> YKCtxSwCount = YKCtxSwCount + 1; 
	mov	ax, word [YKCtxSwCount]
	inc	ax
	mov	word [YKCtxSwCount], ax
	; >>>>> Line:	158
	; >>>>> TKCurrentlyRunning = highest_priority_task; 
	mov	ax, word [bp-2]
	mov	word [TKCurrentlyRunning], ax
	; >>>>> Line:	159
	; >>>>> if(!save_fla 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_43
	; >>>>> Line:	160
	; >>>>> YKDispatcherNSave(highest_priority_task->stackptr); 
	mov	si, word [bp-2]
	push	word [si]
	call	YKDispatcherNSave
	add	sp, 2
	jmp	L_yakc_44
L_yakc_43:
	; >>>>> Line:	163
	; >>>>> YKDispatcherSave(&(currentlyRunning->stackptr), highest_priority_task->stackptr); 
	mov	si, word [bp-2]
	push	word [si]
	push	word [bp-4]
	call	YKDispatcherSave
	add	sp, 4
L_yakc_44:
L_yakc_42:
	mov	sp, bp
	pop	bp
	ret
L_yakc_38:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_39
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	167
	; >>>>> void YKDelayTask(unsigned count){ 
	jmp	L_yakc_46
L_yakc_47:
	; >>>>> Line:	169
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	171
	; >>>>> if(count == 0){ 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_48
	; >>>>> Line:	172
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	173
	; >>>>> return; 
	jmp	L_yakc_49
L_yakc_48:
	; >>>>> Line:	176
	; >>>>> ready = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	177
	; >>>>> YKRdyList = ready->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	178
	; >>>>> ready->next->prev = 0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	180
	; >>>>> ready->next = YKDelayList; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [YKDelayList]
	mov	word [si], ax
	; >>>>> Line:	181
	; >>>>> YKDelayList = ready; 
	mov	ax, word [bp-2]
	mov	word [YKDelayList], ax
	; >>>>> Line:	182
	; >>>>> ready->prev = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	183
	; >>>>> if(ready->next != 0){ 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_50
	; >>>>> Line:	184
	; >>>>> ready->next->prev=ready; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_50:
	; >>>>> Line:	186
	; >>>>> ready->delay = count 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	187
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	188
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_49:
	mov	sp, bp
	pop	bp
	ret
L_yakc_46:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_47
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	192
	; >>>>> void YKEnterISR(void){ 
	jmp	L_yakc_52
L_yakc_53:
	; >>>>> Line:	193
	; >>>>> YKISRDepth = YKISRDepth + 1; 
	mov	ax, word [YKISRDepth]
	inc	ax
	mov	word [YKISRDepth], ax
	mov	sp, bp
	pop	bp
	ret
L_yakc_52:
	push	bp
	mov	bp, sp
	jmp	L_yakc_53
	ALIGN	2
YKExitISR:
	; >>>>> Line:	196
	; >>>>> void YKExitISR(void){ 
	jmp	L_yakc_55
L_yakc_56:
	; >>>>> Line:	197
	; >>>>> YKISRDepth = YKISRDepth - 1; 
	mov	ax, word [YKISRDepth]
	dec	ax
	mov	word [YKISRDepth], ax
	; >>>>> Line:	198
	; >>>>> if(YKISRDepth == 0) { 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_yakc_57
	; >>>>> Line:	199
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_57:
	mov	sp, bp
	pop	bp
	ret
L_yakc_55:
	push	bp
	mov	bp, sp
	jmp	L_yakc_56
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	203
	; >>>>> void YKTickHandler(void){ 
	jmp	L_yakc_59
L_yakc_60:
	; >>>>> Line:	205
	; >>>>> tempDelay = YKDelayList; 
	mov	ax, word [YKDelayList]
	mov	word [bp-2], ax
	; >>>>> Line:	206
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	208
	; >>>>> YKTickNum = YKTickNum + 1; 
	mov	ax, word [YKTickNum]
	inc	ax
	mov	word [YKTickNum], ax
	; >>>>> Line:	210
	; >>>>> while(tempDelay != 0){ 
	jmp	L_yakc_62
L_yakc_61:
	; >>>>> Line:	211
	; >>>>> tempNext = tempDelay->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	212
	; >>>>> tempDelay->delay = tempDelay->delay - 1; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	dec	ax
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], ax
	; >>>>> Line:	213
	; >>>>> if(tempDelay->delay <= 0){ 
	mov	si, word [bp-2]
	add	si, 6
	cmp	word [si], 0
	jg	L_yakc_64
	; >>>>> Line:	214
	; >>>>> if(tempDelay->prev == 0){ 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_65
	; >>>>> Line:	215
	; >>>>>  
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKDelayList], ax
	jmp	L_yakc_66
L_yakc_65:
	; >>>>> Line:	218
	; >>>>> tempDelay->prev->next = tempDelay->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp-2]
	add	di, 10
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_66:
	; >>>>> Line:	220
	; >>>>> if(tempDelay->next != 0){ 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_67
	; >>>>> Line:	221
	; >>>>> tempDelay->next->prev = tempDelay->prev; 
	mov	si, word [bp-2]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 8
	mov	di, word [di]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_67:
	; >>>>> Line:	224
	; >>>>> tempReady = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	225
	; >>>>> while(tempReady->priority < tempDelay->priority){ 
	jmp	L_yakc_69
L_yakc_68:
	; >>>>> Line:	226
	; >>>>> tempReady = tempReady->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_69:
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_68
L_yakc_70:
	; >>>>> Line:	228
	; >>>>> if(tempReady->prev == 0){ 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_71
	; >>>>> Line:	229
	; >>>>> YKRdyList = tempDelay; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_72
L_yakc_71:
	; >>>>> Line:	232
	; >>>>> tempReady->prev->next = tempDelay; 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_72:
	; >>>>> Line:	235
	; >>>>> tempDelay->prev = tempReady->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	236
	; >>>>> &  
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	237
	; >>>>> tempReady->prev = tempDelay; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_64:
	; >>>>> Line:	239
	; >>>>> tempDelay = tempNext; 
	mov	ax, word [bp-6]
	mov	word [bp-2], ax
L_yakc_62:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_61
L_yakc_63:
	; >>>>> Line:	241
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_59:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_60
	ALIGN	2
YKEventCreate:
	; >>>>> Line:	484
	; >>>>> YKEVENT *YKEventCreate(unsigned initialValue){ 
	jmp	L_yakc_74
L_yakc_75:
	; >>>>> Line:	486
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	487
	; >>>>> for (i = 0; YKEVENTArray[i].active; i++){}; 
	mov	word [bp-2], 0
	jmp	L_yakc_77
L_yakc_76:
L_yakc_79:
	; >>>>> Line:	487
	; >>>>> for (i = 0; YKEVENTArray[i].active; i++){}; 
	inc	word [bp-2]
L_yakc_77:
	mov	ax, word [bp-2]
	shl	ax, 1
	shl	ax, 1
	mov	si, ax
	add	si, YKEVENTArray
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_76
L_yakc_78:
	; >>>>> Line:	489
	; >>>>> YKEVENTArray[i].active = 1; 
	mov	ax, word [bp-2]
	shl	ax, 1
	shl	ax, 1
	mov	si, ax
	add	si, YKEVENTArray
	mov	word [si], 1
	; >>>>> Line:	490
	; >>>>> YKEVENTArray[i].flag = initialValue; 
	mov	ax, word [bp-2]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKEVENTArray
	mov	si, ax
	add	si, 2
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	492
	; >>>>> return &(YKEVENTArray[i]); 
	mov	ax, word [bp-2]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKEVENTArray
L_yakc_80:
	mov	sp, bp
	pop	bp
	ret
L_yakc_74:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_75
	ALIGN	2
YKEventPend:
	; >>>>> Line:	495
	; >>>>> unsigned YKEventPend(YKEVENT *event, unsigned eventMask, int waitMode){ 
	jmp	L_yakc_82
L_yakc_83:
	; >>>>> Line:	498
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	500
	; >>>>> if(((waitMode == 0) && ((eventMask &  
	mov	ax, word [bp+8]
	test	ax, ax
	jne	L_yakc_86
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	and	ax, word [bp+6]
	jne	L_yakc_85
L_yakc_86:
	cmp	word [bp+8], 1
	jne	L_yakc_84
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	and	ax, word [bp+6]
	mov	dx, word [bp+6]
	cmp	dx, ax
	jne	L_yakc_84
L_yakc_85:
	; >>>>> Line:	502
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	503
	; >>>>> return event->flag; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	jmp	L_yakc_87
L_yakc_84:
	; >>>>> Line:	506
	; >>>>> readyTask = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	507
	; >>>>> YKRdyList = readyTask->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	508
	; >>>>> readyTask->next->prev = 0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	509
	; >>>>> readyTask->next = YKEventWaitList; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [YKEventWaitList]
	mov	word [si], ax
	; >>>>> Line:	510
	; >>>>> YKEventWaitList = readyTask; 
	mov	ax, word [bp-2]
	mov	word [YKEventWaitList], ax
	; >>>>> Line:	511
	; >>>>> readyTask->prev = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	513
	; >>>>> if(readyTask->next != 0){ 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_88
	; >>>>> Line:	514
	; >>>>> readyTask->next->prev = readyTask; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_88:
	; >>>>> Line:	517
	; >>>>> readyTask->event = event; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	518
	; >>>>> readyTask->eventMask = eventMask; 
	mov	si, word [bp-2]
	add	si, 14
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	519
	; >>>>> readyTask->waitMode = waitMode; 
	mov	si, word [bp-2]
	add	si, 16
	mov	ax, word [bp+8]
	mov	word [si], ax
	; >>>>> Line:	521
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	522
	; >>>>> ntTa 
	call	YKExitMutex
	; >>>>> Line:	524
	; >>>>> return event->flag; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
L_yakc_87:
	mov	sp, bp
	pop	bp
	ret
L_yakc_82:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_83
	ALIGN	2
YKEventSet:
	; >>>>> Line:	527
	; >>>>> void YKEventSet(YKEVENT *event, unsigned eventMask){ 
	jmp	L_yakc_90
L_yakc_91:
	; >>>>> Line:	529
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	530
	; >>>>> event->flag |= eventMask; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp+6]
	or	word [si], ax
	; >>>>> Line:	532
	; >>>>> for(eventTask = YKEventWaitList; eventTask != 0; ){ 
	mov	ax, word [YKEventWaitList]
	mov	word [bp-2], ax
	jmp	L_yakc_93
L_yakc_92:
	; >>>>> Line:	533
	; >>>>> taskNext=eventTask->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	534
	; >>>>> if(eventTask->event != event){ 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [bp+4]
	cmp	ax, word [si]
	je	L_yakc_96
	; >>>>> Line:	535
	; >>>>> eventTask = taskNext; 
	mov	ax, word [bp-8]
	mov	word [bp-2], ax
	; >>>>> Line:	536
	; >>>>> continue; 
	jmp	L_yakc_95
	jmp	L_yakc_97
L_yakc_96:
	; >>>>> Line:	539
	; >>>>> if( ((eventTask->waitMode == 0) && ((eventTask->eventMask & event->flag ) > 0 )) || 
	mov	si, word [bp-2]
	add	si, 16
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_100
	mov	si, word [bp-2]
	add	si, 14
	mov	ax, word [si]
	mov	si, word [bp+4]
	add	si, 2
	and	ax, word [si]
	jne	L_yakc_99
L_yakc_100:
	mov	si, word [bp-2]
	add	si, 16
	cmp	word [si], 1
	jne	L_yakc_98
	mov	si, word [bp-2]
	add	si, 14
	mov	ax, word [si]
	mov	si, word [bp+4]
	add	si, 2
	and	ax, word [si]
	mov	si, word [bp-2]
	add	si, 14
	mov	dx, word [si]
	cmp	dx, ax
	jne	L_yakc_98
L_yakc_99:
	; >>>>> Line:	541
	; >>>>> unWaitTask = eventTask; 
	mov	ax, word [bp-2]
	mov	word [bp-4], ax
	; >>>>> Line:	543
	; >>>>> if(unWaitTask->prev == 0){ 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_101
	; >>>>> Line:	544
	; >>>>> YKEventWaitList = unWaitTask->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKEventWaitList], ax
	jmp	L_yakc_102
L_yakc_101:
	; >>>>> Line:	547
	; >>>>> unWaitTask->prev->next = unWaitTask->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	di, word [bp-4]
	add	di, 10
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_102:
	; >>>>> Line:	549
	; >>>>> if (unWaitTask->next != 0){ 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_103
	; >>>>> Line:	550
	; >>>>> unWaitTask->next->prev = unWaitTask->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-4]
	add	di, 8
	mov	di, word [di]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_103:
	; >>>>> Line:	552
	; >>>>> readyTask = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-6], ax
	; >>>>> Line:	553
	; >>>>> while (readyTask->priority < unWaitTask->priority){ 
	jmp	L_yakc_105
L_yakc_104:
	; >>>>> Line:	554
	; >>>>> readyTask = readyTask->next; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_105:
	mov	si, word [bp-6]
	add	si, 4
	mov	di, word [bp-4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_104
L_yakc_106:
	; >>>>> Line:	556
	; >>>>> if(rea 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_107
	; >>>>> Line:	557
	; >>>>> YKRdyList = unWaitTask; 
	mov	ax, word [bp-4]
	mov	word [YKRdyList], ax
	jmp	L_yakc_108
L_yakc_107:
	; >>>>> Line:	560
	; >>>>> readyTask->prev->next = unWaitTask; 
	mov	si, word [bp-6]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
L_yakc_108:
	; >>>>> Line:	562
	; >>>>> unWaitTask->prev = readyTask->prev; 
	mov	si, word [bp-6]
	add	si, 10
	mov	di, word [bp-4]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	563
	; >>>>> unWaitTask->next = readyTask; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	564
	; >>>>> readyTask->prev = unWaitTask; 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	566
	; >>>>> unWaitTask->event = 0; 
	mov	si, word [bp-4]
	add	si, 12
	mov	word [si], 0
	jmp	L_yakc_109
L_yakc_98:
	; >>>>> Line:	569
	; >>>>> unWaitTask = 0; 
	mov	word [bp-4], 0
L_yakc_109:
L_yakc_97:
	; >>>>> Line:	572
	; >>>>> eventTask = taskNext; 
	mov	ax, word [bp-8]
	mov	word [bp-2], ax
L_yakc_95:
L_yakc_93:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_92
L_yakc_94:
	; >>>>> Line:	574
	; >>>>> if(YKISRDepth == 0){ 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_yakc_110
	; >>>>> Line:	575
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_110:
	; >>>>> Line:	577
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_90:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_yakc_91
	ALIGN	2
YKEventReset:
	; >>>>> Line:	580
	; >>>>> void YKEventReset(YKEVENT *event, unsigned eventMask){ 
	jmp	L_yakc_112
L_yakc_113:
	; >>>>> Line:	581
	; >>>>> YKEnterMutex() 
	call	YKEnterMutex
	; >>>>> Line:	582
	; >>>>> event->flag &= ~eventMask; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp+6]
	not	ax
	and	word [si], ax
	; >>>>> Line:	583
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_112:
	push	bp
	mov	bp, sp
	jmp	L_yakc_113
	ALIGN	2
YKCtxSwCount:
	TIMES	2 db 0
YKIdleCount:
	TIMES	2 db 0
YKTickNum:
	TIMES	2 db 0
YKRdyList:
	TIMES	2 db 0
YKDelayList:
	TIMES	2 db 0
YKSemWaitList:
	TIMES	2 db 0
YKAvailTCBList:
	TIMES	2 db 0
YKTCBArray:
	TIMES	180 db 0
idleStack:
	TIMES	512 db 0
YKISRDepth:
	TIMES	2 db 0
YKEVENTArray:
	TIMES	8 db 0
YKQWaitList:
	TIMES	2 db 0
YKEventWaitList:
	TIMES	2 db 0
TKCurrentlyRunning:
	TIMES	2 db 0
;Assemble funtcions

YKEnterMutex:                   ; Disables interrupts
	cli	                          ; clear interrupt flag
	ret


YKExitMutex:                    ; Enables Interrupts
	sti	                          ; set interrupt flag
	ret

YKDispatcherNSave:   		; Dispatcher that saves to mem/stack

  cli

	push bp			; Push the base pointer onto the stack
	mov bp, sp		; set the current base pointer to be the stack pointer

	; Get the sp values to restore and save them to sp
	mov sp, word[bp+4]			; getting first arg (highest priority task sp)

	;mov	al, 0x20
	;out 	0x20, al

	; Pop register values off the stack
	pop ES
	pop DS
	pop DI
	pop SI
	pop BP
	pop DX
	pop CX
	pop BX
	pop AX

	iret

YKDispatcherSave:   		; Dispatcher that saves to mem/stack

  cli

	push bp
	mov bp, sp

	mov AX, [bp+2]

	pop bp
	add sp, 2

	; Push flags, CS, and IP to the stack
	pushf

	; This is something about the flags that Ian told me to do
	;push BX
	;add sp, 2
	;pop BX
	;or BX, 0x200
	;push BX
	;sub sp, 2
	;pop BX

	push CS
	push AX
	;push word[bp+2]

	; Push all register values to the stack
	push AX
	push BX
	push CX
	push DX
	push BP
	push SI
	push DI
	push DS
	push ES

	; Move bp back to its original value
	mov bp, sp
	add bp, 20

	; Store the save sp to si
	mov si, word [bp+4] 			; getting first arg (sp)
	mov word [si], sp

restore_context:

	; Save the sp and ss values to restore to sp and ss
	mov sp, word[bp+6]			; getting second arg

	;mov	al, 0x20
	;out 	0x20, al

	; Pop register values back off the stack
	pop ES
	pop DS
	pop DI
	pop SI
	pop BP
	pop DX
	pop CX
	pop BX
	pop AX
	iret
; Generated by c86 (BYU-NASM) 5.1 (beta) from lab7_app.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_lab7_app_5:
	DB	"CharTask     (C)",0xA,0
L_lab7_app_4:
	DB	"CharTask     (B)",0xA,0
L_lab7_app_3:
	DB	"CharTask     (A)",0xA,0
L_lab7_app_2:
	DB	"Oops! At least one event should be set in return value!",0xA,0
L_lab7_app_1:
	DB	"Started CharTask     (2)",0xA,0
	ALIGN	2
CharTask:
	; >>>>> Line:	26
	; >>>>> { 
	jmp	L_lab7_app_6
L_lab7_app_7:
	; >>>>> Line:	29
	; >>>>> printString("Started CharTask     (2)\n"); 
	mov	ax, L_lab7_app_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	31
	; >>>>> while(1) { 
	jmp	L_lab7_app_9
L_lab7_app_8:
	; >>>>> Line:	32
	; >>>>> events = YKEventPend(charEvent, 
	xor	ax, ax
	push	ax
	mov	ax, 7
	push	ax
	push	word [charEvent]
	call	YKEventPend
	add	sp, 6
	mov	word [bp-2], ax
	; >>>>> Line:	36
	; >>>>> if(events == 0) { 
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_lab7_app_11
	; >>>>> Line:	37
	; >>>>> printString("Oops! At least one event should be set " 
	mov	ax, L_lab7_app_2
	push	ax
	call	printString
	add	sp, 2
L_lab7_app_11:
	; >>>>> Line:	41
	; >>>>> if(events & 0x1) { 
	mov	ax, word [bp-2]
	and	ax, 1
	je	L_lab7_app_12
	; >>>>> Line:	42
	; >>>>> printString("CharTask     (A)\n"); 
	mov	ax, L_lab7_app_3
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	43
	; >>>>> YKEventReset(charEven 
	mov	ax, 1
	push	ax
	push	word [charEvent]
	call	YKEventReset
	add	sp, 4
L_lab7_app_12:
	; >>>>> Line:	46
	; >>>>> if(events & 0x2) { 
	mov	ax, word [bp-2]
	and	ax, 2
	je	L_lab7_app_13
	; >>>>> Line:	47
	; >>>>> printString("CharTask     (B)\n"); 
	mov	ax, L_lab7_app_4
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	48
	; >>>>> YKEventReset(charEvent, 0x2); 
	mov	ax, 2
	push	ax
	push	word [charEvent]
	call	YKEventReset
	add	sp, 4
L_lab7_app_13:
	; >>>>> Line:	51
	; >>>>> if(events & 0x4) { 
	mov	ax, word [bp-2]
	and	ax, 4
	je	L_lab7_app_14
	; >>>>> Line:	52
	; >>>>> printString("CharTask     (C)\n"); 
	mov	ax, L_lab7_app_5
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	53
	; >>>>> YKEventReset(charEvent, 0x4); 
	mov	ax, 4
	push	ax
	push	word [charEvent]
	call	YKEventReset
	add	sp, 4
L_lab7_app_14:
L_lab7_app_9:
	jmp	L_lab7_app_8
L_lab7_app_10:
	mov	sp, bp
	pop	bp
	ret
L_lab7_app_6:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_lab7_app_7
L_lab7_app_18:
	DB	"AllCharsTask (D)",0xA,0
L_lab7_app_17:
	DB	"Oops! Char events weren't reset by CharTask!",0xA,0
L_lab7_app_16:
	DB	"Started AllCharsTask (3)",0xA,0
	ALIGN	2
AllCharsTask:
	; >>>>> Line:	60
	; >>>>> { 
	jmp	L_lab7_app_19
L_lab7_app_20:
	; >>>>> Line:	63
	; >>>>> printString("Started AllCharsTask (3)\n"); 
	mov	ax, L_lab7_app_16
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	65
	; >>>>> while(1) { 
	jmp	L_lab7_app_22
L_lab7_app_21:
	; >>>>> Line:	66
	; >>>>> events = YKEventPend(charEvent, 
	mov	ax, 1
	push	ax
	mov	ax, 7
	push	ax
	push	word [charEvent]
	call	YKEventPend
	add	sp, 6
	mov	word [bp-2], ax
	; >>>>> Line:	71
	; >>>>> if(events != 0) { 
	mov	ax, word [bp-2]
	test	ax, ax
	je	L_lab7_app_24
	; >>>>> Line:	72
	; >>>>> printString("Oops! Char events weren't reset by CharTask!\n"); 
	mov	ax, L_lab7_app_17
	push	ax
	call	printString
	add	sp, 2
L_lab7_app_24:
	; >>>>> Line:	75
	; >>>>> printString("AllCharsTask (D)\n"); 
	mov	ax, L_lab7_app_18
	push	ax
	call	printString
	add	sp, 2
L_lab7_app_22:
	jmp	L_lab7_app_21
L_lab7_app_23:
	mov	sp, bp
	pop	bp
	ret
L_lab7_app_19:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_lab7_app_20
L_lab7_app_28:
	DB	"AllNumsTask  (123)",0xA,0
L_lab7_app_27:
	DB	"Oops! All events should be set in return value!",0xA,0
L_lab7_app_26:
	DB	"Started AllNumsTask  (1)",0xA,0
	ALIGN	2
AllNumsTask:
	; >>>>> Line:	81
	; >>>>> { 
	jmp	L_lab7_app_29
L_lab7_app_30:
	; >>>>> Line:	84
	; >>>>> printString("Started AllNumsTask  (1)\n"); 
	mov	ax, L_lab7_app_26
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	86
	; >>>>> while(1) { 
	jmp	L_lab7_app_32
L_lab7_app_31:
	; >>>>> Line:	87
	; >>>>> events = YKEventPend(numEvent, 
	mov	ax, 1
	push	ax
	mov	ax, 7
	push	ax
	push	word [numEvent]
	call	YKEventPend
	add	sp, 6
	mov	word [bp-2], ax
	; >>>>> Line:	91
	; >>>>> if(events != (0x1 | 0x2 | 0x4)) { 
	cmp	word [bp-2], 7
	je	L_lab7_app_34
	; >>>>> Line:	92
	; >>>>> printString("Oops! All events should be set in return value!\ 
	mov	ax, L_lab7_app_27
	push	ax
	call	printString
	add	sp, 2
L_lab7_app_34:
	; >>>>> Line:	95
	; >>>>> printString("AllNumsTask  (123)\n"); 
	mov	ax, L_lab7_app_28
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	97
	; >>>>> YKEventReset(numEvent, 0x1 | 0x2 | 0x4); 
	mov	ax, 7
	push	ax
	push	word [numEvent]
	call	YKEventReset
	add	sp, 4
L_lab7_app_32:
	jmp	L_lab7_app_31
L_lab7_app_33:
	mov	sp, bp
	pop	bp
	ret
L_lab7_app_29:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_lab7_app_30
L_lab7_app_40:
	DB	"% >>>>>",0xD,0xA,0
L_lab7_app_39:
	DB	", CPU usage: ",0
L_lab7_app_38:
	DB	"<<<<< Context switches: ",0
L_lab7_app_37:
	DB	"Determining CPU capacity",0xD,0xA,0
L_lab7_app_36:
	DB	"Welcome to the YAK kernel",0xD,0xA,0
	ALIGN	2
STask:
	; >>>>> Line:	103
	; >>>>> { 
	jmp	L_lab7_app_41
L_lab7_app_42:
	; >>>>> Line:	107
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	108
	; >>>>> printString("Welcome to the YAK kernel\r\n"); 
	mov	ax, L_lab7_app_36
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	109
	; >>>>> printString("Determining CPU capacity\r\n"); 
	mov	ax, L_lab7_app_37
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	110
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	111
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	112
	; >>>>> YKDelayTask(5); 
	mov	ax, 5
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	113
	; >>>>> max = YKIdleCount / 25; 
	mov	ax, word [YKIdleCount]
	xor	dx, dx
	mov	cx, 25
	div	cx
	mov	word [bp-2], ax
	; >>>>> Line:	114
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	116
	; >>>>> YKNewTask(CharTask, (void *) &CharTaskStk[512], 2); 
	mov	al, 2
	push	ax
	mov	ax, (CharTaskStk+1024)
	push	ax
	mov	ax, CharTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	117
	; >>>>> YKNewTask(AllNumsTask, (vo 
	mov	al, 1
	push	ax
	mov	ax, (AllNumsTaskStk+1024)
	push	ax
	mov	ax, AllNumsTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	118
	; >>>>> YKNewTask(AllCharsTask, (void *) &AllCharsTaskStk[512], 3); 
	mov	al, 3
	push	ax
	mov	ax, (AllCharsTaskStk+1024)
	push	ax
	mov	ax, AllCharsTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	120
	; >>>>> while (1) 
	jmp	L_lab7_app_44
L_lab7_app_43:
	; >>>>> Line:	122
	; >>>>> YKDelayTask(20); 
	mov	ax, 20
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	124
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	125
	; >>>>> switchCount = YKCtxSwCount; 
	mov	ax, word [YKCtxSwCount]
	mov	word [bp-4], ax
	; >>>>> Line:	126
	; >>>>> idleCount = YKIdleCount; 
	mov	ax, word [YKIdleCount]
	mov	word [bp-6], ax
	; >>>>> Line:	127
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	129
	; >>>>> printString("<<<<< Context switches: "); 
	mov	ax, L_lab7_app_38
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	130
	; >>>>> printInt((int)switchCount); 
	push	word [bp-4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	131
	; >>>>> printString(", CPU usage: "); 
	mov	ax, L_lab7_app_39
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	132
	; >>>>> tmp = (int) (idleCount/max); 
	mov	ax, word [bp-6]
	xor	dx, dx
	div	word [bp-2]
	mov	word [bp-8], ax
	; >>>>> Line:	133
	; >>>>> printInt(100-tmp); 
	mov	ax, 100
	sub	ax, word [bp-8]
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	134
	; >>>>> printString("% >>>>>\r\n"); 
	mov	ax, L_lab7_app_40
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	136
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	137
	; >>>>>  
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	138
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	139
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_lab7_app_44:
	jmp	L_lab7_app_43
L_lab7_app_45:
	mov	sp, bp
	pop	bp
	ret
L_lab7_app_41:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_lab7_app_42
	ALIGN	2
main:
	; >>>>> Line:	145
	; >>>>> { 
	jmp	L_lab7_app_47
L_lab7_app_48:
	; >>>>> Line:	146
	; >>>>> YKInitialize(); 
	call	YKInitialize
	; >>>>> Line:	148
	; >>>>> charEvent = YKEventCreate(0); 
	xor	ax, ax
	push	ax
	call	YKEventCreate
	add	sp, 2
	mov	word [charEvent], ax
	; >>>>> Line:	149
	; >>>>> numEvent = YKEventCreate(0); 
	xor	ax, ax
	push	ax
	call	YKEventCreate
	add	sp, 2
	mov	word [numEvent], ax
	; >>>>> Line:	150
	; >>>>> YKNewTask(STask, (void *) &STaskStk[512], 0); 
	xor	al, al
	push	ax
	mov	ax, (STaskStk+1024)
	push	ax
	mov	ax, STask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	152
	; >>>>> YKRun(); 
	call	YKRun
	mov	sp, bp
	pop	bp
	ret
L_lab7_app_47:
	push	bp
	mov	bp, sp
	jmp	L_lab7_app_48
	ALIGN	2
charEvent:
	TIMES	2 db 0
numEvent:
	TIMES	2 db 0
CharTaskStk:
	TIMES	1024 db 0
AllCharsTaskStk:
	TIMES	1024 db 0
AllNumsTaskStk:
	TIMES	1024 db 0
STaskStk:
	TIMES	1024 db 0
