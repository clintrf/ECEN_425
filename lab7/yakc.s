; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
run_flag:
	DB	0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	29
	; >>>>> void YKInitialize(void){ 
	jmp	L_yakc_1
L_yakc_2:
	; >>>>> Line:	31
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	32
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	33
	; >>>>> TKCurrentlyRunning = 0; 
	mov	word [TKCurrentlyRunning], 0
	; >>>>> Line:	34
	; >>>>> YKISRDepth = 0; 
	mov	word [YKISRDepth], 0
	; >>>>> Line:	35
	; >>>>> YKTickNum = 0; 
	mov	word [YKTickNum], 0
	; >>>>> Line:	37
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	39
	; >>>>> YKAvailTCBList = &(YKTCBArray[0]); 
	mov	word [YKAvailTCBList], YKTCBArray
	; >>>>> Line:	41
	; >>>>> for (i = 0; i < 9; i++){ 
	mov	word [bp-2], 0
	jmp	L_yakc_4
L_yakc_3:
	; >>>>> Line:	42
	; >>>>> YKTCBArray[i].next = &(YKTCBArray[i+1]); 
	mov	ax, word [bp-2]
	inc	ax
	mov	cx, 18
	imul	cx
	add	ax, YKTCBArray
	push	ax
	mov	ax, word [bp-2]
	mov	cx, 18
	imul	cx
	mov	dx, ax
	add	dx, YKTCBArray
	mov	si, dx
	add	si, 8
	pop	ax
	mov	word [si], ax
L_yakc_6:
	inc	word [bp-2]
L_yakc_4:
	cmp	word [bp-2], 9
	jl	L_yakc_3
L_yakc_5:
	; >>>>> Line:	44
	; >>>>> YKTCBArray[9].next = 0; 
	mov	word [(170+YKTCBArray)], 0
	; >>>>> Line:	67
	; >>>>> YKNewTask(YKIdleTask, (void*)&idleStack[256], 100); 
	mov	al, 100
	push	ax
	mov	ax, (idleStack+512)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	sp, bp
	pop	bp
	ret
L_yakc_1:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_2
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	70
	; >>>>> void YKIdleTask(void){ 
	jmp	L_yakc_8
L_yakc_9:
	; >>>>> Line:	71
	; >>>>> while(1) 
	jmp	L_yakc_11
L_yakc_10:
	; >>>>> Line:	72
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	73
	; >>>>> YKIdleCount=YKIdleCount+1; 
	mov	ax, word [YKIdleCount]
	inc	ax
	mov	word [YKIdleCount], ax
	; >>>>> Line:	74
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_11:
	jmp	L_yakc_10
L_yakc_12:
	mov	sp, bp
	pop	bp
	ret
L_yakc_8:
	push	bp
	mov	bp, sp
	jmp	L_yakc_9
	ALIGN	2
YKNewTask:
	; >>>>> Line:	78
	; >>>>> void YKNewTask( void (*task)(void), void *taskStack, unsigned char priority){ 
	jmp	L_yakc_14
L_yakc_15:
	; >>>>> Line:	82
	; >>>>> taskStack = ((int *)taskStack) - 1; 
	mov	ax, word [bp+6]
	sub	ax, 2
	mov	word [bp+6], ax
	; >>>>> Line:	85
	; >>>>> tmp = YKAvailTCBList; 
	mov	ax, word [YKAvailTCBList]
	mov	word [bp-2], ax
	; >>>>> Line:	86
	; >>>>> YKAvailTCBList = tmp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKAvailTCBList], ax
	; >>>>> Line:	88
	; >>>>> tmp->priority = priority; 
	mov	al, byte [bp+8]
	xor	ah, ah
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], ax
	; >>>>> Line:	89
	; >>>>> tmp->delay = 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	91
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	93
	; >>>>> if (YKRdyList == 0){ 
	mov	ax, word [YKRdyList]
	test	ax, ax
	jne	L_yakc_16
	; >>>>> Line:	94
	; >>>>> YKRdyList = tmp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	; >>>>> Line:	95
	; >>>>> tmp->next = 0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	96
	; >>>>> tmp->prev = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	jmp	L_yakc_17
L_yakc_16:
	; >>>>> Line:	99
	; >>>>> tmp2 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	100
	; >>>>> while (tmp2->priority < tmp->priority){ 
	jmp	L_yakc_19
L_yakc_18:
	; >>>>> Line:	101
	; >>>>> +i) 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_19:
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_18
L_yakc_20:
	; >>>>> Line:	103
	; >>>>> if (tmp2->prev == 0){ 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_21
	; >>>>> Line:	104
	; >>>>> YKRdyList = tmp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_22
L_yakc_21:
	; >>>>> Line:	107
	; >>>>> tmp2->prev->next = tmp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_22:
	; >>>>> Line:	109
	; >>>>> tmp->prev = tmp2->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	110
	; >>>>> tmp->next = tmp2; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	111
	; >>>>> tmp2->prev = tmp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_17:
	; >>>>> Line:	115
	; >>>>> tmp->stackptr = taskStack; 
	mov	si, word [bp-2]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	118
	; >>>>> tmp->stackptr = tmp->stackptr - 11; 
	mov	si, word [bp-2]
	mov	ax, word [si]
	sub	ax, 22
	mov	word [si], ax
	; >>>>> Line:	119
	; >>>>> for(i=11; i>=0;i--){ 
	mov	word [bp-6], 11
	jmp	L_yakc_24
L_yakc_23:
	; >>>>> Line:	120
	; >>>>> if(i == 11){ 
	cmp	word [bp-6], 11
	jne	L_yakc_27
	; >>>>> Line:	121
	; >>>>> *(tmp->stackptr+i) = 0x200; 
	mov	ax, word [bp-6]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp-2]
	add	si, word [di]
	mov	word [si], 512
	jmp	L_yakc_28
L_yakc_27:
	; >>>>> Line:	123
	; >>>>> else if(i == 10){ 
	cmp	word [bp-6], 10
	jne	L_yakc_29
	; >>>>> Line:	124
	; >>>>> *(tmp->stackptr+i) = 0; 
	mov	ax, word [bp-6]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp-2]
	add	si, word [di]
	mov	word [si], 0
	jmp	L_yakc_30
L_yakc_29:
	; >>>>> Line:	126
	; >>>>> else if(i == 9){ 
	cmp	word [bp-6], 9
	jne	L_yakc_31
	; >>>>> Line:	127
	; >>>>> *(tmp->stackptr+i) = (int)task; 
	mov	ax, word [bp-6]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp-2]
	add	si, word [di]
	mov	ax, word [bp+4]
	mov	word [si], ax
	jmp	L_yakc_32
L_yakc_31:
	; >>>>> Line:	130
	; >>>>> *(tmp->stackptr+i) 
	mov	ax, word [bp-6]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp-2]
	add	si, word [di]
	mov	word [si], 0
L_yakc_32:
L_yakc_30:
L_yakc_28:
L_yakc_26:
	dec	word [bp-6]
L_yakc_24:
	cmp	word [bp-6], 0
	jge	L_yakc_23
L_yakc_25:
	; >>>>> Line:	135
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_14:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_15
L_yakc_34:
	DB	"Start Run and call scheduler",0xA,0
	ALIGN	2
YKRun:
	; >>>>> Line:	138
	; >>>>> void YKRun(void){ 
	jmp	L_yakc_35
L_yakc_36:
	; >>>>> Line:	139
	; >>>>> printString("Start Run and call scheduler\n"); 
	mov	ax, L_yakc_34
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	140
	; >>>>> run_flag = 1; 
	mov	byte [run_flag], 1
	; >>>>> Line:	141
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_35:
	push	bp
	mov	bp, sp
	jmp	L_yakc_36
	ALIGN	2
YKScheduler:
	; >>>>> Line:	144
	; >>>>> void YKScheduler(int save_flag){ 
	jmp	L_yakc_38
L_yakc_39:
	; >>>>> Line:	148
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	150
	; >>>>> highest_priority_task = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	151
	; >>>>> currentlyRunning = TKCurrentlyRunning; 
	mov	ax, word [TKCurrentlyRunning]
	mov	word [bp-4], ax
	; >>>>> Line:	153
	; >>>>> if(!run_flag || (TKCurrentlyRunning == highest_priority_task)){ 
	mov	al, byte [run_flag]
	test	al, al
	je	L_yakc_41
	mov	ax, word [bp-2]
	cmp	ax, word [TKCurrentlyRunning]
	jne	L_yakc_40
L_yakc_41:
	; >>>>> Line:	154
	; >>>>> return; 
	jmp	L_yakc_42
L_yakc_40:
	; >>>>> Line:	157
	; >>>>> YKCtxSwCount = YKCtxSwCount + 1; 
	mov	ax, word [YKCtxSwCount]
	inc	ax
	mov	word [YKCtxSwCount], ax
	; >>>>> Line:	158
	; >>>>> TKCurrentlyRunning = highest_priority_task; 
	mov	ax, word [bp-2]
	mov	word [TKCurrentlyRunning], ax
	; >>>>> Line:	159
	; >>>>> if(!save_fla 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_43
	; >>>>> Line:	160
	; >>>>> YKDispatcherNSave(highest_priority_task->stackptr); 
	mov	si, word [bp-2]
	push	word [si]
	call	YKDispatcherNSave
	add	sp, 2
	jmp	L_yakc_44
L_yakc_43:
	; >>>>> Line:	163
	; >>>>> YKDispatcherSave(&(currentlyRunning->stackptr), highest_priority_task->stackptr); 
	mov	si, word [bp-2]
	push	word [si]
	push	word [bp-4]
	call	YKDispatcherSave
	add	sp, 4
L_yakc_44:
L_yakc_42:
	mov	sp, bp
	pop	bp
	ret
L_yakc_38:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_39
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	167
	; >>>>> void YKDelayTask(unsigned count){ 
	jmp	L_yakc_46
L_yakc_47:
	; >>>>> Line:	169
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	171
	; >>>>> if(count == 0){ 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_48
	; >>>>> Line:	172
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	173
	; >>>>> return; 
	jmp	L_yakc_49
L_yakc_48:
	; >>>>> Line:	176
	; >>>>> ready = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	177
	; >>>>> YKRdyList = ready->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	178
	; >>>>> ready->next->prev = 0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	180
	; >>>>> ready->next = YKDelayList; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [YKDelayList]
	mov	word [si], ax
	; >>>>> Line:	181
	; >>>>> YKDelayList = ready; 
	mov	ax, word [bp-2]
	mov	word [YKDelayList], ax
	; >>>>> Line:	182
	; >>>>> ready->prev = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	183
	; >>>>> if(ready->next != 0){ 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_50
	; >>>>> Line:	184
	; >>>>> ready->next->prev=ready; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_50:
	; >>>>> Line:	186
	; >>>>> ready->delay = count 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	187
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	188
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_49:
	mov	sp, bp
	pop	bp
	ret
L_yakc_46:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_47
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	192
	; >>>>> void YKEnterISR(void){ 
	jmp	L_yakc_52
L_yakc_53:
	; >>>>> Line:	193
	; >>>>> YKISRDepth = YKISRDepth + 1; 
	mov	ax, word [YKISRDepth]
	inc	ax
	mov	word [YKISRDepth], ax
	mov	sp, bp
	pop	bp
	ret
L_yakc_52:
	push	bp
	mov	bp, sp
	jmp	L_yakc_53
	ALIGN	2
YKExitISR:
	; >>>>> Line:	196
	; >>>>> void YKExitISR(void){ 
	jmp	L_yakc_55
L_yakc_56:
	; >>>>> Line:	197
	; >>>>> YKISRDepth = YKISRDepth - 1; 
	mov	ax, word [YKISRDepth]
	dec	ax
	mov	word [YKISRDepth], ax
	; >>>>> Line:	198
	; >>>>> if(YKISRDepth == 0) { 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_yakc_57
	; >>>>> Line:	199
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_57:
	mov	sp, bp
	pop	bp
	ret
L_yakc_55:
	push	bp
	mov	bp, sp
	jmp	L_yakc_56
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	203
	; >>>>> void YKTickHandler(void){ 
	jmp	L_yakc_59
L_yakc_60:
	; >>>>> Line:	205
	; >>>>> tempDelay = YKDelayList; 
	mov	ax, word [YKDelayList]
	mov	word [bp-2], ax
	; >>>>> Line:	206
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	208
	; >>>>> YKTickNum = YKTickNum + 1; 
	mov	ax, word [YKTickNum]
	inc	ax
	mov	word [YKTickNum], ax
	; >>>>> Line:	210
	; >>>>> while(tempDelay != 0){ 
	jmp	L_yakc_62
L_yakc_61:
	; >>>>> Line:	211
	; >>>>> tempNext = tempDelay->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	212
	; >>>>> tempDelay->delay = tempDelay->delay - 1; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	dec	ax
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], ax
	; >>>>> Line:	213
	; >>>>> if(tempDelay->delay <= 0){ 
	mov	si, word [bp-2]
	add	si, 6
	cmp	word [si], 0
	jg	L_yakc_64
	; >>>>> Line:	214
	; >>>>> if(tempDelay->prev == 0){ 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_65
	; >>>>> Line:	215
	; >>>>>  
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKDelayList], ax
	jmp	L_yakc_66
L_yakc_65:
	; >>>>> Line:	218
	; >>>>> tempDelay->prev->next = tempDelay->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp-2]
	add	di, 10
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_66:
	; >>>>> Line:	220
	; >>>>> if(tempDelay->next != 0){ 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_67
	; >>>>> Line:	221
	; >>>>> tempDelay->next->prev = tempDelay->prev; 
	mov	si, word [bp-2]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 8
	mov	di, word [di]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_67:
	; >>>>> Line:	224
	; >>>>> tempReady = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	225
	; >>>>> while(tempReady->priority < tempDelay->priority){ 
	jmp	L_yakc_69
L_yakc_68:
	; >>>>> Line:	226
	; >>>>> tempReady = tempReady->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_69:
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_68
L_yakc_70:
	; >>>>> Line:	228
	; >>>>> if(tempReady->prev == 0){ 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_71
	; >>>>> Line:	229
	; >>>>> YKRdyList = tempDelay; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_72
L_yakc_71:
	; >>>>> Line:	232
	; >>>>> tempReady->prev->next = tempDelay; 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_72:
	; >>>>> Line:	235
	; >>>>> tempDelay->prev = tempReady->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	236
	; >>>>> &  
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	237
	; >>>>> tempReady->prev = tempDelay; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_64:
	; >>>>> Line:	239
	; >>>>> tempDelay = tempNext; 
	mov	ax, word [bp-6]
	mov	word [bp-2], ax
L_yakc_62:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_61
L_yakc_63:
	; >>>>> Line:	241
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_59:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_60
	ALIGN	2
YKEventCreate:
	; >>>>> Line:	484
	; >>>>> YKEVENT *YKEventCreate(unsigned initialValue){ 
	jmp	L_yakc_74
L_yakc_75:
	; >>>>> Line:	486
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	487
	; >>>>> for (i = 0; YKEVENTArray[i].active; i++){}; 
	mov	word [bp-2], 0
	jmp	L_yakc_77
L_yakc_76:
L_yakc_79:
	; >>>>> Line:	487
	; >>>>> for (i = 0; YKEVENTArray[i].active; i++){}; 
	inc	word [bp-2]
L_yakc_77:
	mov	ax, word [bp-2]
	shl	ax, 1
	shl	ax, 1
	mov	si, ax
	add	si, YKEVENTArray
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_76
L_yakc_78:
	; >>>>> Line:	489
	; >>>>> YKEVENTArray[i].active = 1; 
	mov	ax, word [bp-2]
	shl	ax, 1
	shl	ax, 1
	mov	si, ax
	add	si, YKEVENTArray
	mov	word [si], 1
	; >>>>> Line:	490
	; >>>>> YKEVENTArray[i].flag = initialValue; 
	mov	ax, word [bp-2]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKEVENTArray
	mov	si, ax
	add	si, 2
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	492
	; >>>>> return &(YKEVENTArray[i]); 
	mov	ax, word [bp-2]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKEVENTArray
L_yakc_80:
	mov	sp, bp
	pop	bp
	ret
L_yakc_74:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_75
	ALIGN	2
YKEventPend:
	; >>>>> Line:	495
	; >>>>> unsigned YKEventPend(YKEVENT *event, unsigned eventMask, int waitMode){ 
	jmp	L_yakc_82
L_yakc_83:
	; >>>>> Line:	498
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	500
	; >>>>> if(((waitMode == 0) && ((eventMask &  
	mov	ax, word [bp+8]
	test	ax, ax
	jne	L_yakc_86
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	and	ax, word [bp+6]
	jne	L_yakc_85
L_yakc_86:
	cmp	word [bp+8], 1
	jne	L_yakc_84
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	and	ax, word [bp+6]
	mov	dx, word [bp+6]
	cmp	dx, ax
	jne	L_yakc_84
L_yakc_85:
	; >>>>> Line:	502
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	503
	; >>>>> return event->flag; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	jmp	L_yakc_87
L_yakc_84:
	; >>>>> Line:	506
	; >>>>> readyTask = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	507
	; >>>>> YKRdyList = readyTask->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	508
	; >>>>> readyTask->next->prev = 0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	509
	; >>>>> readyTask->next = YKEventWaitList; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [YKEventWaitList]
	mov	word [si], ax
	; >>>>> Line:	510
	; >>>>> YKEventWaitList = readyTask; 
	mov	ax, word [bp-2]
	mov	word [YKEventWaitList], ax
	; >>>>> Line:	511
	; >>>>> readyTask->prev = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	513
	; >>>>> if(readyTask->next != 0){ 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_88
	; >>>>> Line:	514
	; >>>>> readyTask->next->prev = readyTask; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_88:
	; >>>>> Line:	517
	; >>>>> readyTask->event = event; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	518
	; >>>>> readyTask->eventMask = eventMask; 
	mov	si, word [bp-2]
	add	si, 14
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	519
	; >>>>> readyTask->waitMode = waitMode; 
	mov	si, word [bp-2]
	add	si, 16
	mov	ax, word [bp+8]
	mov	word [si], ax
	; >>>>> Line:	521
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	522
	; >>>>> ntTa 
	call	YKExitMutex
	; >>>>> Line:	524
	; >>>>> return event->flag; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
L_yakc_87:
	mov	sp, bp
	pop	bp
	ret
L_yakc_82:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_83
	ALIGN	2
YKEventSet:
	; >>>>> Line:	527
	; >>>>> void YKEventSet(YKEVENT *event, unsigned eventMask){ 
	jmp	L_yakc_90
L_yakc_91:
	; >>>>> Line:	529
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	530
	; >>>>> event->flag |= eventMask; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp+6]
	or	word [si], ax
	; >>>>> Line:	532
	; >>>>> for(eventTask = YKEventWaitList; eventTask != 0; ){ 
	mov	ax, word [YKEventWaitList]
	mov	word [bp-2], ax
	jmp	L_yakc_93
L_yakc_92:
	; >>>>> Line:	533
	; >>>>> taskNext=eventTask->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	534
	; >>>>> if(eventTask->event != event){ 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [bp+4]
	cmp	ax, word [si]
	je	L_yakc_96
	; >>>>> Line:	535
	; >>>>> eventTask = taskNext; 
	mov	ax, word [bp-8]
	mov	word [bp-2], ax
	; >>>>> Line:	536
	; >>>>> continue; 
	jmp	L_yakc_95
	jmp	L_yakc_97
L_yakc_96:
	; >>>>> Line:	539
	; >>>>> if( ((eventTask->waitMode == 0) && ((eventTask->eventMask & event->flag ) > 0 )) || 
	mov	si, word [bp-2]
	add	si, 16
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_100
	mov	si, word [bp-2]
	add	si, 14
	mov	ax, word [si]
	mov	si, word [bp+4]
	add	si, 2
	and	ax, word [si]
	jne	L_yakc_99
L_yakc_100:
	mov	si, word [bp-2]
	add	si, 16
	cmp	word [si], 1
	jne	L_yakc_98
	mov	si, word [bp-2]
	add	si, 14
	mov	ax, word [si]
	mov	si, word [bp+4]
	add	si, 2
	and	ax, word [si]
	mov	si, word [bp-2]
	add	si, 14
	mov	dx, word [si]
	cmp	dx, ax
	jne	L_yakc_98
L_yakc_99:
	; >>>>> Line:	541
	; >>>>> unWaitTask = eventTask; 
	mov	ax, word [bp-2]
	mov	word [bp-4], ax
	; >>>>> Line:	543
	; >>>>> if(unWaitTask->prev == 0){ 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_101
	; >>>>> Line:	544
	; >>>>> YKEventWaitList = unWaitTask->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKEventWaitList], ax
	jmp	L_yakc_102
L_yakc_101:
	; >>>>> Line:	547
	; >>>>> unWaitTask->prev->next = unWaitTask->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	di, word [bp-4]
	add	di, 10
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_102:
	; >>>>> Line:	549
	; >>>>> if (unWaitTask->next != 0){ 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_103
	; >>>>> Line:	550
	; >>>>> unWaitTask->next->prev = unWaitTask->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-4]
	add	di, 8
	mov	di, word [di]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_103:
	; >>>>> Line:	552
	; >>>>> readyTask = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-6], ax
	; >>>>> Line:	553
	; >>>>> while (readyTask->priority < unWaitTask->priority){ 
	jmp	L_yakc_105
L_yakc_104:
	; >>>>> Line:	554
	; >>>>> readyTask = readyTask->next; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_105:
	mov	si, word [bp-6]
	add	si, 4
	mov	di, word [bp-4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_104
L_yakc_106:
	; >>>>> Line:	556
	; >>>>> if(rea 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_107
	; >>>>> Line:	557
	; >>>>> YKRdyList = unWaitTask; 
	mov	ax, word [bp-4]
	mov	word [YKRdyList], ax
	jmp	L_yakc_108
L_yakc_107:
	; >>>>> Line:	560
	; >>>>> readyTask->prev->next = unWaitTask; 
	mov	si, word [bp-6]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
L_yakc_108:
	; >>>>> Line:	562
	; >>>>> unWaitTask->prev = readyTask->prev; 
	mov	si, word [bp-6]
	add	si, 10
	mov	di, word [bp-4]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	563
	; >>>>> unWaitTask->next = readyTask; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	564
	; >>>>> readyTask->prev = unWaitTask; 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	566
	; >>>>> unWaitTask->event = 0; 
	mov	si, word [bp-4]
	add	si, 12
	mov	word [si], 0
	jmp	L_yakc_109
L_yakc_98:
	; >>>>> Line:	569
	; >>>>> unWaitTask = 0; 
	mov	word [bp-4], 0
L_yakc_109:
L_yakc_97:
	; >>>>> Line:	572
	; >>>>> eventTask = taskNext; 
	mov	ax, word [bp-8]
	mov	word [bp-2], ax
L_yakc_95:
L_yakc_93:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_92
L_yakc_94:
	; >>>>> Line:	574
	; >>>>> if(YKISRDepth == 0){ 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_yakc_110
	; >>>>> Line:	575
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_110:
	; >>>>> Line:	577
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_90:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_yakc_91
	ALIGN	2
YKEventReset:
	; >>>>> Line:	580
	; >>>>> void YKEventReset(YKEVENT *event, unsigned eventMask){ 
	jmp	L_yakc_112
L_yakc_113:
	; >>>>> Line:	581
	; >>>>> YKEnterMutex() 
	call	YKEnterMutex
	; >>>>> Line:	582
	; >>>>> event->flag &= ~eventMask; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp+6]
	not	ax
	and	word [si], ax
	; >>>>> Line:	583
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_112:
	push	bp
	mov	bp, sp
	jmp	L_yakc_113
	ALIGN	2
YKCtxSwCount:
	TIMES	2 db 0
YKIdleCount:
	TIMES	2 db 0
YKTickNum:
	TIMES	2 db 0
YKRdyList:
	TIMES	2 db 0
YKDelayList:
	TIMES	2 db 0
YKSemWaitList:
	TIMES	2 db 0
YKAvailTCBList:
	TIMES	2 db 0
YKTCBArray:
	TIMES	180 db 0
idleStack:
	TIMES	512 db 0
YKISRDepth:
	TIMES	2 db 0
YKEVENTArray:
	TIMES	8 db 0
YKQWaitList:
	TIMES	2 db 0
YKEventWaitList:
	TIMES	2 db 0
TKCurrentlyRunning:
	TIMES	2 db 0
