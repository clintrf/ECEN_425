; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
run_flag:
	DB	0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	29
	; >>>>> void YKInitialize(void){ 
	jmp	L_yakc_1
L_yakc_2:
	; >>>>> Line:	31
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	32
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	33
	; >>>>> TKCurrentlyRunning = 0; 
	mov	word [TKCurrentlyRunning], 0
	; >>>>> Line:	34
	; >>>>> YKISRDepth = 0; 
	mov	word [YKISRDepth], 0
	; >>>>> Line:	36
	; >>>>> YKTickNum = 0; 
	mov	word [YKTickNum], 0
	; >>>>> Line:	38
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	41
	; >>>>> YKAvailTCBList = &(YKTCBArray[0]); 
	mov	word [YKAvailTCBList], YKTCBArray
	; >>>>> Line:	43
	; >>>>> for (i = 0; i < 9; i++) 
	mov	word [bp-2], 0
	jmp	L_yakc_4
L_yakc_3:
	; >>>>> Line:	44
	; >>>>> YKTCBArray[i].next = &(YKTCBArray[i+1]); 
	mov	ax, word [bp-2]
	inc	ax
	mov	cx, 4
	shl	ax, cl
	add	ax, YKTCBArray
	mov	dx, word [bp-2]
	mov	cx, 4
	shl	dx, cl
	add	dx, YKTCBArray
	mov	si, dx
	add	si, 8
	mov	word [si], ax
L_yakc_6:
	inc	word [bp-2]
L_yakc_4:
	cmp	word [bp-2], 9
	jl	L_yakc_3
L_yakc_5:
	; >>>>> Line:	45
	; >>>>> YKTCBArray[9].next = 0; 
	mov	word [(152+YKTCBArray)], 0
	; >>>>> Line:	47
	; >>>>> for (i = 0; i < 19; i++){ 
	mov	word [bp-2], 0
	jmp	L_yakc_8
L_yakc_7:
	; >>>>> Line:	48
	; >>>>> YKSemArray[i].val = -10; 
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	mov	si, ax
	add	si, YKSemArray
	mov	word [si], -10
	; >>>>> Line:	49
	; >>>>> YKSemArray[i].active = 0; 
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, YKSemArray
	mov	si, ax
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	50
	; >>>>> YKSemArray[i].id = i; 
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, YKSemArray
	mov	si, ax
	add	si, 4
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_10:
	inc	word [bp-2]
L_yakc_8:
	cmp	word [bp-2], 19
	jl	L_yakc_7
L_yakc_9:
	; >>>>> Line:	53
	; >>>>> for (i = 0; i < 2; i++){ 
	mov	word [bp-2], 0
	jmp	L_yakc_12
L_yakc_11:
	; >>>>> Line:	54
	; >>>>> YKQueueArray[i].size = 0; 
	mov	ax, word [bp-2]
	mov	cx, 10
	imul	cx
	mov	si, ax
	add	si, YKQueueArray
	mov	word [si], 0
	; >>>>> Line:	55
	; >>>>> YKQueueArray[i].length = 0; 
	mov	ax, word [bp-2]
	mov	cx, 10
	imul	cx
	add	ax, YKQueueArray
	mov	si, ax
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	56
	; >>>>> YKQueueArray[i].base_addr = 0; 
	mov	ax, word [bp-2]
	mov	cx, 10
	imul	cx
	add	ax, YKQueueArray
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	57
	; >>>>> YKQueueArray[i].head = 0; 
	mov	ax, word [bp-2]
	mov	cx, 10
	imul	cx
	add	ax, YKQueueArray
	mov	si, ax
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	58
	; >>>>> YKQueueArray[i].tail = 0; 
	mov	ax, word [bp-2]
	mov	cx, 10
	imul	cx
	add	ax, YKQueueArray
	mov	si, ax
	add	si, 8
	mov	word [si], 0
L_yakc_14:
	inc	word [bp-2]
L_yakc_12:
	cmp	word [bp-2], 2
	jl	L_yakc_11
L_yakc_13:
	; >>>>> Line:	62
	; >>>>> YKNewTask(YKIdleTask, (void*)&idleStack[256], 100); 
	mov	al, 100
	push	ax
	mov	ax, (idleStack+512)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	63
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_1:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_2
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	66
	; >>>>> void YKIdleTask(void){ 
	jmp	L_yakc_16
L_yakc_17:
	; >>>>> Line:	67
	; >>>>> while(1){ 
	jmp	L_yakc_19
L_yakc_18:
	; >>>>> Line:	68
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	69
	; >>>>> YKIdleCount=YKIdleCount+1; 
	mov	ax, word [YKIdleCount]
	inc	ax
	mov	word [YKIdleCount], ax
	; >>>>> Line:	70
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_19:
	jmp	L_yakc_18
L_yakc_20:
	mov	sp, bp
	pop	bp
	ret
L_yakc_16:
	push	bp
	mov	bp, sp
	jmp	L_yakc_17
	ALIGN	2
YKNewTask:
	; >>>>> Line:	74
	; >>>>> tmp; 
	jmp	L_yakc_22
L_yakc_23:
	; >>>>> Line:	78
	; >>>>> taskStack = ((int *)taskStack) - 1; 
	mov	ax, word [bp+6]
	sub	ax, 2
	mov	word [bp+6], ax
	; >>>>> Line:	81
	; >>>>> tmp = YKAvailTCBList; 
	mov	ax, word [YKAvailTCBList]
	mov	word [bp-2], ax
	; >>>>> Line:	82
	; >>>>> YKAvailTCBList = tmp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKAvailTCBList], ax
	; >>>>> Line:	85
	; >>>>> tmp->priority = priority; 
	mov	al, byte [bp+8]
	xor	ah, ah
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], ax
	; >>>>> Line:	86
	; >>>>> tmp->delay = 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	88
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	91
	; >>>>> if (YKRdyList == 0){ 
	mov	ax, word [YKRdyList]
	test	ax, ax
	jne	L_yakc_24
	; >>>>> Line:	92
	; >>>>> YKRdyList = tmp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	; >>>>> Line:	93
	; >>>>> tmp->next = 0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	94
	; >>>>> tmp->prev = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	jmp	L_yakc_25
L_yakc_24:
	; >>>>> Line:	97
	; >>>>> tmp2 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	98
	; >>>>> while (tmp2->priority < tmp->priority){ 
	jmp	L_yakc_27
L_yakc_26:
	; >>>>> Line:	99
	; >>>>> tmp2 = tmp2->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_27:
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_26
L_yakc_28:
	; >>>>> Line:	101
	; >>>>> if (tmp2->prev == 0) 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_29
	; >>>>> Line:	102
	; >>>>> YKRdyList = tmp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_30
L_yakc_29:
	; >>>>> Line:	104
	; >>>>> tmp2->prev->next = tmp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_30:
	; >>>>> Line:	105
	; >>>>> tmp->prev = tmp2->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	106
	; >>>>> tmp->n 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	107
	; >>>>> tmp2->prev = tmp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_25:
	; >>>>> Line:	111
	; >>>>> tmp->stackptr = taskStack; 
	mov	si, word [bp-2]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	114
	; >>>>> tmp->stackptr = tmp->stackptr - 11; 
	mov	si, word [bp-2]
	mov	ax, word [si]
	sub	ax, 22
	mov	word [si], ax
	; >>>>> Line:	115
	; >>>>> for(i=11; i>=0;i--){ 
	mov	word [bp-6], 11
	jmp	L_yakc_32
L_yakc_31:
	; >>>>> Line:	116
	; >>>>> if(i == 11){ 
	cmp	word [bp-6], 11
	jne	L_yakc_35
	; >>>>> Line:	117
	; >>>>> *(tmp->stackptr+i) = 0x200; 
	mov	ax, word [bp-6]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp-2]
	add	si, word [di]
	mov	word [si], 512
	jmp	L_yakc_36
L_yakc_35:
	; >>>>> Line:	119
	; >>>>> else if(i == 10){ 
	cmp	word [bp-6], 10
	jne	L_yakc_37
	; >>>>> Line:	120
	; >>>>> *(tmp->stackptr+i) = 0; 
	mov	ax, word [bp-6]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp-2]
	add	si, word [di]
	mov	word [si], 0
	jmp	L_yakc_38
L_yakc_37:
	; >>>>> Line:	122
	; >>>>> else if(i == 9){ 
	cmp	word [bp-6], 9
	jne	L_yakc_39
	; >>>>> Line:	123
	; >>>>> *(tmp->stackptr+i) = (int)task; 
	mov	ax, word [bp-6]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp-2]
	add	si, word [di]
	mov	ax, word [bp+4]
	mov	word [si], ax
	jmp	L_yakc_40
L_yakc_39:
	; >>>>> Line:	126
	; >>>>> *(tmp->stackptr+i) = 0; 
	mov	ax, word [bp-6]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp-2]
	add	si, word [di]
	mov	word [si], 0
L_yakc_40:
L_yakc_38:
L_yakc_36:
L_yakc_34:
	dec	word [bp-6]
L_yakc_32:
	cmp	word [bp-6], 0
	jge	L_yakc_31
L_yakc_33:
	; >>>>> Line:	131
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	132
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_22:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_23
L_yakc_42:
	DB	"Start Run and call scheduler",0xA,0
	ALIGN	2
YKRun:
	; >>>>> Line:	135
	; >>>>> void YKRun(void){ 
	jmp	L_yakc_43
L_yakc_44:
	; >>>>> Line:	136
	; >>>>> printString("Start Run and call scheduler\n"); 
	mov	ax, L_yakc_42
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	137
	; >>>>> run_flag = 1; 
	mov	byte [run_flag], 1
	; >>>>> Line:	138
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_43:
	push	bp
	mov	bp, sp
	jmp	L_yakc_44
	ALIGN	2
YKScheduler:
	; >>>>> Line:	141
	; >>>>> ty_tas 
	jmp	L_yakc_46
L_yakc_47:
	; >>>>> Line:	147
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	149
	; >>>>> highest_priority_task = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	150
	; >>>>> currentlyRunning = TKCurrentlyRunning; 
	mov	ax, word [TKCurrentlyRunning]
	mov	word [bp-4], ax
	; >>>>> Line:	152
	; >>>>> if(!run_flag || (TKCurrentlyRunning == highest_priority_task)){ 
	mov	al, byte [run_flag]
	test	al, al
	je	L_yakc_49
	mov	ax, word [bp-2]
	cmp	ax, word [TKCurrentlyRunning]
	jne	L_yakc_48
L_yakc_49:
	; >>>>> Line:	153
	; >>>>> return; 
	jmp	L_yakc_50
L_yakc_48:
	; >>>>> Line:	156
	; >>>>> YKCtxSwCount = YKCtxSwCount + 1; 
	mov	ax, word [YKCtxSwCount]
	inc	ax
	mov	word [YKCtxSwCount], ax
	; >>>>> Line:	157
	; >>>>> TKCurrentlyRunning = highest_priority_task; 
	mov	ax, word [bp-2]
	mov	word [TKCurrentlyRunning], ax
	; >>>>> Line:	158
	; >>>>> if(!save_flag){ 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_51
	; >>>>> Line:	160
	; >>>>> YKDispatcherNSave(highest_priority_task->stackptr); 
	mov	si, word [bp-2]
	push	word [si]
	call	YKDispatcherNSave
	add	sp, 2
	jmp	L_yakc_52
L_yakc_51:
	; >>>>> Line:	165
	; >>>>> YKDispatcherSave(&(currentlyRunning->stackptr), highest_priority_tas 
	mov	si, word [bp-2]
	push	word [si]
	push	word [bp-4]
	call	YKDispatcherSave
	add	sp, 4
L_yakc_52:
	; >>>>> Line:	168
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_50:
	mov	sp, bp
	pop	bp
	ret
L_yakc_46:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_47
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	171
	; >>>>> void YKDelayTask(unsigned count){ 
	jmp	L_yakc_54
L_yakc_55:
	; >>>>> Line:	173
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	175
	; >>>>> if(count == 0){ 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_56
	; >>>>> Line:	176
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	177
	; >>>>> return; 
	jmp	L_yakc_57
L_yakc_56:
	; >>>>> Line:	181
	; >>>>> ready = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	183
	; >>>>> YKRdyList = ready->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	184
	; >>>>> ready->next->prev = 0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	186
	; >>>>> ready->next = YKDelayList; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [YKDelayList]
	mov	word [si], ax
	; >>>>> Line:	187
	; >>>>> YKDelayList = ready; 
	mov	ax, word [bp-2]
	mov	word [YKDelayList], ax
	; >>>>> Line:	188
	; >>>>> ready->prev = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	189
	; >>>>> if(ready->next != 0){ 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_58
	; >>>>> Line:	190
	; >>>>> ready->next->prev=ready; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_58:
	; >>>>> Line:	192
	; >>>>> ready->delay = count; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	193
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	194
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_57:
	mov	sp, bp
	pop	bp
	ret
L_yakc_54:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_55
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	198
	; >>>>> void YKEnterISR(void){ 
	jmp	L_yakc_60
L_yakc_61:
	; >>>>> Line:	199
	; >>>>> YKISRDepth = YKISRDepth + 1; 
	mov	ax, word [YKISRDepth]
	inc	ax
	mov	word [YKISRDepth], ax
	mov	sp, bp
	pop	bp
	ret
L_yakc_60:
	push	bp
	mov	bp, sp
	jmp	L_yakc_61
	ALIGN	2
YKExitISR:
	; >>>>> Line:	203
	; >>>>> void YKExitISR(void){ 
	jmp	L_yakc_63
L_yakc_64:
	; >>>>> Line:	204
	; >>>>> Y 
	mov	ax, word [YKISRDepth]
	dec	ax
	mov	word [YKISRDepth], ax
	; >>>>> Line:	206
	; >>>>> if(YKISRDepth == 0) { 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_yakc_65
	; >>>>> Line:	207
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_65:
	mov	sp, bp
	pop	bp
	ret
L_yakc_63:
	push	bp
	mov	bp, sp
	jmp	L_yakc_64
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	211
	; >>>>> void YKTickHandler(void){ 
	jmp	L_yakc_67
L_yakc_68:
	; >>>>> Line:	214
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	216
	; >>>>> YKTickNum = YKTickNum + 1; 
	mov	ax, word [YKTickNum]
	inc	ax
	mov	word [YKTickNum], ax
	; >>>>> Line:	217
	; >>>>> tempDelay = YKDelayList; 
	mov	ax, word [YKDelayList]
	mov	word [bp-2], ax
	; >>>>> Line:	219
	; >>>>> while(tempDelay != 0){ 
	jmp	L_yakc_70
L_yakc_69:
	; >>>>> Line:	220
	; >>>>> tempNext = tempDelay->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	221
	; >>>>> tempDelay->delay = tempDelay->delay - 1; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	dec	ax
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], ax
	; >>>>> Line:	222
	; >>>>> if(tempDelay->delay <= 0){ 
	mov	si, word [bp-2]
	add	si, 6
	cmp	word [si], 0
	jg	L_yakc_72
	; >>>>> Line:	224
	; >>>>> if(tempDelay->prev == 0){ 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_73
	; >>>>> Line:	225
	; >>>>> YKDelayList = tempDelay->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKDelayList], ax
	jmp	L_yakc_74
L_yakc_73:
	; >>>>> Line:	228
	; >>>>> tempDelay->prev->next = tempDelay->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp-2]
	add	di, 10
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_74:
	; >>>>> Line:	230
	; >>>>> ex(); 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_75
	; >>>>> Line:	231
	; >>>>> tempDelay->next->prev = tempDelay->prev; 
	mov	si, word [bp-2]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 8
	mov	di, word [di]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_75:
	; >>>>> Line:	234
	; >>>>> tempReady = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	235
	; >>>>> while(tempReady->priority < tempDelay->priority){ 
	jmp	L_yakc_77
L_yakc_76:
	; >>>>> Line:	236
	; >>>>> tempReady = tempReady->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_77:
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_76
L_yakc_78:
	; >>>>> Line:	238
	; >>>>> if(tempReady->prev == 0){ 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_79
	; >>>>> Line:	239
	; >>>>> YKRdyList = tempDelay; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_80
L_yakc_79:
	; >>>>> Line:	242
	; >>>>> tempReady->prev->next = tempDelay; 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_80:
	; >>>>> Line:	245
	; >>>>> tempDelay->prev = tempReady->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	246
	; >>>>> tempDelay->next = tempReady; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	247
	; >>>>> tempReady->prev = tempDelay; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_72:
	; >>>>> Line:	249
	; >>>>> tempDelay = tempNext; 
	mov	ax, word [bp-6]
	mov	word [bp-2], ax
L_yakc_70:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_69
L_yakc_71:
	; >>>>> Line:	251
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_67:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_68
	ALIGN	2
YKSemCreate:
	; >>>>> Line:	254
	; >>>>> YKSEM* YKSemCreate(int initialValue){ 
	jmp	L_yakc_82
L_yakc_83:
	; >>>>> Line:	256
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	257
	; >>>>> i = 0; 
	mov	word [bp-2], 0
	; >>>>> Line:	258
	; >>>>> while(YKSemArray[i].active){ 
	jmp	L_yakc_85
L_yakc_84:
	; >>>>> Line:	259
	; >>>>> i = i+1; 
	mov	ax, word [bp-2]
	inc	ax
	mov	word [bp-2], ax
L_yakc_85:
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, YKSemArray
	mov	si, ax
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_84
L_yakc_86:
	; >>>>> Line:	263
	; >>>>> YKSemArray[i].active = 1; 
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, YKSemArray
	mov	si, ax
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	264
	; >>>>> YKSemArray[i].val = initialValue; 
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	mov	si, ax
	add	si, YKSemArray
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	265
	; >>>>> YKSemArray[i].id = i; 
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, YKSemArray
	mov	si, ax
	add	si, 4
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	267
	; >>>>> return &(YKSemArray[i]); 
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, YKSemArray
L_yakc_87:
	mov	sp, bp
	pop	bp
	ret
L_yakc_82:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_83
	ALIGN	2
YKSemPend:
	; >>>>> Line:	277
	; >>>>> void YKSemPend(YKSEM *semaphore){ 
	jmp	L_yakc_89
L_yakc_90:
	; >>>>> Line:	280
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	281
	; >>>>> semaphore->val = semaphore->val - 1; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	dec	ax
	mov	word [si], ax
	; >>>>> Line:	282
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	284
	; >>>>> if (semaphore->val >= 0){ return; } 
	mov	si, word [bp+4]
	cmp	word [si], 0
	jl	L_yakc_91
	; >>>>> Line:	284
	; >>>>> if (semaphore->val >= 0){ return; } 
	jmp	L_yakc_92
L_yakc_91:
	; >>>>> Line:	286
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	287
	; >>>>> readyTask = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	288
	; >>>>> YKRdyList = readyTask->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	289
	; >>>>> ng->semWait = 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	290
	; >>>>> readyTask->next = YKSemWaitList; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [YKSemWaitList]
	mov	word [si], ax
	; >>>>> Line:	291
	; >>>>> YKSemWaitList = readyTask; 
	mov	ax, word [bp-2]
	mov	word [YKSemWaitList], ax
	; >>>>> Line:	292
	; >>>>> readyTask->prev = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	294
	; >>>>> if(readyTask->next != 0){ 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_93
	; >>>>> Line:	295
	; >>>>> readyTask->next->prev = readyTask; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_93:
	; >>>>> Line:	298
	; >>>>> readyTask->semWait = semaphore; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	300
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	301
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_92:
	mov	sp, bp
	pop	bp
	ret
L_yakc_89:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_90
	ALIGN	2
YKSemPost:
	; >>>>> Line:	315
	; >>>>> void YKSemPost(YKSEM *semaphore){ 
	jmp	L_yakc_95
L_yakc_96:
	; >>>>> Line:	317
	; >>>>> unSuspTask = 0; 
	mov	word [bp-4], 0
	; >>>>> Line:	318
	; >>>>> semWaiting = YKSemWaitList; 
	mov	ax, word [YKSemWaitList]
	mov	word [bp-2], ax
	; >>>>> Line:	320
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	321
	; >>>>> semaphore->val = semaphore->val + 1; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	inc	ax
	mov	word [si], ax
	; >>>>> Line:	324
	; >>>>> while(semWaiting != 0){ 
	jmp	L_yakc_98
L_yakc_97:
	; >>>>> Line:	326
	; >>>>> if(semWaiting->semWait = 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [bp+4]
	cmp	ax, word [si]
	jne	L_yakc_100
	; >>>>> Line:	327
	; >>>>> if((unSuspTask == 0) || (semWaiting->priority < unSuspTask->priority)){ 
	mov	ax, word [bp-4]
	test	ax, ax
	je	L_yakc_102
	mov	si, word [bp-2]
	add	si, 4
	mov	di, word [bp-4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_101
L_yakc_102:
	; >>>>> Line:	328
	; >>>>> unSuspTask = semWaiting; 
	mov	ax, word [bp-2]
	mov	word [bp-4], ax
L_yakc_101:
L_yakc_100:
	; >>>>> Line:	331
	; >>>>> semWaiting = semWaiting->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_98:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_97
L_yakc_99:
	; >>>>> Line:	334
	; >>>>> if(unSuspTask == 0){ 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_103
	; >>>>> Line:	335
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	336
	; >>>>> return; 
	jmp	L_yakc_104
L_yakc_103:
	; >>>>> Line:	339
	; >>>>> if(unSuspTask->prev == 0){ 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_105
	; >>>>> Line:	340
	; >>>>> YKSemWaitList = unSuspTask->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKSemWaitList], ax
	jmp	L_yakc_106
L_yakc_105:
	; >>>>> Line:	343
	; >>>>> unSuspTask->prev->next = unSuspTask->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	di, word [bp-4]
	add	di, 10
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_106:
	; >>>>> Line:	346
	; >>>>> if (unSuspTask->next != 0){ 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_107
	; >>>>> Line:	347
	; >>>>> unSuspTask->next->prev = unSuspTask->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-4]
	add	di, 8
	mov	di, word [di]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_107:
	; >>>>> Line:	351
	; >>>>> readyTask = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-6], ax
	; >>>>> Line:	352
	; >>>>> while (readyTask->prio 
	jmp	L_yakc_109
L_yakc_108:
	; >>>>> Line:	353
	; >>>>> readyTask = readyTask->next; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_109:
	mov	si, word [bp-6]
	add	si, 4
	mov	di, word [bp-4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_108
L_yakc_110:
	; >>>>> Line:	355
	; >>>>> if(readyTask->prev == 0){ 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_111
	; >>>>> Line:	356
	; >>>>> YKRdyList = unSuspTask; 
	mov	ax, word [bp-4]
	mov	word [YKRdyList], ax
	jmp	L_yakc_112
L_yakc_111:
	; >>>>> Line:	359
	; >>>>> readyTask->prev->next = unSuspTask; 
	mov	si, word [bp-6]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
L_yakc_112:
	; >>>>> Line:	361
	; >>>>> unSuspTask->prev = readyTask->prev; 
	mov	si, word [bp-6]
	add	si, 10
	mov	di, word [bp-4]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	362
	; >>>>> unSuspTask->next = readyTask; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	363
	; >>>>> readyTask->prev = unSuspTask; 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	365
	; >>>>> unSuspTask->semWait = 0; 
	mov	si, word [bp-4]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	367
	; >>>>> if( YKISRDepth == 0){ 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_yakc_113
	; >>>>> Line:	368
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_113:
	; >>>>> Line:	370
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_104:
	; >>>>> Line:	371
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_yakc_95:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_96
	ALIGN	2
queueInsert:
	; >>>>> Line:	374
	; >>>>> void queueInsert(YKQ* queue, void* msg){ 
	jmp	L_yakc_115
L_yakc_116:
	; >>>>> Line:	375
	; >>>>> queue->base_addr[queue->head] = msg; 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp+4]
	add	di, 4
	add	si, word [di]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	376
	; >>>>> if(queue->head < queue->size){ 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp+4]
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_117
	; >>>>> Line:	377
	; >>>>> queue-> 
	mov	si, word [bp+4]
	add	si, 6
	inc	word [si]
	jmp	L_yakc_118
L_yakc_117:
	; >>>>> Line:	380
	; >>>>> queue->head = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
L_yakc_118:
	mov	sp, bp
	pop	bp
	ret
L_yakc_115:
	push	bp
	mov	bp, sp
	jmp	L_yakc_116
	ALIGN	2
queueRemove:
	; >>>>> Line:	384
	; >>>>> void* queueRemove(YKQ* queue){ 
	jmp	L_yakc_120
L_yakc_121:
	; >>>>> Line:	386
	; >>>>> msg = *(queue->base_addr + queue->tail); 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp+4]
	add	di, 4
	add	si, word [di]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	387
	; >>>>> if(queue->tail > 0){ 
	mov	si, word [bp+4]
	add	si, 8
	cmp	word [si], 0
	jle	L_yakc_122
	; >>>>> Line:	388
	; >>>>> queue->head -= 1; 
	mov	si, word [bp+4]
	add	si, 6
	dec	word [si]
	jmp	L_yakc_123
L_yakc_122:
	; >>>>> Line:	391
	; >>>>> queue->head = queue->size - 1; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	dec	ax
	add	si, 6
	mov	word [si], ax
L_yakc_123:
	; >>>>> Line:	393
	; >>>>> return msg; 
	mov	ax, word [bp-2]
L_yakc_124:
	mov	sp, bp
	pop	bp
	ret
L_yakc_120:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_121
	ALIGN	2
YKQCreate:
	; >>>>> Line:	397
	; >>>>> YKQ *YKQCreate(void **start, unsigned size){ 
	jmp	L_yakc_126
L_yakc_127:
	; >>>>> Line:	406
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	407
	; >>>>> for (i = 0; YKQueueArray[i].base_addr; i++){}; 
	mov	word [bp-2], 0
	jmp	L_yakc_129
L_yakc_128:
L_yakc_131:
	; >>>>> Line:	407
	; >>>>> for (i = 0; YKQueueArray[i].base_addr; i++){}; 
	inc	word [bp-2]
L_yakc_129:
	mov	ax, word [bp-2]
	mov	cx, 10
	imul	cx
	add	ax, YKQueueArray
	mov	si, ax
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_128
L_yakc_130:
	; >>>>> Line:	409
	; >>>>> YKQueueArray[i].base_addr = start; 
	mov	ax, word [bp-2]
	mov	cx, 10
	imul	cx
	add	ax, YKQueueArray
	mov	si, ax
	add	si, 4
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	410
	; >>>>> YKQueueArray[i].length = 0; 
	mov	ax, word [bp-2]
	mov	cx, 10
	imul	cx
	add	ax, YKQueueArray
	mov	si, ax
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	411
	; >>>>> YKQueueArray[i].size = size; 
	mov	ax, word [bp-2]
	mov	cx, 10
	imul	cx
	mov	si, ax
	add	si, YKQueueArray
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	412
	; >>>>> YKQueueArray[i].tail = 0; 
	mov	ax, word [bp-2]
	mov	cx, 10
	imul	cx
	add	ax, YKQueueArray
	mov	si, ax
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	413
	; >>>>> = *(que 
	mov	ax, word [bp-2]
	mov	cx, 10
	imul	cx
	add	ax, YKQueueArray
	mov	si, ax
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	415
	; >>>>> return &(YKQueueArray[i]); 
	mov	ax, word [bp-2]
	mov	cx, 10
	imul	cx
	add	ax, YKQueueArray
L_yakc_132:
	mov	sp, bp
	pop	bp
	ret
L_yakc_126:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_127
	ALIGN	2
YKQPend:
	; >>>>> Line:	425
	; >>>>> void *YKQPend(YKQ *queue){ 
	jmp	L_yakc_134
L_yakc_135:
	; >>>>> Line:	455
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	456
	; >>>>> if(queue->length == 0){ 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_136
	; >>>>> Line:	457
	; >>>>> readyTask = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	458
	; >>>>> YKRdyList = readyTask->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	459
	; >>>>> readyTask->next->prev = 0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	460
	; >>>>> readyTask->next = YKQWaitList; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [YKQWaitList]
	mov	word [si], ax
	; >>>>> Line:	461
	; >>>>> YKQWaitList = readyTask; 
	mov	ax, word [bp-2]
	mov	word [YKQWaitList], ax
	; >>>>> Line:	462
	; >>>>> readyTask->prev = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	464
	; >>>>> if(readyTask->next != 0){ 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_137
	; >>>>> Line:	465
	; >>>>> readyTask->next->prev = readyTask; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_137:
	; >>>>> Line:	468
	; >>>>> readyTask->queueWait = queue; 
	mov	si, word [bp-2]
	add	si, 14
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	469
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_136:
	; >>>>> Line:	471
	; >>>>> msg = *(que 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp+4]
	add	di, 4
	add	si, word [di]
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	472
	; >>>>> queue->size = queue->size - 1; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	dec	ax
	mov	word [si], ax
	; >>>>> Line:	474
	; >>>>> if((queue->tail + 1) < queue->length){ 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	inc	ax
	mov	si, word [bp+4]
	add	si, 2
	mov	dx, word [si]
	cmp	dx, ax
	jle	L_yakc_138
	; >>>>> Line:	475
	; >>>>> queue->tail = queue->tail + 1; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	inc	ax
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], ax
	jmp	L_yakc_139
L_yakc_138:
	; >>>>> Line:	478
	; >>>>> queue->tail = 0; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
L_yakc_139:
	; >>>>> Line:	481
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	482
	; >>>>> return msg; 
	mov	ax, word [bp-4]
L_yakc_140:
	mov	sp, bp
	pop	bp
	ret
L_yakc_134:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_135
	ALIGN	2
YKQPost:
	; >>>>> Line:	497
	; >>>>> int YKQPost(YKQ *queue, void *msg){ 
	jmp	L_yakc_142
L_yakc_143:
	; >>>>> Line:	499
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	501
	; >>>>> if((queue->length - 1) == queue->size){ 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	dec	ax
	mov	si, word [bp+4]
	mov	dx, word [si]
	cmp	dx, ax
	jne	L_yakc_144
	; >>>>> Line:	502
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_yakc_145
L_yakc_144:
	; >>>>> Line:	504
	; >>>>> unWaitTask = 0; 
	mov	word [bp-4], 0
	; >>>>> Line:	505
	; >>>>> queueWait = YKQWaitList; 
	mov	ax, word [YKQWaitList]
	mov	word [bp-2], ax
	; >>>>> Line:	508
	; >>>>> *(queue->base_addr + queue->head) = msg; 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp+4]
	add	di, 4
	add	si, word [di]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	509
	; >>>>> queue->size = queue->size + 1; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	inc	ax
	mov	word [si], ax
	; >>>>> Line:	510
	; >>>>> if( 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	inc	ax
	mov	si, word [bp+4]
	add	si, 2
	mov	dx, word [si]
	cmp	dx, ax
	jle	L_yakc_146
	; >>>>> Line:	511
	; >>>>> queue->head = queue->head + 1; 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	inc	ax
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], ax
	jmp	L_yakc_147
L_yakc_146:
	; >>>>> Line:	514
	; >>>>> queue->tail = 0; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
L_yakc_147:
	; >>>>> Line:	517
	; >>>>> while(queueWait != 0){ 
	jmp	L_yakc_149
L_yakc_148:
	; >>>>> Line:	519
	; >>>>> if(queueWait->queueWait == queue){ 
	mov	si, word [bp-2]
	add	si, 14
	mov	ax, word [bp+4]
	cmp	ax, word [si]
	jne	L_yakc_151
	; >>>>> Line:	520
	; >>>>> if((unWaitTask == 0) || (queueWait->priority < unWaitTask->priority)){ 
	mov	ax, word [bp-4]
	test	ax, ax
	je	L_yakc_153
	mov	si, word [bp-2]
	add	si, 4
	mov	di, word [bp-4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_152
L_yakc_153:
	; >>>>> Line:	521
	; >>>>> unWaitTask = queueWait; 
	mov	ax, word [bp-2]
	mov	word [bp-4], ax
L_yakc_152:
L_yakc_151:
	; >>>>> Line:	524
	; >>>>> queueWait = queueWait->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_149:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_148
L_yakc_150:
	; >>>>> Line:	528
	; >>>>> if(unWaitTask == 0){ 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_154
	; >>>>> Line:	529
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	530
	; >>>>> return 1; 
	mov	ax, 1
	jmp	L_yakc_145
L_yakc_154:
	; >>>>> Line:	534
	; >>>>> if(unWaitTask->prev == 0){ 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_155
	; >>>>> Line:	535
	; >>>>> YKQWaitList = unWaitTask->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKQWaitList], ax
	jmp	L_yakc_156
L_yakc_155:
	; >>>>> Line:	538
	; >>>>> unWaitTask->prev->next = unWaitTa 
	mov	si, word [bp-4]
	add	si, 8
	mov	di, word [bp-4]
	add	di, 10
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_156:
	; >>>>> Line:	541
	; >>>>> if (unWaitTask->next != 0){ 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_157
	; >>>>> Line:	542
	; >>>>> unWaitTask->next->prev = unWaitTask->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-4]
	add	di, 8
	mov	di, word [di]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_157:
	; >>>>> Line:	545
	; >>>>> readyTask = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-6], ax
	; >>>>> Line:	546
	; >>>>> while (readyTask->priority < unWaitTask->priority){ 
	jmp	L_yakc_159
L_yakc_158:
	; >>>>> Line:	547
	; >>>>> readyTask = readyTask->next; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_159:
	mov	si, word [bp-6]
	add	si, 4
	mov	di, word [bp-4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_158
L_yakc_160:
	; >>>>> Line:	549
	; >>>>> if(readyTask->prev == 0){ 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_161
	; >>>>> Line:	550
	; >>>>> YKRdyList = unWaitTask; 
	mov	ax, word [bp-4]
	mov	word [YKRdyList], ax
	jmp	L_yakc_162
L_yakc_161:
	; >>>>> Line:	553
	; >>>>> readyTask->prev->next = unWaitTask; 
	mov	si, word [bp-6]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
L_yakc_162:
	; >>>>> Line:	555
	; >>>>> unWaitTask->prev = readyTask->prev; 
	mov	si, word [bp-6]
	add	si, 10
	mov	di, word [bp-4]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	556
	; >>>>> unWaitTask->next = readyTask; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	557
	; >>>>> readyTask->prev = unWaitTask; 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	559
	; >>>>> unWaitTask->queueWait = 0; 
	mov	si, word [bp-4]
	add	si, 14
	mov	word [si], 0
	; >>>>> Line:	561
	; >>>>> if(YKISRDepth == 0){ 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_yakc_163
	; >>>>> Line:	562
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_163:
	; >>>>> Line:	564
	; >>>>> YKExi 
	call	YKExitMutex
	; >>>>> Line:	565
	; >>>>> return 1; 
	mov	ax, 1
L_yakc_145:
	mov	sp, bp
	pop	bp
	ret
L_yakc_142:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_143
	ALIGN	2
YKCtxSwCount:
	TIMES	2 db 0
YKIdleCount:
	TIMES	2 db 0
YKTickNum:
	TIMES	2 db 0
YKRdyList:
	TIMES	2 db 0
YKDelayList:
	TIMES	2 db 0
YKSemWaitList:
	TIMES	2 db 0
YKAvailTCBList:
	TIMES	2 db 0
YKTCBArray:
	TIMES	160 db 0
idleStack:
	TIMES	512 db 0
YKISRDepth:
	TIMES	2 db 0
YKSemArray:
	TIMES	114 db 0
YKQueueArray:
	TIMES	20 db 0
YKQWaitList:
	TIMES	2 db 0
TKCurrentlyRunning:
	TIMES	2 db 0
