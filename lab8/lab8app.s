; Generated by c86 (BYU-NASM) 5.1 (beta) from lab8app.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
corner_flag:
	DW	0
	ALIGN	2
getIndex:
	jmp	L_lab8app_1
L_lab8app_2:
	cmp	word [moveQueueIndex], 50
	jne	L_lab8app_3
	mov	word [moveQueueIndex], 0
L_lab8app_3:
	mov	ax, word [moveQueueIndex]
	inc	word [moveQueueIndex]
L_lab8app_4:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_1:
	push	bp
	mov	bp, sp
	jmp	L_lab8app_2
	ALIGN	2
L_lab8app_6:
	DW	0
L_lab8app_8:
	DB	" ",0xD,0xA,0
L_lab8app_7:
	DB	" Corner Ori: ",0
	ALIGN	2
newPieceTask:
	jmp	L_lab8app_9
L_lab8app_10:
	mov	word [bp-2], 0
	jmp	L_lab8app_12
L_lab8app_11:
	push	word [newPieceQueue]
	call	YKQPend
	add	sp, 2
	mov	word [bp-6], ax
	mov	si, word [bp-6]
	add	si, 2
	cmp	word [si], 1
	jne	L_lab8app_14
	mov	si, word [bp-6]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-4], ax
	cmp	word [bp-4], 5
	jne	L_lab8app_15
	call	getIndex
	mov	word [bp-2], ax
	mov	si, word [bp-6]
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceList
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 2
	mov	word [si], 0
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 4
	mov	word [si], SlidePiece
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	push	ax
	push	word [movePieceQueue]
	call	YKQPost
	add	sp, 4
	jmp	L_lab8app_16
L_lab8app_15:
	jmp	L_lab8app_18
L_lab8app_17:
	call	getIndex
	mov	word [bp-2], ax
	mov	si, word [bp-6]
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceList
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 2
	mov	word [si], 1
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 4
	mov	word [si], SlidePiece
	inc	word [bp-4]
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	push	ax
	push	word [movePieceQueue]
	call	YKQPost
	add	sp, 4
L_lab8app_18:
	cmp	word [bp-4], 4
	jl	L_lab8app_17
L_lab8app_19:
L_lab8app_16:
	mov	si, word [bp-6]
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	je	L_lab8app_20
	call	getIndex
	mov	word [bp-2], ax
	mov	si, word [bp-6]
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceList
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 2
	mov	word [si], 1
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 4
	mov	word [si], RotatePiece
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	push	ax
	push	word [movePieceQueue]
	call	YKQPost
	add	sp, 4
L_lab8app_20:
	jmp	L_lab8app_21
L_lab8app_14:
	mov	si, word [bp-6]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-4], ax
	cmp	word [bp-4], 5
	jne	L_lab8app_22
	call	getIndex
	mov	word [bp-2], ax
	mov	si, word [bp-6]
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceList
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 2
	mov	word [si], 0
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 4
	mov	word [si], SlidePiece
	dec	word [bp-4]
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	push	ax
	push	word [movePieceQueue]
	call	YKQPost
	add	sp, 4
	jmp	L_lab8app_23
L_lab8app_22:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_lab8app_24
	call	getIndex
	mov	word [bp-2], ax
	mov	si, word [bp-6]
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceList
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 2
	mov	word [si], 1
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 4
	mov	word [si], SlidePiece
	inc	word [bp-4]
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	push	ax
	push	word [movePieceQueue]
	call	YKQPost
	add	sp, 4
L_lab8app_24:
L_lab8app_23:
	mov	ax, word [L_lab8app_6]
	test	ax, ax
	jne	L_lab8app_25
	mov	word [L_lab8app_6], 1
	mov	si, word [bp-6]
	add	si, 4
	cmp	word [si], 1
	jne	L_lab8app_26
	call	getIndex
	mov	word [bp-2], ax
	mov	si, word [bp-6]
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceList
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 2
	mov	word [si], 1
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 4
	mov	word [si], RotatePiece
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	push	ax
	push	word [movePieceQueue]
	call	YKQPost
	add	sp, 4
L_lab8app_26:
	mov	si, word [bp-6]
	add	si, 4
	cmp	word [si], 3
	jne	L_lab8app_27
	call	getIndex
	mov	word [bp-2], ax
	mov	si, word [bp-6]
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceList
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 2
	mov	word [si], 0
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 4
	mov	word [si], RotatePiece
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	push	ax
	push	word [movePieceQueue]
	call	YKQPost
	add	sp, 4
L_lab8app_27:
	mov	si, word [bp-6]
	add	si, 4
	cmp	word [si], 2
	jne	L_lab8app_28
	call	getIndex
	mov	word [bp-2], ax
	mov	si, word [bp-6]
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceList
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 2
	mov	word [si], 0
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 4
	mov	word [si], RotatePiece
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	push	ax
	push	word [movePieceQueue]
	call	YKQPost
	add	sp, 4
	call	getIndex
	mov	word [bp-2], ax
	mov	si, word [bp-6]
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceList
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 2
	mov	word [si], 0
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 4
	mov	word [si], RotatePiece
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	push	ax
	push	word [movePieceQueue]
	call	YKQPost
	add	sp, 4
L_lab8app_28:
	jmp	L_lab8app_30
L_lab8app_29:
	call	getIndex
	mov	word [bp-2], ax
	mov	si, word [bp-6]
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceList
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 2
	mov	word [si], 0
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 4
	mov	word [si], SlidePiece
	dec	word [bp-4]
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	push	ax
	push	word [movePieceQueue]
	call	YKQPost
	add	sp, 4
L_lab8app_30:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_lab8app_29
L_lab8app_31:
	jmp	L_lab8app_32
L_lab8app_25:
	mov	word [L_lab8app_6], 0
	mov	si, word [bp-6]
	add	si, 4
	cmp	word [si], 1
	jne	L_lab8app_33
	call	getIndex
	mov	word [bp-2], ax
	mov	si, word [bp-6]
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceList
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 2
	mov	word [si], 0
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 4
	mov	word [si], RotatePiece
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	push	ax
	push	word [movePieceQueue]
	call	YKQPost
	add	sp, 4
L_lab8app_33:
	mov	si, word [bp-6]
	add	si, 4
	cmp	word [si], 3
	jne	L_lab8app_34
	call	getIndex
	mov	word [bp-2], ax
	mov	si, word [bp-6]
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceList
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 2
	mov	word [si], 1
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 4
	mov	word [si], RotatePiece
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	push	ax
	push	word [movePieceQueue]
	call	YKQPost
	add	sp, 4
L_lab8app_34:
	mov	si, word [bp-6]
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	jne	L_lab8app_35
	call	getIndex
	mov	word [bp-2], ax
	mov	si, word [bp-6]
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceList
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 2
	mov	word [si], 0
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 4
	mov	word [si], RotatePiece
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	push	ax
	push	word [movePieceQueue]
	call	YKQPost
	add	sp, 4
	call	getIndex
	mov	word [bp-2], ax
	mov	si, word [bp-6]
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceList
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 2
	mov	word [si], 0
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 4
	mov	word [si], RotatePiece
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	push	ax
	push	word [movePieceQueue]
	call	YKQPost
	add	sp, 4
L_lab8app_35:
	cmp	word [bp-4], 2
	jle	L_lab8app_36
	jmp	L_lab8app_38
L_lab8app_37:
	call	getIndex
	mov	word [bp-2], ax
	mov	si, word [bp-6]
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceList
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 2
	mov	word [si], 0
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 4
	mov	word [si], SlidePiece
	dec	word [bp-4]
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	push	ax
	push	word [movePieceQueue]
	call	YKQPost
	add	sp, 4
L_lab8app_38:
	cmp	word [bp-4], 2
	jne	L_lab8app_37
L_lab8app_39:
	jmp	L_lab8app_40
L_lab8app_36:
	cmp	word [bp-4], 2
	jge	L_lab8app_41
	jmp	L_lab8app_43
L_lab8app_42:
	call	getIndex
	mov	word [bp-2], ax
	mov	si, word [bp-6]
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceList
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 2
	mov	word [si], 1
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	mov	si, ax
	add	si, 4
	mov	word [si], SlidePiece
	inc	word [bp-4]
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, movePieceList
	push	ax
	push	word [movePieceQueue]
	call	YKQPost
	add	sp, 4
L_lab8app_43:
	cmp	word [bp-4], 2
	jne	L_lab8app_42
L_lab8app_44:
L_lab8app_41:
L_lab8app_40:
L_lab8app_32:
	mov	ax, L_lab8app_7
	push	ax
	call	printString
	add	sp, 2
	push	word [bp-4]
	call	printInt
	add	sp, 2
	mov	ax, L_lab8app_8
	push	ax
	call	printString
	add	sp, 2
L_lab8app_21:
L_lab8app_12:
	jmp	L_lab8app_11
L_lab8app_13:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_9:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_lab8app_10
	ALIGN	2
movePieceTask:
	jmp	L_lab8app_46
L_lab8app_47:
	jmp	L_lab8app_49
L_lab8app_48:
	push	word [movePieceSem]
	call	YKSemPend
	add	sp, 2
	push	word [movePieceQueue]
	call	YKQPend
	add	sp, 2
	mov	word [bp-2], ax
	mov	si, word [bp-2]
	add	si, 2
	push	word [si]
	mov	si, word [bp-2]
	push	word [si]
	add	si, 4
	mov	si, word [si]
	call	si
	add	sp, 4
L_lab8app_49:
	jmp	L_lab8app_48
L_lab8app_50:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_46:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_lab8app_47
L_lab8app_56:
	DB	"% >>>>>",0xD,0xA,0
L_lab8app_55:
	DB	", CPU usage: ",0
L_lab8app_54:
	DB	"<<<<< Context switches: ",0
L_lab8app_53:
	DB	"Determining CPU capacity",0xD,0xA,0
L_lab8app_52:
	DB	"Welcome to the YAK kernel",0xD,0xA,0
	ALIGN	2
STask:
	jmp	L_lab8app_57
L_lab8app_58:
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	mov	ax, L_lab8app_52
	push	ax
	call	printString
	add	sp, 2
	mov	ax, L_lab8app_53
	push	ax
	call	printString
	add	sp, 2
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	mov	word [YKIdleCount], 0
	mov	ax, 5
	push	ax
	call	YKDelayTask
	add	sp, 2
	mov	ax, word [YKIdleCount]
	xor	dx, dx
	mov	cx, 25
	div	cx
	mov	word [bp-2], ax
	mov	word [YKIdleCount], 0
	mov	ax, 836
	xor	dx, dx
	push	dx
	push	ax
	call	SeedSimptris
	add	sp, 4
	mov	al, 3
	push	ax
	mov	ax, (newPieceTaskStk+1024)
	push	ax
	mov	ax, newPieceTask
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	al, 5
	push	ax
	mov	ax, (movePieceTaskStk+1024)
	push	ax
	mov	ax, movePieceTask
	push	ax
	call	YKNewTask
	add	sp, 6
	call	StartSimptris
	jmp	L_lab8app_60
L_lab8app_59:
	mov	ax, 20
	push	ax
	call	YKDelayTask
	add	sp, 2
	call	YKEnterMutex
	mov	ax, word [YKCtxSwCount]
	mov	word [bp-4], ax
	mov	ax, word [YKIdleCount]
	mov	word [bp-6], ax
	call	YKExitMutex
	mov	ax, L_lab8app_54
	push	ax
	call	printString
	add	sp, 2
	push	word [bp-4]
	call	printInt
	add	sp, 2
	mov	ax, L_lab8app_55
	push	ax
	call	printString
	add	sp, 2
	mov	ax, word [bp-6]
	xor	dx, dx
	div	word [bp-2]
	mov	word [bp-8], ax
	mov	ax, 100
	sub	ax, word [bp-8]
	push	ax
	call	printInt
	add	sp, 2
	mov	ax, L_lab8app_56
	push	ax
	call	printString
	add	sp, 2
	call	YKEnterMutex
	mov	word [YKCtxSwCount], 0
	mov	word [YKIdleCount], 0
	call	YKExitMutex
L_lab8app_60:
	jmp	L_lab8app_59
L_lab8app_61:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_57:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_lab8app_58
	ALIGN	2
main:
	jmp	L_lab8app_63
L_lab8app_64:
	call	YKInitialize
	mov	ax, 50
	push	ax
	mov	ax, newPieceQue
	push	ax
	call	YKQCreate
	add	sp, 4
	mov	word [newPieceQueue], ax
	mov	ax, 50
	push	ax
	mov	ax, movePieceQue
	push	ax
	call	YKQCreate
	add	sp, 4
	mov	word [movePieceQueue], ax
	mov	ax, 1
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	word [movePieceSem], ax
	mov	ax, (L_lab8app_7+12)
	push	ax
	call	printString
	add	sp, 2
	xor	al, al
	push	ax
	mov	ax, (STaskStk+1024)
	push	ax
	mov	ax, STask
	push	ax
	call	YKNewTask
	add	sp, 6
	call	YKRun
	mov	sp, bp
	pop	bp
	ret
L_lab8app_63:
	push	bp
	mov	bp, sp
	jmp	L_lab8app_64
	ALIGN	2
movePieceQueue:
	TIMES	2 db 0
newPieceQueue:
	TIMES	2 db 0
movePieceSem:
	TIMES	2 db 0
newPieceTaskStk:
	TIMES	1024 db 0
movePieceTaskStk:
	TIMES	1024 db 0
STaskStk:
	TIMES	1024 db 0
moveQueueIndex:
	TIMES	2 db 0
movePieceList:
	TIMES	300 db 0
newPieceList:
	TIMES	400 db 0
newPieceQue:
	TIMES	100 db 0
movePieceQue:
	TIMES	100 db 0
