; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
run_flag:
	DB	0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	25
	; >>>>> void YKInitialize(void){ 
	jmp	L_yakc_1
L_yakc_2:
	; >>>>> Line:	27
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	28
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	29
	; >>>>> TKCurrentlyRunning = 0; 
	mov	word [TKCurrentlyRunning], 0
	; >>>>> Line:	34
	; >>>>> YKAvailTCBList = &(YKTCBArray[0]); 
	mov	word [YKAvailTCBList], YKTCBArray
	; >>>>> Line:	36
	; >>>>> for (i = 0; i < 3; i++) 
	mov	word [bp-2], 0
	jmp	L_yakc_4
L_yakc_3:
	; >>>>> Line:	37
	; >>>>> YKTCBArray[i].next = &(YKTCBArray[i+1]); 
	mov	ax, word [bp-2]
	inc	ax
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	push	ax
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	mov	dx, ax
	add	dx, YKTCBArray
	mov	si, dx
	add	si, 10
	pop	ax
	mov	word [si], ax
L_yakc_6:
	inc	word [bp-2]
L_yakc_4:
	cmp	word [bp-2], 3
	jl	L_yakc_3
L_yakc_5:
	; >>>>> Line:	38
	; >>>>> YKTCBArray[3].next = 0; 
	mov	word [(52+YKTCBArray)], 0
	; >>>>> Line:	40
	; >>>>> YKNewTask(YKIdleTask, (void*)&idleStack[256], 100); 
	mov	al, 100
	push	ax
	mov	ax, (idleStack+512)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	sp, bp
	pop	bp
	ret
L_yakc_1:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_2
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	47
	; >>>>> void YKIdleTask(void){ 
	jmp	L_yakc_8
L_yakc_9:
	; >>>>> Line:	48
	; >>>>> while(1){ 
	jmp	L_yakc_11
L_yakc_10:
	; >>>>> Line:	49
	; >>>>> YKIdleCount=YKIdleCount+1; 
	mov	ax, word [YKIdleCount]
	inc	ax
	mov	word [YKIdleCount], ax
	; >>>>> Line:	50
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_11:
	jmp	L_yakc_10
L_yakc_12:
	mov	sp, bp
	pop	bp
	ret
L_yakc_8:
	push	bp
	mov	bp, sp
	jmp	L_yakc_9
	ALIGN	2
YKNewTask:
	; >>>>> Line:	54
	; >>>>> void YKNewTask( void (*task)(void), void *taskStack, unsigned char priority){ 
	jmp	L_yakc_14
L_yakc_15:
	; >>>>> Line:	58
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	61
	; >>>>> tmp = YKAvailTCBList; 
	mov	ax, word [YKAvailTCBList]
	mov	word [bp-2], ax
	; >>>>> Line:	62
	; >>>>> YKAvailTCBList = tmp->next; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	mov	word [YKAvailTCBList], ax
	; >>>>> Line:	65
	; >>>>> tmp->priority = priority; 
	mov	al, byte [bp+8]
	xor	ah, ah
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], ax
	; >>>>> Line:	66
	; >>>>> tmp->delay = 0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	69
	; >>>>> if (YKRdyList == 0){ 
	mov	ax, word [YKRdyList]
	test	ax, ax
	jne	L_yakc_16
	; >>>>> Line:	70
	; >>>>> YKRdyList = tmp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	; >>>>> Line:	71
	; >>>>> tmp->next = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	72
	; >>>>> tmp->prev = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	jmp	L_yakc_17
L_yakc_16:
	; >>>>> Line:	75
	; >>>>> tmp2 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	76
	; >>>>> while (tmp2->priority < tmp->priority){ 
	jmp	L_yakc_19
L_yakc_18:
	; >>>>> Line:	77
	; >>>>> tmp2 = tmp2->next; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_19:
	mov	si, word [bp-4]
	add	si, 6
	mov	di, word [bp-2]
	add	di, 6
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_18
L_yakc_20:
	; >>>>> Line:	79
	; >>>>> if (tmp2->prev == 0) 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_21
	; >>>>> Line:	80
	; >>>>> YKRdyList = tmp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_22
L_yakc_21:
	; >>>>> Line:	82
	; >>>>> tmp2->prev->next = tmp; 
	mov	si, word [bp-4]
	add	si, 12
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_22:
	; >>>>> Line:	83
	; >>>>> tmp->prev = tmp2->prev; 
	mov	si, word [bp-4]
	add	si, 12
	mov	di, word [bp-2]
	add	di, 12
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	84
	; >>>>> tmp->next = tmp2; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	85
	; >>>>> tmp2->prev = tmp; 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_17:
	; >>>>> Line:	89
	; >>>>> tmp->stackptr = taskStack; 
	mov	si, word [bp-2]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	90
	; >>>>> tmp->ss = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	93
	; >>>>> tmp->stackptr = tmp->stackptr - 11; 
	mov	si, word [bp-2]
	mov	ax, word [si]
	sub	ax, 22
	mov	word [si], ax
	; >>>>> Line:	94
	; >>>>> *(tmp->stackptr+11) = 0x200; 
	mov	si, word [bp-2]
	mov	si, word [si]
	add	si, 22
	mov	word [si], 512
	; >>>>> Line:	95
	; >>>>> *(tmp->stackptr+10) = 0; 
	mov	si, word [bp-2]
	mov	si, word [si]
	add	si, 20
	mov	word [si], 0
	; >>>>> Line:	96
	; >>>>> *(tmp->stackptr+9) = (int)task; 
	mov	si, word [bp-2]
	mov	si, word [si]
	add	si, 18
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	97
	; >>>>> *(tmp->stackptr+8) = 0; 
	mov	si, word [bp-2]
	mov	si, word [si]
	add	si, 16
	mov	word [si], 0
	; >>>>> Line:	98
	; >>>>> *(tmp->stackptr+7) = 0; 
	mov	si, word [bp-2]
	mov	si, word [si]
	add	si, 14
	mov	word [si], 0
	; >>>>> Line:	99
	; >>>>> *(tmp->stackptr+6) = 0; 
	mov	si, word [bp-2]
	mov	si, word [si]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	100
	; >>>>> *(tmp->stackptr+5) = 0; 
	mov	si, word [bp-2]
	mov	si, word [si]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	101
	; >>>>> *(tmp->stackptr+4) = 0; 
	mov	si, word [bp-2]
	mov	si, word [si]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	102
	; >>>>> *(tmp->stackptr+3) = 0; 
	mov	si, word [bp-2]
	mov	si, word [si]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	103
	; >>>>> *(tmp->stack 
	mov	si, word [bp-2]
	mov	si, word [si]
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	104
	; >>>>> *(tmp->stackptr+1) = 0; 
	mov	si, word [bp-2]
	mov	si, word [si]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	105
	; >>>>> *(tmp->stackptr+0) = 0; 
	mov	si, word [bp-2]
	mov	si, word [si]
	mov	word [si], 0
	; >>>>> Line:	107
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	108
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_14:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_15
	ALIGN	2
YKRun:
	; >>>>> Line:	111
	; >>>>> void YKRun(void){ 
	jmp	L_yakc_24
L_yakc_25:
	; >>>>> Line:	112
	; >>>>> run_flag = 1; 
	mov	byte [run_flag], 1
	; >>>>> Line:	113
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_24:
	push	bp
	mov	bp, sp
	jmp	L_yakc_25
L_yakc_30:
	DB	"EXIT SAVE DISPATCHER",0xA,0xD,0
L_yakc_29:
	DB	"EXIT NONSAVE DISPATCHER",0xA,0xD,0
L_yakc_28:
	DB	"NONSAVE",0xA,0xD,0
L_yakc_27:
	DB	"Entering Scheduler",0xA,0xD,0
	ALIGN	2
YKScheduler:
	; >>>>> Line:	116
	; >>>>> void YKScheduler(int save_flag){ 
	jmp	L_yakc_31
L_yakc_32:
	; >>>>> Line:	122
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	123
	; >>>>> printString("Entering Scheduler\n\r"); 
	mov	ax, L_yakc_27
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	124
	; >>>>> highest_priority_task = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-6], ax
	; >>>>> Line:	125
	; >>>>> currentlyRunning = TKCurrentlyRunning; 
	mov	ax, word [TKCurrentlyRunning]
	mov	word [bp-8], ax
	; >>>>> Line:	127
	; >>>>> if(!run_flag || (TKCurrentlyRunning == highest_priority_task)){ 
	mov	al, byte [run_flag]
	test	al, al
	je	L_yakc_34
	mov	ax, word [bp-6]
	cmp	ax, word [TKCurrentlyRunning]
	jne	L_yakc_33
L_yakc_34:
	; >>>>> Line:	128
	; >>>>> return; 
	jmp	L_yakc_35
L_yakc_33:
	; >>>>> Line:	131
	; >>>>> (); 
	mov	ax, word [YKCtxSwCount]
	inc	ax
	mov	word [YKCtxSwCount], ax
	; >>>>> Line:	132
	; >>>>> TKCurrentlyRunning = highest_priority_task; 
	mov	ax, word [bp-6]
	mov	word [TKCurrentlyRunning], ax
	; >>>>> Line:	133
	; >>>>> if(!save_flag){ 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_36
	; >>>>> Line:	134
	; >>>>> printString("NONSAVE\n\r"); 
	mov	ax, L_yakc_28
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	135
	; >>>>> YKDispatcherNSave(highest_priority_task->stackptr, highest_priority_task->ss); 
	mov	si, word [bp-6]
	add	si, 2
	push	word [si]
	mov	si, word [bp-6]
	push	word [si]
	call	YKDispatcherNSave
	add	sp, 4
	; >>>>> Line:	136
	; >>>>> printString("EXIT NONSAVE DISPATCHER\n\r"); 
	mov	ax, L_yakc_29
	push	ax
	call	printString
	add	sp, 2
	jmp	L_yakc_37
L_yakc_36:
	; >>>>> Line:	139
	; >>>>> printString("SAVE\n\r"); 
	mov	ax, (L_yakc_28+3)
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	140
	; >>>>> YKDispatcherSave(&(currentlyRunning->stackptr),&(currentlyRunning->ss), 
	mov	si, word [bp-6]
	add	si, 2
	push	word [si]
	mov	si, word [bp-6]
	push	word [si]
	mov	ax, word [bp-8]
	add	ax, 2
	push	ax
	push	word [bp-8]
	call	YKDispatcherSave
	add	sp, 8
	; >>>>> Line:	142
	; >>>>> printString("EXIT SAVE DISPATCHER\n\r"); 
	mov	ax, L_yakc_30
	push	ax
	call	printString
	add	sp, 2
L_yakc_37:
	; >>>>> Line:	144
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_35:
	mov	sp, bp
	pop	bp
	ret
L_yakc_31:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_yakc_32
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	155
	; >>>>> void YKDelayTask(unsigned count){ 
	jmp	L_yakc_39
L_yakc_40:
	; >>>>> Line:	157
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	159
	; >>>>> if(count == 0){ 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_41
	; >>>>> Line:	160
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	161
	; >>>>> return; 
	jmp	L_yakc_42
L_yakc_41:
	; >>>>> Line:	165
	; >>>>> ready = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	167
	; >>>>> YKRdyList = ready->next; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	168
	; >>>>> ready->next->prev = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	si, word [si]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	170
	; >>>>> ready->next = YKDelayList; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [YKDelayList]
	mov	word [si], ax
	; >>>>> Line:	171
	; >>>>> YKDelayList = ready; 
	mov	ax, word [bp-2]
	mov	word [YKDelayList], ax
	; >>>>> Line:	172
	; >>>>> ready->prev = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	173
	; >>>>> if(ready->next != 0){ 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_43
	; >>>>> Line:	174
	; >>>>> ready->next->prev=ready; 
	mov	si, word [bp-2]
	add	si, 10
	mov	si, word [si]
	add	si, 12
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_43:
	; >>>>> Line:	176
	; >>>>> ready->delay = count; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	177
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	178
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_42:
	mov	sp, bp
	pop	bp
	ret
L_yakc_39:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_40
L_yakc_45:
	DB	"ENTER ISR",0xA,0xD,0
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	181
	; >>>>> void YKEnterISR(void){ 
	jmp	L_yakc_46
L_yakc_47:
	; >>>>> Line:	182
	; >>>>> YKISRDepth = YKISRDepth + 1; 
	mov	ax, word [YKISRDepth]
	inc	ax
	mov	word [YKISRDepth], ax
	; >>>>> Line:	183
	; >>>>> printString("ENTER ISR\n\r"); 
	mov	ax, L_yakc_45
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_46:
	push	bp
	mov	bp, sp
	jmp	L_yakc_47
L_yakc_49:
	DB	"EXIT ISR",0xA,0xD,0
	ALIGN	2
YKExitISR:
	; >>>>> Line:	186
	; >>>>> void YKExitISR(void){ 
	jmp	L_yakc_50
L_yakc_51:
	; >>>>> Line:	187
	; >>>>> pr 
	mov	ax, L_yakc_49
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	188
	; >>>>> YKISRDepth = YKISRDepth - 1; 
	mov	ax, word [YKISRDepth]
	dec	ax
	mov	word [YKISRDepth], ax
	; >>>>> Line:	189
	; >>>>> if(YKISRDepth == 0) { 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_yakc_52
	; >>>>> Line:	190
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_52:
	mov	sp, bp
	pop	bp
	ret
L_yakc_50:
	push	bp
	mov	bp, sp
	jmp	L_yakc_51
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	201
	; >>>>> void YKTickHandler(void){ 
	jmp	L_yakc_54
L_yakc_55:
	; >>>>> Line:	204
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	205
	; >>>>> YKTickNum = YKTickNum + 1; 
	mov	ax, word [YKTickNum]
	inc	ax
	mov	word [YKTickNum], ax
	; >>>>> Line:	206
	; >>>>> tempDelay = YKDelayList; 
	mov	ax, word [YKDelayList]
	mov	word [bp-2], ax
	; >>>>> Line:	208
	; >>>>> while(tempDelay != 0){ 
	jmp	L_yakc_57
L_yakc_56:
	; >>>>> Line:	209
	; >>>>> tempNext = tempDelay->next; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	210
	; >>>>> tempDelay->delay = tempDelay->delay - 1; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	dec	ax
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], ax
	; >>>>> Line:	211
	; >>>>> if(tempDelay->delay == 0){ 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_59
	; >>>>> Line:	213
	; >>>>> if(tempDelay->prev == 0){ 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_60
	; >>>>> Line:	214
	; >>>>> YKDelayList = tempDelay->next; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	mov	word [YKDelayList], ax
	jmp	L_yakc_61
L_yakc_60:
	; >>>>> Line:	217
	; >>>>> tempDelay->pre 
	mov	si, word [bp-2]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 12
	mov	di, word [di]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_61:
	; >>>>> Line:	219
	; >>>>> if(tempDelay->next != 0){ 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_62
	; >>>>> Line:	220
	; >>>>> tempDelay->next->prev = tempDelay->prev; 
	mov	si, word [bp-2]
	add	si, 12
	mov	di, word [bp-2]
	add	di, 10
	mov	di, word [di]
	add	di, 12
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_62:
	; >>>>> Line:	223
	; >>>>> tempReady = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	224
	; >>>>> while(tempReady->priority < tempDelay->priority){ 
	jmp	L_yakc_64
L_yakc_63:
	; >>>>> Line:	225
	; >>>>> tempReady = tempReady->next; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_64:
	mov	si, word [bp-4]
	add	si, 6
	mov	di, word [bp-2]
	add	di, 6
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_63
L_yakc_65:
	; >>>>> Line:	227
	; >>>>> if(tempReady->prev == 0){ 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_66
	; >>>>> Line:	228
	; >>>>> YKRdyList = tempDelay; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_67
L_yakc_66:
	; >>>>> Line:	231
	; >>>>> tempReady->prev->next = tempDelay; 
	mov	si, word [bp-4]
	add	si, 12
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_67:
	; >>>>> Line:	234
	; >>>>> tempDelay->prev = tempReady->prev; 
	mov	si, word [bp-4]
	add	si, 12
	mov	di, word [bp-2]
	add	di, 12
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	235
	; >>>>> tempDelay->next = tempReady; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	236
	; >>>>> tempReady->prev = tempDelay; 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_59:
	; >>>>> Line:	238
	; >>>>> t 
	mov	ax, word [bp-6]
	mov	word [bp-2], ax
L_yakc_57:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_56
L_yakc_58:
	; >>>>> Line:	240
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_54:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_55
	ALIGN	2
YKCtxSwCount:
	TIMES	2 db 0
YKIdleCount:
	TIMES	2 db 0
YKTickNum:
	TIMES	2 db 0
YKISRDepth:
	TIMES	2 db 0
YKRdyList:
	TIMES	2 db 0
YKDelayList:
	TIMES	2 db 0
YKAvailTCBList:
	TIMES	2 db 0
YKTCBArray:
	TIMES	56 db 0
idleStack:
	TIMES	512 db 0
TKCurrentlyRunning:
	TIMES	2 db 0
