        CPU     8086
        ORG     0h
InterruptVectorTable:
        ; Internal x86 Interrupts:
        dd      0 ; Reserved (Div err)  ; Int 00h
        dd      0 ; Reserved (Step)     ; Int 01h
        dd      0 ; Reserved (NMI)      ; Int 02h
        dd      0 ; Reserved (Break)    ; Int 03h
        dd      0 ; Reserved (Overflow) ; Int 04h
        dd      0                       ; Int 05h
        dd      0                       ; Int 06h
        dd      0                       ; Int 07h
        ; Hardware Interrupts:
        dd      RESET ; Reset               ; Int 08h (IRQ 0)
        dd      TICK ; Tick                ; Int 09h (IRQ 1)
        dd      KEY ; Keyboard            ; Int 0Ah (IRQ 2)
        dd      0 ; Simptris Game Over  ; Int 0Bh (IRQ 3)
        dd      0 ; Simptris New Piece  ; Int 0Ch (IRQ 4)
        dd      0 ; Simptris Received   ; Int 0Dh (IRQ 5)
        dd      0 ; Simptris Touchdown  ; Int 0Eh (IRQ 6)
        dd      0 ; Simptris Clear      ; Int 0Fh (IRQ 7)
        ; Software Interrupts:
        dd      0 ; Reserved (PC BIOS)  ; Int 10h
        dd      0                       ; Int 11h
        dd      0                       ; Int 12h
        dd      0                       ; Int 13h
        dd      0                       ; Int 14h
        dd      0                       ; Int 15h
        dd      0                       ; Int 16h
        dd      0                       ; Int 17h
        dd      0                       ; Int 18h
        dd      0                       ; Int 19h
        dd      0                       ; Int 1Ah
        dd      0                       ; Int 1Bh
        dd      0                       ; Int 1Ch
        dd      0                       ; Int 1Dh
        dd      0                       ; Int 1Eh
        dd      0                       ; Int 1Fh
        dd      0                       ; Int 20h
        dd      0 ; Reserved (DOS)      ; Int 21h
        dd      0 ; Simptris Services   ; Int 22h
        dd      0                       ; Int 23h
        dd      0                       ; Int 24h
        dd      0                       ; Int 25h
        dd      0                       ; Int 26h
        dd      0                       ; Int 27h
        dd      0                       ; Int 28h
        dd      0                       ; Int 29h
        dd      0                       ; Int 2Ah
        dd      0                       ; Int 2Bh
        dd      0                       ; Int 2Ch
        dd      0                       ; Int 2Dh
        dd      0                       ; Int 2Eh
        dd      0                       ; Int 2Fh
KeyBuffer:                              ; Address 0xC0
        dw      0
NewPieceType:                           ; Address 0xC2
        dw      0
NewPieceID:                             ; Address 0xC4
        dw      0
NewPieceOrientation:                    ; Address 0xC6
        dw      0
NewPieceColumn:                         ; Address 0xC8
        dw      0
TouchdownID:                            ; Address 0xCA
	dw	0
ScreenBitMap0:                          ; Address 0xCC
        dw      0
ScreenBitMap1:
        dw      0
ScreenBitMap2:
        dw      0
ScreenBitMap3:
        dw      0
ScreenBitMap4:
        dw      0
ScreenBitMap5:
        dw      0
TIMES   100h-($-$$) db  0               ; Fill up to (but not including) address 100h with 0
	jmp	main
; This file contains support routines for 32-bit on the 8086.
; It is intended for use code generated by the C86 compiler.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SR_asldiv:			; l1 /= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_ldiv
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmod:			; l1 %= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmod
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmul:			; l1 *= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmul
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshl:			; l1 <<= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshl
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshr:			; l1 >>= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshr
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


SR_asuldiv:			; u1 /= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_uldiv
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asilmod:			; u1 %= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ilmod
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulmul:			; u1 *= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulmul
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshl:			; u1 << u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshl
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshr:			; u1 >> u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshr
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


; Main 32-bit routines begin here:

SR_ldiv:	; N_LDIV@
	pop    cx
	push   cs
	push   cx
	; LDIV@
	xor    cx,cx
	jmp    LSR_01
SR_uldiv:	; N_LUDIV@
	pop    cx
	push   cs
	push   cx
	; F_LUDIV@
	mov    cx,0001
	jmp    LSR_01
SR_lmod:	; N_LMOD@
	pop    cx
	push   cs
	push   cx
	; F_LMOD@
	mov    cx,0002
	jmp    LSR_01
SR_ilmod:	; N_LUMOD@
	pop    cx
	push   cs
	push   cx
	; LUMOD@
	mov    cx,0003
LSR_01:
	push   bp
	push   si
	push   di
	mov    bp,sp
	mov    di,cx
	mov    ax,[bp+0Ah]
	mov    dx,[bp+0Ch]
	mov    bx,[bp+0Eh]
	mov    cx,[bp+10h]
	or     cx,cx
	jne    LSR_02
	or     dx,dx
	je     LSR_10
	or     bx,bx
	je     LSR_10
LSR_02:
	test   di,0001
	jne    LSR_04
	or     dx,dx
	jns    LSR_03
	neg    dx
	neg    ax
	sbb    dx,0000
	or     di,000Ch
LSR_03:
	or     cx,cx
	jns    LSR_04
	neg    cx
	neg    bx
	sbb    cx,0000
	xor    di,0004
LSR_04:
	mov    bp,cx
	mov    cx,0020h
	push   di
	xor    di,di
	xor    si,si
LSR_05:
	shl    ax,1
	rcl    dx,1
	rcl    si,1
	rcl    di,1
	cmp    di,bp
	jb     LSR_07
	ja     LSR_06
	cmp    si,bx
	jb     LSR_07
LSR_06:
	sub    si,bx
	sbb    di,bp
	inc    ax
LSR_07:
	loop   LSR_05
	pop    bx
	test   bx,0002
	je     LSR_08
	mov    ax,si
	mov    dx,di
	shr    bx,1
LSR_08:
	test   bx,0004h
	je     LSR_09
	neg    dx
	neg    ax
	sbb    dx,0000
LSR_09:
	pop    di
	pop    si
	pop    bp
	retf   0008
LSR_10:
	div    bx
	test   di,0002
	je     LSR_11
	xchg   dx,ax
LSR_11:
	xor    dx,dx
	jmp    LSR_09
SR_lshl:	; N_LXLSH@
SR_ulshl:
	; r = a << b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

	mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXLSH@
	cmp    cl,10h
	jnb    LSR_12
	mov    bx,ax
	shl    ax,cl
	shl    dx,cl
	neg    cl
	add    cl,10h
	shr    bx,cl
	or     dx,bx
	pop    cx
	pop    bp
	retf
LSR_12:
	sub    cl,10h
	xchg   dx,ax
	xor    ax,ax
	shl    dx,cl
	pop    cx
	pop    bp
	retf
SR_lshr:	; N_LXRSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXRSH@
	cmp    cl,10h
	jnb    LSR_13
	mov    bx,dx
	shr    ax,cl
	sar    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_13:
	sub    cl,10h
	xchg   dx,ax
	cwd
	sar    ax,cl
	pop    cx
	pop    bp
	retf
SR_ulshr:	; N_LXURSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXURSH@
	cmp    cl,10h
	jnb    LSR_14
	mov    bx,dx
	shr    ax,cl
	shr    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_14:
	sub    cl,10h
	xchg   dx,ax
	xor    dx,dx
	shr    ax,cl
	pop    cx
	pop    bp
	retf
SR_lmul:	; N_LXMUL@
SR_ulmul:
	; r = a * b
	push   bp
	push   si
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx
	push   bx

        mov    bx, [bp+6]	; pop loword(a)
	mov    cx, [bp+8]	; pop hiword(a)
	mov    ax, [bp+10]	; pop loword(b)
	mov    dx, [bp+12]	; pop hiword(b)
	
	xchg   si,ax
	xchg   dx,ax
	test   ax,ax
	je     LSR_15
	mul    bx
LSR_15:
	jcxz   LSR_16
	xchg   cx,ax
	mul    si
	add    ax,cx
LSR_16:
	xchg   si,ax
	mul    bx
	add    dx,si
	pop    bx
	pop    cx
	pop    si
	pop    bp
	ret

; Generated by c86 (BYU-NASM) 5.1 (beta) from clib.c
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
new_line:
	db	13,10,36
	ALIGN	2
signalEOI:
	jmp	L_clib_1
L_clib_2:
	mov	al, 0x20
	out	0x20, al
	mov	sp, bp
	pop	bp
	ret
L_clib_1:
	push	bp
	mov	bp, sp
	jmp	L_clib_2
	ALIGN	2
exit:
	jmp	L_clib_4
L_clib_5:
	mov	ah, 4Ch
	mov	al, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_4:
	push	bp
	mov	bp, sp
	jmp	L_clib_5
	ALIGN	2
print:
	jmp	L_clib_7
L_clib_8:
	mov	ah, 40h
	mov	bx, 1
	mov	cx, [bp+6]
	mov	dx, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_7:
	push	bp
	mov	bp, sp
	jmp	L_clib_8
	ALIGN	2
printChar:
	jmp	L_clib_10
L_clib_11:
	mov	ah, 2
	mov	dl, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_10:
	push	bp
	mov	bp, sp
	jmp	L_clib_11
	ALIGN	2
printNewLine:
	jmp	L_clib_13
L_clib_14:
	mov	ah, 9
	mov	dx, new_line
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_13:
	push	bp
	mov	bp, sp
	jmp	L_clib_14
	ALIGN	2
printString:
	jmp	L_clib_16
L_clib_17:
	xor	si,si
	mov	bx, [bp+4]
	jmp	printString2
	printString1:
	inc	si
	printString2:
	cmp	byte [bx+si],0
	jne	printString1
	mov	dx, bx
	mov	cx, si
	mov	ah, 40h
	mov	bx, 1
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_16:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_clib_17
	ALIGN	2
printInt:
	jmp	L_clib_19
L_clib_20:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	cmp	word [bp+4], 0
	jge	L_clib_21
	mov	byte [bp-10], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	neg	ax
	mov	word [bp+4], ax
L_clib_21:
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_22
	mov	word [bp-4], 1
	jmp	L_clib_23
L_clib_22:
	jmp	L_clib_25
L_clib_24:
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
L_clib_25:
	mov	ax, word [bp+4]
	cwd
	idiv	word [bp-4]
	test	ax, ax
	je	L_clib_24
L_clib_26:
L_clib_23:
	jmp	L_clib_28
L_clib_27:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	ax, dx
	mov	word [bp+4], ax
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
	mov	ax, word [bp-4]
	mov	word [bp-4], ax
L_clib_28:
	cmp	word [bp-4], 0
	jg	L_clib_27
L_clib_29:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_19:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_20
	ALIGN	2
printLong:
	jmp	L_clib_31
L_clib_32:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	cmp	word [bp+6], 0
	jg	L_clib_33
	jl	L_clib_34
	cmp	word [bp+4], 0
	jae	L_clib_33
L_clib_34:
	mov	byte [bp-17], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	neg	ax
	adc	dx, 0
	neg	dx
	mov	word [bp+4], ax
	mov	word [bp+6], dx
L_clib_33:
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_35
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_36
L_clib_35:
	jmp	L_clib_38
L_clib_37:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_38:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_ldiv
	or	dx, ax
	je	L_clib_37
L_clib_39:
L_clib_36:
	jmp	L_clib_41
L_clib_40:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_lmod
	mov	word [bp+4], ax
	mov	word [bp+6], dx
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_41:
	cmp	word [bp-4], 0
	jg	L_clib_40
	jne	L_clib_43
	cmp	word [bp-6], 0
	ja	L_clib_40
L_clib_43:
L_clib_42:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_31:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_32
	ALIGN	2
printUInt:
	jmp	L_clib_45
L_clib_46:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_47
	mov	word [bp-4], 1
	jmp	L_clib_48
L_clib_47:
	jmp	L_clib_50
L_clib_49:
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_50:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	test	ax, ax
	je	L_clib_49
L_clib_51:
L_clib_48:
	jmp	L_clib_53
L_clib_52:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	word [bp+4], dx
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_53:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_clib_52
L_clib_54:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_45:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_46
	ALIGN	2
printULong:
	jmp	L_clib_56
L_clib_57:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_58
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_59
L_clib_58:
	jmp	L_clib_61
L_clib_60:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_61:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	or	dx, ax
	je	L_clib_60
L_clib_62:
L_clib_59:
	jmp	L_clib_64
L_clib_63:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	lea	ax, [bp+4]
	push	ax
	call	SR_asilmod
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_64:
	mov	ax, word [bp-6]
	mov	dx, word [bp-4]
	or	dx, ax
	jne	L_clib_63
L_clib_65:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_56:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_57
	ALIGN	2
printByte:
	jmp	L_clib_67
L_clib_68:
	mov	al, byte [bp+4]
	cbw
	mov	cx, 4
	sar	ax, cl
	and	ax, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_69
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_70
L_clib_69:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_70:
	mov	byte [bp-3], al
	mov	al, byte [bp+4]
	and	al, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_71
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_72
L_clib_71:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_72:
	mov	byte [bp-2], al
	mov	ax, 2
	push	ax
	lea	ax, [bp-3]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_67:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_clib_68
	ALIGN	2
printWord:
	jmp	L_clib_74
L_clib_75:
	mov	word [bp-2], 3
	jmp	L_clib_77
L_clib_76:
	mov	ax, word [bp+4]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_80
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_81
L_clib_80:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_81:
	mov	si, word [bp-2]
	lea	dx, [bp-7]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp+4]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp+4], ax
L_clib_79:
	dec	word [bp-2]
L_clib_77:
	cmp	word [bp-2], 0
	jge	L_clib_76
L_clib_78:
	mov	ax, 4
	push	ax
	lea	ax, [bp-7]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_74:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_clib_75
	ALIGN	2
printDWord:
	jmp	L_clib_83
L_clib_84:
	lea	ax, [bp+4]
	mov	si, ax
	mov	ax, word [si]
	mov	word [bp-6], ax
	lea	ax, [bp+4]
	mov	si, ax
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-8], ax
	mov	word [bp-2], 3
	jmp	L_clib_86
L_clib_85:
	mov	ax, word [bp-6]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_89
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_90
L_clib_89:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_90:
	mov	dx, word [bp-2]
	add	dx, 4
	mov	si, dx
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-6]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_91
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_92
L_clib_91:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_92:
	mov	si, word [bp-2]
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-8]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-8], ax
L_clib_88:
	dec	word [bp-2]
L_clib_86:
	cmp	word [bp-2], 0
	jge	L_clib_85
L_clib_87:
	mov	ax, 8
	push	ax
	lea	ax, [bp-16]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_83:
	push	bp
	mov	bp, sp
	sub	sp, 16
	jmp	L_clib_84
; ISR file
;1 Save the context of whatever was running by pushing all registers onto the stack, except SP, SS, CS, IP, and the flags.
;2 Enable interrupts to allow higher priority IRQs to interrupt.
;3 Run the interrupt handler, which is usually a C function that does the work for this interrupt.
;4 Disable interrupts.
;5 Send the EOI command to the PIC, informing it that the handler is finished.
;6 Restore the context of what was running before the interrupt occurred by popping the registers saved in step 1 off the stack.
;7 Execute the iret instruction. This restores in one atomic operation the values for IP, CS, and the flags, which were automatically -
;	; - saved on the stack by the processor when the interrupt occurred. This effectively restores execution to the point where the interrupt occurred.

RESET:
	push ax
	push bx
	push cx
	push dx
	push bp
	push si
	push di
	push ds
	push es

	call YKEnterISR

	sti
	call c_reset_handler
	cli

	mov al, 0x20        ; send eoi to pic
	out 0x20, al        ; send eoi to pic

	call YKExitISR

	pop es
	pop ds
	pop di
	pop si
	pop bp
	pop dx
	pop cx
	pop bx
	pop ax

	iret


KEY:

	push ax
	push bx
	push cx
	push dx
	push bp
	push si
	push di
	push ds
	push es

  mov ax, [YKISRDepth]          ;save the depth counter
	cmp ax, 0                     ; check if the depth is zero, if it is save the SP of the task we are interupting
	jnz key_not_lowest_interrupt  ; skip saving the stack because we are not interupting that task

	mov bx, [YKRdyList] ; save the sp
	mov [bx], sp

key_not_lowest_interrupt:
	call YKEnterISR

	sti                 ; enable interrupts for higher priority IRQs ?
	call c_key_handler  ; run
	cli                 ; disable interrupts ?

	mov al, 0x20        ; send eoi to pic
	out 0x20, al        ; send eoi to pic

	call YKExitISR

	;restore reg
	pop es
	pop ds
	pop di
	pop si
	pop bp
	pop dx
	pop cx
	pop bx
	pop ax

	iret

TICK:
	; save reg
	push ax
	push bx
	push cx
	push dx
	push bp
	push si
	push di
	push ds
	push es

  mov ax, [YKISRDepth] ;save the depth counter
	cmp ax, 0            ; check if the depth is zero, if it is save the SP of the task we are interupting
	jnz not_lowest_interrupt


	mov bx, [YKRdyList] ; save SP of interupted task
	mov [bx], sp

not_lowest_interrupt:
	call YKEnterISR

	sti                 ; enable interrupts for higher priority IRQs ?
	call c_tick_handler ; run interrupt handler ? I think this is the c file
	cli                 ; disable interrupts

	mov al, 0x20        ; send eoi to pic
	out 0x20, al        ; send eoi to pic

	call YKExitISR

	;restore
	pop es
	pop ds
	pop di
	pop si
	pop bp
	pop dx
	pop cx
	pop bx
	pop ax

	iret
; Generated by c86 (BYU-NASM) 5.1 (beta) from myinth.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_myinth_1:
	DB	0xA,"RESET PROGRAM",0xA,0
	ALIGN	2
c_reset_handler:
	; >>>>> Line:	13
	; >>>>> void c_reset_handler(){ 
	jmp	L_myinth_2
L_myinth_3:
	; >>>>> Line:	14
	; >>>>> printString("\nRESET PROGRAM\n"); 
	mov	ax, L_myinth_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	15
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_2:
	push	bp
	mov	bp, sp
	jmp	L_myinth_3
	ALIGN	2
L_myinth_5:
	DW	0
L_myinth_6:
	DB	0xA,"TICK ",0
	ALIGN	2
c_tick_handler:
	; >>>>> Line:	18
	; >>>>> void c_tick_handler(){ 
	jmp	L_myinth_7
L_myinth_8:
	; >>>>> Line:	20
	; >>>>> printString("\nTICK "); 
	mov	ax, L_myinth_6
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	21
	; >>>>> printInt(tick++); 
	mov	ax, word [L_myinth_5]
	inc	word [L_myinth_5]
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	22
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	24
	; >>>>> YKTickHandler(); 
	call	YKTickHandler
	mov	sp, bp
	pop	bp
	ret
L_myinth_7:
	push	bp
	mov	bp, sp
	jmp	L_myinth_8
L_myinth_14:
	DB	") IGNORED*********************************************",0xD,0xA,0
L_myinth_13:
	DB	0xD,0xA,"KEYPRESS (",0
L_myinth_12:
	DB	0xD,0xA," P KEY PRESSED",0xD,0xA,0
L_myinth_11:
	DB	0xD,0xA,"DELAY COMPLETE$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",0xD,0xA,0
L_myinth_10:
	DB	0xD,0xA,"DELAY KEY PRESSED",0xD,0xA,0
	ALIGN	2
c_key_handler:
	; >>>>> Line:	27
	; >>>>> void c_key_handler(){ 
	jmp	L_myinth_15
L_myinth_16:
	; >>>>> Line:	29
	; >>>>> if (c == 'd'){ 
	mov	al, byte [KeyBuffer]
	mov	byte [bp-1], al
	; >>>>> Line:	29
	; >>>>> if (c == 'd'){ 
	cmp	byte [bp-1], 100
	jne	L_myinth_17
	; >>>>> Line:	30
	; >>>>> printString("\r\nDELAY KEY PRESSED\r\n"); 
	mov	ax, L_myinth_10
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	31
	; >>>>> delay 
	call	delay
	; >>>>> Line:	32
	; >>>>> printString("\r\nDELAY COMPLETE$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\r\n"); 
	mov	ax, L_myinth_11
	push	ax
	call	printString
	add	sp, 2
	jmp	L_myinth_18
L_myinth_17:
	; >>>>> Line:	34
	; >>>>> else if(c == 'p'){ 
	cmp	byte [bp-1], 112
	jne	L_myinth_19
	; >>>>> Line:	35
	; >>>>> printString("\r\n P KEY PRESSED\r\n"); 
	mov	ax, L_myinth_12
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	36
	; >>>>> YKSemPost(NSemPtr); 
	push	word [NSemPtr]
	call	YKSemPost
	add	sp, 2
	jmp	L_myinth_20
L_myinth_19:
	; >>>>> Line:	39
	; >>>>> printString("\r\nKEYPRESS ("); 
	mov	ax, L_myinth_13
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	40
	; >>>>> printChar(c); 
	push	word [bp-1]
	call	printChar
	add	sp, 2
	; >>>>> Line:	41
	; >>>>> printString(") IGNORED*********************************************\r\n"); 
	mov	ax, L_myinth_14
	push	ax
	call	printString
	add	sp, 2
L_myinth_20:
L_myinth_18:
	mov	sp, bp
	pop	bp
	ret
L_myinth_15:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_myinth_16
	ALIGN	2
delay:
	; >>>>> Line:	45
	; >>>>> void delay(){ 
	jmp	L_myinth_22
L_myinth_23:
	; >>>>> Line:	47
	; >>>>> for(i = 0; i < 5000; i++){} 
	mov	word [bp-2], 0
	; >>>>> Line:	47
	; >>>>> for(i = 0; i < 5000; i++){} 
	mov	word [bp-2], 0
	jmp	L_myinth_25
L_myinth_24:
L_myinth_27:
	; >>>>> Line:	47
	; >>>>> for(i = 0; i < 5000; i++){} 
	inc	word [bp-2]
L_myinth_25:
	cmp	word [bp-2], 5000
	jl	L_myinth_24
L_myinth_26:
	mov	sp, bp
	pop	bp
	ret
L_myinth_22:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_myinth_23
L_myinth_29:
	DB	0xD,0xA,"DEBUGGER",0xD,0xA,0
	ALIGN	2
print_debug:
	; >>>>> Line:	50
	; >>>>> void print_debug(){ 
	jmp	L_myinth_30
L_myinth_31:
	; >>>>> Line:	51
	; >>>>> printString("\r\nDEBUGGER\r\n"); 
	mov	ax, L_myinth_29
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_30:
	push	bp
	mov	bp, sp
	jmp	L_myinth_31
; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
run_flag:
	DB	0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	27
	; >>>>> void YKInitialize(void){ 
	jmp	L_yakc_1
L_yakc_2:
	; >>>>> Line:	29
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	30
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	31
	; >>>>> TKCurrentlyRunning = 0; 
	mov	word [TKCurrentlyRunning], 0
	; >>>>> Line:	32
	; >>>>> YKISRDepth = 0; 
	mov	word [YKISRDepth], 0
	; >>>>> Line:	36
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	39
	; >>>>> YKAvailTCBList = &(YKTCBArray[0]); 
	mov	word [YKAvailTCBList], YKTCBArray
	; >>>>> Line:	41
	; >>>>> for (i = 0; i < 9; i++) 
	mov	word [bp-2], 0
	jmp	L_yakc_4
L_yakc_3:
	; >>>>> Line:	42
	; >>>>> YKTCBArray[i].next = &(YKTCBArray[i+1]); 
	mov	ax, word [bp-2]
	inc	ax
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	push	ax
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	mov	dx, ax
	add	dx, YKTCBArray
	mov	si, dx
	add	si, 8
	pop	ax
	mov	word [si], ax
L_yakc_6:
	inc	word [bp-2]
L_yakc_4:
	cmp	word [bp-2], 9
	jl	L_yakc_3
L_yakc_5:
	; >>>>> Line:	43
	; >>>>> YKTCBArray[9].next = 0; 
	mov	word [(134+YKTCBArray)], 0
	; >>>>> Line:	45
	; >>>>> for (i = 0; i < 19; i++){ 
	mov	word [bp-2], 0
	jmp	L_yakc_8
L_yakc_7:
	; >>>>> Line:	46
	; >>>>> YKSemArray[i].val = -10; 
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	mov	si, ax
	add	si, YKSemArray
	mov	word [si], -10
	; >>>>> Line:	47
	; >>>>> YKSemArray[i].active = 0; 
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, YKSemArray
	mov	si, ax
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	48
	; >>>>> YKSemArray[i].id = i; 
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, YKSemArray
	mov	si, ax
	add	si, 4
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_10:
	inc	word [bp-2]
L_yakc_8:
	cmp	word [bp-2], 19
	jl	L_yakc_7
L_yakc_9:
	; >>>>> Line:	51
	; >>>>> YKNewTask(YKIdleTask, (void*)&idleStack[256], 100); 
	mov	al, 100
	push	ax
	mov	ax, (idleStack+512)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	sp, bp
	pop	bp
	ret
L_yakc_1:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_2
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	54
	; >>>>> void YKIdleTask(void){ 
	jmp	L_yakc_12
L_yakc_13:
	; >>>>> Line:	55
	; >>>>> while(1){ 
	jmp	L_yakc_15
L_yakc_14:
	; >>>>> Line:	56
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	57
	; >>>>> YKIdleCount=YKIdleCount+1; 
	mov	ax, word [YKIdleCount]
	inc	ax
	mov	word [YKIdleCount], ax
	; >>>>> Line:	58
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_15:
	jmp	L_yakc_14
L_yakc_16:
	mov	sp, bp
	pop	bp
	ret
L_yakc_12:
	push	bp
	mov	bp, sp
	jmp	L_yakc_13
	ALIGN	2
YKNewTask:
	; >>>>> Line:	62
	; >>>>> else 
	jmp	L_yakc_18
L_yakc_19:
	; >>>>> Line:	66
	; >>>>> taskStack = ((int *)taskStack) - 1; 
	mov	ax, word [bp+6]
	sub	ax, 2
	mov	word [bp+6], ax
	; >>>>> Line:	69
	; >>>>> tmp = YKAvailTCBList; 
	mov	ax, word [YKAvailTCBList]
	mov	word [bp-2], ax
	; >>>>> Line:	70
	; >>>>> YKAvailTCBList = tmp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKAvailTCBList], ax
	; >>>>> Line:	73
	; >>>>> tmp->priority = priority; 
	mov	al, byte [bp+8]
	xor	ah, ah
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], ax
	; >>>>> Line:	74
	; >>>>> tmp->delay = 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	76
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	79
	; >>>>> if (YKRdyList == 0){ 
	mov	ax, word [YKRdyList]
	test	ax, ax
	jne	L_yakc_20
	; >>>>> Line:	80
	; >>>>> YKRdyList = tmp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	; >>>>> Line:	81
	; >>>>> tmp->next = 0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	82
	; >>>>> tmp->prev = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	jmp	L_yakc_21
L_yakc_20:
	; >>>>> Line:	85
	; >>>>> tmp2 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	86
	; >>>>> while (tmp2->priority < tmp->priority){ 
	jmp	L_yakc_23
L_yakc_22:
	; >>>>> Line:	87
	; >>>>> tmp2 = tmp2->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_23:
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_22
L_yakc_24:
	; >>>>> Line:	89
	; >>>>> if (tmp2->prev == 0) 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_25
	; >>>>> Line:	90
	; >>>>> YKRdyList = tmp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_26
L_yakc_25:
	; >>>>> Line:	92
	; >>>>> tmp2->prev->next = tmp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_26:
	; >>>>> Line:	93
	; >>>>> tmp->prev = tmp2->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	94
	; >>>>> le 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	95
	; >>>>> tmp2->prev = tmp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_21:
	; >>>>> Line:	99
	; >>>>> tmp->stackptr = taskStack; 
	mov	si, word [bp-2]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	102
	; >>>>> tmp->stackptr = tmp->stackptr - 11; 
	mov	si, word [bp-2]
	mov	ax, word [si]
	sub	ax, 22
	mov	word [si], ax
	; >>>>> Line:	103
	; >>>>> for(i=11; i>=0;i--){ 
	mov	word [bp-6], 11
	jmp	L_yakc_28
L_yakc_27:
	; >>>>> Line:	104
	; >>>>> if(i == 11){ 
	cmp	word [bp-6], 11
	jne	L_yakc_31
	; >>>>> Line:	105
	; >>>>> *(tmp->stackptr+i) = 0x200; 
	mov	ax, word [bp-6]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp-2]
	add	si, word [di]
	mov	word [si], 512
	jmp	L_yakc_32
L_yakc_31:
	; >>>>> Line:	107
	; >>>>> else if(i == 10){ 
	cmp	word [bp-6], 10
	jne	L_yakc_33
	; >>>>> Line:	108
	; >>>>> *(tmp->stackptr+i) = 0; 
	mov	ax, word [bp-6]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp-2]
	add	si, word [di]
	mov	word [si], 0
	jmp	L_yakc_34
L_yakc_33:
	; >>>>> Line:	110
	; >>>>> else if(i == 9){ 
	cmp	word [bp-6], 9
	jne	L_yakc_35
	; >>>>> Line:	111
	; >>>>> *(tmp->stackptr+i) = (int)task; 
	mov	ax, word [bp-6]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp-2]
	add	si, word [di]
	mov	ax, word [bp+4]
	mov	word [si], ax
	jmp	L_yakc_36
L_yakc_35:
	; >>>>> Line:	114
	; >>>>> *(tmp->stackptr+i) = 0; 
	mov	ax, word [bp-6]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp-2]
	add	si, word [di]
	mov	word [si], 0
L_yakc_36:
L_yakc_34:
L_yakc_32:
L_yakc_30:
	dec	word [bp-6]
L_yakc_28:
	cmp	word [bp-6], 0
	jge	L_yakc_27
L_yakc_29:
	; >>>>> Line:	119
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_18:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_19
L_yakc_38:
	DB	"Start Run and call scheduler",0xA,0
	ALIGN	2
YKRun:
	; >>>>> Line:	123
	; >>>>> void YKRun(void){ 
	jmp	L_yakc_39
L_yakc_40:
	; >>>>> Line:	124
	; >>>>> printString("Start Run and call scheduler\n"); 
	mov	ax, L_yakc_38
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	125
	; >>>>> run_flag = 1; 
	mov	byte [run_flag], 1
	; >>>>> Line:	126
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_39:
	push	bp
	mov	bp, sp
	jmp	L_yakc_40
	ALIGN	2
YKScheduler:
	; >>>>> Line:	129
	; >>>>> ->stackptr); 
	jmp	L_yakc_42
L_yakc_43:
	; >>>>> Line:	137
	; >>>>> highest_priority_task = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	138
	; >>>>> currentlyRunning = TKCurrentlyRunning; 
	mov	ax, word [TKCurrentlyRunning]
	mov	word [bp-4], ax
	; >>>>> Line:	140
	; >>>>> if(!run_flag || (TKCurrentlyRunning == highest_priority_task)){ 
	mov	al, byte [run_flag]
	test	al, al
	je	L_yakc_45
	mov	ax, word [bp-2]
	cmp	ax, word [TKCurrentlyRunning]
	jne	L_yakc_44
L_yakc_45:
	; >>>>> Line:	141
	; >>>>> return; 
	jmp	L_yakc_46
L_yakc_44:
	; >>>>> Line:	144
	; >>>>> YKCtxSwCount = YKCtxSwCount + 1; 
	mov	ax, word [YKCtxSwCount]
	inc	ax
	mov	word [YKCtxSwCount], ax
	; >>>>> Line:	145
	; >>>>> TKCurrentlyRunning = highest_priority_task; 
	mov	ax, word [bp-2]
	mov	word [TKCurrentlyRunning], ax
	; >>>>> Line:	146
	; >>>>> if(!save_flag){ 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_47
	; >>>>> Line:	148
	; >>>>> YKDispatcherNSave(highest_priority_task->stackptr); 
	mov	si, word [bp-2]
	push	word [si]
	call	YKDispatcherNSave
	add	sp, 2
	jmp	L_yakc_48
L_yakc_47:
	; >>>>> Line:	153
	; >>>>> YKDispatcherSave(&(currentlyRunning->stackptr), highest_priority_task->stackptr); 
	mov	si, word [bp-2]
	push	word [si]
	push	word [bp-4]
	call	YKDispatcherSave
	add	sp, 4
L_yakc_48:
L_yakc_46:
	mov	sp, bp
	pop	bp
	ret
L_yakc_42:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_43
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	159
	; >>>>> voi 
	jmp	L_yakc_50
L_yakc_51:
	; >>>>> Line:	161
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	163
	; >>>>> if(count == 0){ 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_52
	; >>>>> Line:	164
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	165
	; >>>>> return; 
	jmp	L_yakc_53
L_yakc_52:
	; >>>>> Line:	169
	; >>>>> ready = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	171
	; >>>>> YKRdyList = ready->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	172
	; >>>>> ready->next->prev = 0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	174
	; >>>>> ready->next = YKDelayList; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [YKDelayList]
	mov	word [si], ax
	; >>>>> Line:	175
	; >>>>> YKDelayList = ready; 
	mov	ax, word [bp-2]
	mov	word [YKDelayList], ax
	; >>>>> Line:	176
	; >>>>> ready->prev = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	177
	; >>>>> if(ready->next != 0){ 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_54
	; >>>>> Line:	178
	; >>>>> ready->next->prev=ready; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_54:
	; >>>>> Line:	180
	; >>>>> ready->delay = count; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	181
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	182
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_53:
	mov	sp, bp
	pop	bp
	ret
L_yakc_50:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_51
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	186
	; >>>>> void YKEnterISR(void){ 
	jmp	L_yakc_56
L_yakc_57:
	; >>>>> Line:	187
	; >>>>> YKISRDepth = YKISRDepth + 1; 
	mov	ax, word [YKISRDepth]
	inc	ax
	mov	word [YKISRDepth], ax
	mov	sp, bp
	pop	bp
	ret
L_yakc_56:
	push	bp
	mov	bp, sp
	jmp	L_yakc_57
	ALIGN	2
YKExitISR:
	; >>>>> Line:	191
	; >>>>> void YKExitISR(void){ 
	jmp	L_yakc_59
L_yakc_60:
	; >>>>> Line:	192
	; >>>>> YKISRDepth = YKISRDepth - 1; 
	mov	ax, word [YKISRDepth]
	dec	ax
	mov	word [YKISRDepth], ax
	; >>>>> Line:	194
	; >>>>> if(YKISRDep 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_yakc_61
	; >>>>> Line:	195
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_61:
	mov	sp, bp
	pop	bp
	ret
L_yakc_59:
	push	bp
	mov	bp, sp
	jmp	L_yakc_60
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	199
	; >>>>> void YKTickHandler(void){ 
	jmp	L_yakc_63
L_yakc_64:
	; >>>>> Line:	202
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	203
	; >>>>> YKTickNum = YKTickNum + 1; 
	mov	ax, word [YKTickNum]
	inc	ax
	mov	word [YKTickNum], ax
	; >>>>> Line:	204
	; >>>>> tempDelay = YKDelayList; 
	mov	ax, word [YKDelayList]
	mov	word [bp-2], ax
	; >>>>> Line:	206
	; >>>>> while(tempDelay != 0){ 
	jmp	L_yakc_66
L_yakc_65:
	; >>>>> Line:	207
	; >>>>> tempNext = tempDelay->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	208
	; >>>>> tempDelay->delay = tempDelay->delay - 1; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	dec	ax
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], ax
	; >>>>> Line:	209
	; >>>>> if(tempDelay->delay <= 0){ 
	mov	si, word [bp-2]
	add	si, 6
	cmp	word [si], 0
	jg	L_yakc_68
	; >>>>> Line:	211
	; >>>>> if(tempDelay->prev == 0){ 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_69
	; >>>>> Line:	212
	; >>>>> YKDelayList = tempDelay->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKDelayList], ax
	jmp	L_yakc_70
L_yakc_69:
	; >>>>> Line:	215
	; >>>>> tempDelay->prev->next = tempDelay->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp-2]
	add	di, 10
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_70:
	; >>>>> Line:	217
	; >>>>> if(tempDelay->next != 0){ 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_71
	; >>>>> Line:	218
	; >>>>> t initialValue){ 
	mov	si, word [bp-2]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 8
	mov	di, word [di]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_71:
	; >>>>> Line:	221
	; >>>>> tempReady = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	222
	; >>>>> while(tempReady->priority < tempDelay->priority){ 
	jmp	L_yakc_73
L_yakc_72:
	; >>>>> Line:	223
	; >>>>> tempReady = tempReady->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_73:
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_72
L_yakc_74:
	; >>>>> Line:	225
	; >>>>> if(tempReady->prev == 0){ 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_75
	; >>>>> Line:	226
	; >>>>> YKRdyList = tempDelay; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_76
L_yakc_75:
	; >>>>> Line:	229
	; >>>>> tempReady->prev->next = tempDelay; 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_76:
	; >>>>> Line:	232
	; >>>>> tempDelay->prev = tempReady->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	233
	; >>>>> tempDelay->next = tempReady; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	234
	; >>>>> tempReady->prev = tempDelay; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_68:
	; >>>>> Line:	236
	; >>>>> tempDelay = tempNext; 
	mov	ax, word [bp-6]
	mov	word [bp-2], ax
L_yakc_66:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_65
L_yakc_67:
	; >>>>> Line:	238
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_63:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_64
	ALIGN	2
YKSemCreate:
	; >>>>> Line:	241
	; >>>>> YKSEM* YKSemCreate(int initialValue){ 
	jmp	L_yakc_78
L_yakc_79:
	; >>>>> Line:	263
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	264
	; >>>>> i = 0; 
	mov	word [bp-2], 0
	; >>>>> Line:	265
	; >>>>> while(YKSemArray[i].active){ 
	jmp	L_yakc_81
L_yakc_80:
	; >>>>> Line:	266
	; >>>>> i = i+1; 
	mov	ax, word [bp-2]
	inc	ax
	mov	word [bp-2], ax
L_yakc_81:
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, YKSemArray
	mov	si, ax
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_80
L_yakc_82:
	; >>>>> Line:	270
	; >>>>> YKSemArray[i].active = 1; 
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, YKSemArray
	mov	si, ax
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	271
	; >>>>> YKSemArray[i].val = initialValue; 
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	mov	si, ax
	add	si, YKSemArray
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	272
	; >>>>> YKSemArray[i].id = i; 
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, YKSemArray
	mov	si, ax
	add	si, 4
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	274
	; >>>>> return &(YKSemArray[i]); 
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, YKSemArray
L_yakc_83:
	mov	sp, bp
	pop	bp
	ret
L_yakc_78:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_79
	ALIGN	2
YKSemPend:
	; >>>>> Line:	284
	; >>>>> void YKSemPend(YKSEM *semaphore){ 
	jmp	L_yakc_85
L_yakc_86:
	; >>>>> Line:	331
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	332
	; >>>>> semaphore->val = semaphore->val - 1; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	dec	ax
	mov	word [si], ax
	; >>>>> Line:	333
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	335
	; >>>>> if (semaphore->val >= 0){ return; } 
	mov	si, word [bp+4]
	cmp	word [si], 0
	jl	L_yakc_87
	; >>>>> Line:	335
	; >>>>> if (semaphore->val >= 0){ return; } 
	jmp	L_yakc_88
L_yakc_87:
	; >>>>> Line:	337
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	338
	; >>>>> readyTask = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	339
	; >>>>> YKRdyList = readyTask->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	340
	; >>>>> readyTask->next->pre 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	341
	; >>>>> readyTask->next = YKSemWaitList; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [YKSemWaitList]
	mov	word [si], ax
	; >>>>> Line:	342
	; >>>>> YKSemWaitList = readyTask; 
	mov	ax, word [bp-2]
	mov	word [YKSemWaitList], ax
	; >>>>> Line:	343
	; >>>>> readyTask->prev = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	345
	; >>>>> if(readyTask->next != 0){ 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_89
	; >>>>> Line:	346
	; >>>>> readyTask->next->prev = readyTask; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_89:
	; >>>>> Line:	349
	; >>>>> readyTask->semWait = semaphore; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	351
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	352
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_88:
	mov	sp, bp
	pop	bp
	ret
L_yakc_85:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_86
	ALIGN	2
YKSemPost:
	; >>>>> Line:	366
	; >>>>> void YKSemPost(YKSEM *semaphore){ 
	jmp	L_yakc_91
L_yakc_92:
	; >>>>> Line:	392
	; >>>>> unSuspTask = 0; 
	mov	word [bp-4], 0
	; >>>>> Line:	393
	; >>>>> semWaiting = YKSemWaitList; 
	mov	ax, word [YKSemWaitList]
	mov	word [bp-2], ax
	; >>>>> Line:	395
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	396
	; >>>>> semaphore->val = semaphore->val + 1; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	inc	ax
	mov	word [si], ax
	; >>>>> Line:	399
	; >>>>> while(semWaiting != 0){ 
	jmp	L_yakc_94
L_yakc_93:
	; >>>>> Line:	401
	; >>>>> if(semWaiting->semWait  
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [bp+4]
	cmp	ax, word [si]
	jne	L_yakc_96
	; >>>>> Line:	402
	; >>>>> if((unSuspTask == 0) || (semWaiting->priority < unSuspTask->priority)){ 
	mov	ax, word [bp-4]
	test	ax, ax
	je	L_yakc_98
	mov	si, word [bp-2]
	add	si, 4
	mov	di, word [bp-4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_97
L_yakc_98:
	; >>>>> Line:	403
	; >>>>> unSuspTask = semWaiting; 
	mov	ax, word [bp-2]
	mov	word [bp-4], ax
L_yakc_97:
L_yakc_96:
	; >>>>> Line:	406
	; >>>>> semWaiting = semWaiting->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_94:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_93
L_yakc_95:
	; >>>>> Line:	409
	; >>>>> if(unSuspTask == 0){ 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_99
	; >>>>> Line:	410
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	411
	; >>>>> return; 
	jmp	L_yakc_100
L_yakc_99:
	; >>>>> Line:	414
	; >>>>> if(unSuspTask->prev == 0){ 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_101
	; >>>>> Line:	415
	; >>>>> YKSemWaitList = unSuspTask->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKSemWaitList], ax
	jmp	L_yakc_102
L_yakc_101:
	; >>>>> Line:	418
	; >>>>> unSuspTask->prev->next = unSuspTask->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	di, word [bp-4]
	add	di, 10
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_102:
	; >>>>> Line:	421
	; >>>>> if (unSuspTask->next != 0){ 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_103
	; >>>>> Line:	422
	; >>>>> unSuspTask->next->prev = unSuspTask->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-4]
	add	di, 8
	mov	di, word [di]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_103:
	; >>>>> Line:	426
	; >>>>> readyTask = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-6], ax
	; >>>>> Line:	427
	; >>>>> while (readyTask->priority  
	jmp	L_yakc_105
L_yakc_104:
	; >>>>> Line:	428
	; >>>>> readyTask = readyTask->next; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_105:
	mov	si, word [bp-6]
	add	si, 4
	mov	di, word [bp-4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_104
L_yakc_106:
	; >>>>> Line:	430
	; >>>>> if(readyTask->prev == 0){ 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_107
	; >>>>> Line:	431
	; >>>>> YKRdyList = unSuspTask; 
	mov	ax, word [bp-4]
	mov	word [YKRdyList], ax
	jmp	L_yakc_108
L_yakc_107:
	; >>>>> Line:	434
	; >>>>> readyTask->prev->next = unSuspTask; 
	mov	si, word [bp-6]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
L_yakc_108:
	; >>>>> Line:	436
	; >>>>> unSuspTask->prev = readyTask->prev; 
	mov	si, word [bp-6]
	add	si, 10
	mov	di, word [bp-4]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	437
	; >>>>> unSuspTask->next = readyTask; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	438
	; >>>>> readyTask->prev = unSuspTask; 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	440
	; >>>>> unSuspTask->semWait = 0; 
	mov	si, word [bp-4]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	442
	; >>>>> if( YKISRDepth == 0){ 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_yakc_109
	; >>>>> Line:	443
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_109:
	; >>>>> Line:	445
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_100:
	; >>>>> Line:	446
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_yakc_91:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_92
	ALIGN	2
YKCtxSwCount:
	TIMES	2 db 0
YKIdleCount:
	TIMES	2 db 0
YKTickNum:
	TIMES	2 db 0
YKRdyList:
	TIMES	2 db 0
YKDelayList:
	TIMES	2 db 0
YKSemWaitList:
	TIMES	2 db 0
YKAvailTCBList:
	TIMES	2 db 0
YKTCBArray:
	TIMES	140 db 0
idleStack:
	TIMES	512 db 0
YKISRDepth:
	TIMES	2 db 0
YKSemArray:
	TIMES	114 db 0
TKCurrentlyRunning:
	TIMES	2 db 0
;Assemble funtcions

YKEnterMutex:                   ; Disables interrupts
	cli	                          ; clear interrupt flag
	ret


YKExitMutex:                    ; Enables Interrupts
	sti	                          ; set interrupt flag
	ret

YKDispatcherNSave:   		; Dispatcher that saves to mem/stack

  cli

	push bp			; Push the base pointer onto the stack
	mov bp, sp		; set the current base pointer to be the stack pointer

	; Get the sp values to restore and save them to sp
	mov sp, word[bp+4]			; getting first arg (highest priority task sp)

	;mov	al, 0x20
	;out 	0x20, al

	; Pop register values off the stack
	pop ES
	pop DS
	pop DI
	pop SI
	pop BP
	pop DX
	pop CX
	pop BX
	pop AX

	iret

YKDispatcherSave:   		; Dispatcher that saves to mem/stack

  cli

	push bp
	mov bp, sp

	mov AX, [bp+2]

	pop bp
	add sp, 2

	; Push flags, CS, and IP to the stack
	pushf

	; This is something about the flags that Ian told me to do
	;push BX
	;add sp, 2
	;pop BX
	;or BX, 0x200
	;push BX
	;sub sp, 2
	;pop BX

	push CS
	push AX
	;push word[bp+2]

	; Push all register values to the stack
	push AX
	push BX
	push CX
	push DX
	push BP
	push SI
	push DI
	push DS
	push ES

	; Move bp back to its original value
	mov bp, sp
	add bp, 20

	; Store the save sp to si
	mov si, word [bp+4] 			; getting first arg (sp)
	mov word [si], sp

restore_context:

	; Save the sp and ss values to restore to sp and ss
	mov sp, word[bp+6]			; getting second arg

	;mov	al, 0x20
	;out 	0x20, al

	; Pop register values back off the stack
	pop ES
	pop DS
	pop DI
	pop SI
	pop BP
	pop DX
	pop CX
	pop BX
	pop AX
	iret
; Generated by c86 (BYU-NASM) 5.1 (beta) from lab5_app.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_lab5_app_3:
	DB	"works",0
L_lab5_app_2:
	DB	"it",0
L_lab5_app_1:
	DB	"Hey",0
	ALIGN	2
TaskWord:
	; >>>>> Line:	24
	; >>>>> { 
	jmp	L_lab5_app_4
L_lab5_app_5:
	; >>>>> Line:	25
	; >>>>> while (1) 
	jmp	L_lab5_app_7
L_lab5_app_6:
	; >>>>> Line:	27
	; >>>>> YKSemPend(WSemPtr); 
	push	word [WSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	28
	; >>>>> printString("Hey"); 
	mov	ax, L_lab5_app_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	29
	; >>>>> YKSemPost(PSemPtr); 
	push	word [PSemPtr]
	call	YKSemPost
	add	sp, 2
	; >>>>> Line:	31
	; >>>>> YKSemPend(WSemPtr); 
	push	word [WSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	32
	; >>>>> printString("it"); 
	mov	ax, L_lab5_app_2
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	33
	; >>>>> YKSemPost(SSemPtr); 
	push	word [SSemPtr]
	call	YKSemPost
	add	sp, 2
	; >>>>> Line:	35
	; >>>>> YKSemPend(WSe 
	push	word [WSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	36
	; >>>>> printString("works"); 
	mov	ax, L_lab5_app_3
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	37
	; >>>>> YKSemPost(PSemPtr); 
	push	word [PSemPtr]
	call	YKSemPost
	add	sp, 2
L_lab5_app_7:
	jmp	L_lab5_app_6
L_lab5_app_8:
	mov	sp, bp
	pop	bp
	ret
L_lab5_app_4:
	push	bp
	mov	bp, sp
	jmp	L_lab5_app_5
	ALIGN	2
TaskSpace:
	; >>>>> Line:	42
	; >>>>> { 
	jmp	L_lab5_app_10
L_lab5_app_11:
	; >>>>> Line:	43
	; >>>>> while (1) 
	jmp	L_lab5_app_13
L_lab5_app_12:
	; >>>>> Line:	45
	; >>>>> YKSemPend(SSemPtr); 
	push	word [SSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	46
	; >>>>> printChar(' '); 
	mov	al, 32
	push	ax
	call	printChar
	add	sp, 2
	; >>>>> Line:	47
	; >>>>> YKSemPost(WSemPtr); 
	push	word [WSemPtr]
	call	YKSemPost
	add	sp, 2
L_lab5_app_13:
	jmp	L_lab5_app_12
L_lab5_app_14:
	mov	sp, bp
	pop	bp
	ret
L_lab5_app_10:
	push	bp
	mov	bp, sp
	jmp	L_lab5_app_11
L_lab5_app_16:
	DB	"!",'"',0xD,0xA,0
	ALIGN	2
TaskPunc:
	; >>>>> Line:	52
	; >>>>> { 
	jmp	L_lab5_app_17
L_lab5_app_18:
	; >>>>> Line:	53
	; >>>>> while (1) 
	jmp	L_lab5_app_20
L_lab5_app_19:
	; >>>>> Line:	55
	; >>>>> YKSemPend(PSemPtr); 
	push	word [PSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	56
	; >>>>> printChar('"'); 
	mov	al, 34
	push	ax
	call	printChar
	add	sp, 2
	; >>>>> Line:	57
	; >>>>> YKSemPost(WSemPtr); 
	push	word [WSemPtr]
	call	YKSemPost
	add	sp, 2
	; >>>>> Line:	59
	; >>>>> YKSemPend(PSemPtr); 
	push	word [PSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	60
	; >>>>> printChar(','); 
	mov	al, 44
	push	ax
	call	printChar
	add	sp, 2
	; >>>>> Line:	61
	; >>>>> YKSemPost(SSemPtr); 
	push	word [SSemPtr]
	call	YKSemPost
	add	sp, 2
	; >>>>> Line:	63
	; >>>>> YKSemPend(PSemPtr); 
	push	word [PSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	64
	; >>>>> printString("!\"\r\n"); 
	mov	ax, L_lab5_app_16
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	65
	; >>>>> YKSemPost(PSemPtr); 
	push	word [PSemPtr]
	call	YKSemPost
	add	sp, 2
	; >>>>> Line:	67
	; >>>>> if (!flag) 
	mov	ax, 6
	push	ax
	call	YKDelayTask
	add	sp, 2
L_lab5_app_20:
	jmp	L_lab5_app_19
L_lab5_app_21:
	mov	sp, bp
	pop	bp
	ret
L_lab5_app_17:
	push	bp
	mov	bp, sp
	jmp	L_lab5_app_18
	ALIGN	2
TaskPrime:
	; >>>>> Line:	72
	; >>>>> { 
	jmp	L_lab5_app_23
L_lab5_app_24:
	; >>>>> Line:	77
	; >>>>> while (1) 
	mov	word [bp-2], 1001
	; >>>>> Line:	77
	; >>>>> while (1) 
	jmp	L_lab5_app_26
L_lab5_app_25:
	; >>>>> Line:	79
	; >>>>> YKSemPend(NSemPtr); 
	push	word [NSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	82
	; >>>>> lncnt = 0; 
	mov	word [bp-8], 0
	; >>>>> Line:	83
	; >>>>> endval = curval + 500; 
	mov	ax, word [bp-2]
	add	ax, 500
	mov	word [bp-10], ax
	; >>>>> Line:	84
	; >>>>> for ( ; curval < endval; curval += 2) 
	jmp	L_lab5_app_29
L_lab5_app_28:
	; >>>>> Line:	86
	; >>>>> flag = 0; 
	mov	word [bp-6], 0
	; >>>>> Line:	87
	; >>>>> for (j = 3; (j*j) < curval; j += 2) 
	mov	word [bp-4], 3
	jmp	L_lab5_app_33
L_lab5_app_32:
	; >>>>> Line:	89
	; >>>>> if (curval % j == 0) 
	mov	ax, word [bp-2]
	cwd
	idiv	word [bp-4]
	mov	ax, dx
	test	ax, ax
	jne	L_lab5_app_36
	; >>>>> Line:	91
	; >>>>> flag = 1; 
	mov	word [bp-6], 1
	; >>>>> Line:	92
	; >>>>> break; 
	jmp	L_lab5_app_34
L_lab5_app_36:
L_lab5_app_35:
	add	word [bp-4], 2
L_lab5_app_33:
	mov	ax, word [bp-4]
	imul	word [bp-4]
	mov	dx, word [bp-2]
	cmp	dx, ax
	jg	L_lab5_app_32
L_lab5_app_34:
	; >>>>> Line:	95
	; >>>>> if (!flag) 
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_lab5_app_37
	; >>>>> Line:	97
	; >>>>> printChar(' '); 
	mov	al, 32
	push	ax
	call	printChar
	add	sp, 2
	; >>>>> Line:	98
	; >>>>> printInt(curval); 
	push	word [bp-2]
	call	printInt
	add	sp, 2
	; >>>>> Line:	99
	; >>>>> lncnt++; 
	inc	word [bp-8]
	; >>>>> Line:	100
	; >>>>> if (lncnt > 9) 
	cmp	word [bp-8], 9
	jle	L_lab5_app_38
	; >>>>> Line:	102
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	103
	; >>>>> lncnt = 0; 
	mov	word [bp-8], 0
L_lab5_app_38:
L_lab5_app_37:
L_lab5_app_31:
	add	word [bp-2], 2
L_lab5_app_29:
	mov	ax, word [bp-10]
	cmp	ax, word [bp-2]
	jg	L_lab5_app_28
L_lab5_app_30:
	; >>>>> Line:	107
	; >>>>> printNewLine(); 
	call	printNewLine
L_lab5_app_26:
	jmp	L_lab5_app_25
L_lab5_app_27:
	mov	sp, bp
	pop	bp
	ret
L_lab5_app_23:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_lab5_app_24
L_lab5_app_44:
	DB	"% >>>>>",0xD,0xA,0
L_lab5_app_43:
	DB	", CPU usage: ",0
L_lab5_app_42:
	DB	"<<<<< Context switches: ",0
L_lab5_app_41:
	DB	"Determining CPU capacity",0xD,0xA,0
L_lab5_app_40:
	DB	"Welcome to the YAK kernel",0xD,0xA,0
	ALIGN	2
TaskStat:
	; >>>>> Line:	112
	; >>>>> { 
	jmp	L_lab5_app_45
L_lab5_app_46:
	; >>>>> Line:	116
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	117
	; >>>>> printString("Welcome to the YAK kernel\r\n"); 
	mov	ax, L_lab5_app_40
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	118
	; >>>>> printString("Determining CPU capacity\r\n"); 
	mov	ax, L_lab5_app_41
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	119
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	120
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	121
	; >>>>> YKDelayTask(5); 
	mov	ax, 5
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	122
	; >>>>> max = YKIdleCount / 25; 
	mov	ax, word [YKIdleCount]
	xor	dx, dx
	mov	cx, 25
	div	cx
	mov	word [bp-2], ax
	; >>>>> Line:	123
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	125
	; >>>>> YKNewTask(TaskPrime, (void *) &TaskPRMStk[512], 32); 
	mov	al, 32
	push	ax
	mov	ax, (TaskPRMStk+1024)
	push	ax
	mov	ax, TaskPrime
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	126
	; >>>>> YKNewTask(TaskWord, (void *) &TaskWStk[512], 10); 
	mov	al, 10
	push	ax
	mov	ax, (TaskWStk+1024)
	push	ax
	mov	ax, TaskWord
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	127
	; >>>>> YKNewTask(TaskSpace, (void *) &TaskSStk[512], 11); 
	mov	al, 11
	push	ax
	mov	ax, (TaskSStk+1024)
	push	ax
	mov	ax, TaskSpace
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	128
	; >>>>> YKNewTask(TaskPunc, (void *) &TaskPStk[512], 12); 
	mov	al, 12
	push	ax
	mov	ax, (TaskPStk+1024)
	push	ax
	mov	ax, TaskPunc
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	130
	; >>>>> while (1) 
	jmp	L_lab5_app_48
L_lab5_app_47:
	; >>>>> Line:	132
	; >>>>> YKDelayTask(20); 
	mov	ax, 20
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	134
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	135
	; >>>>> switchCount = YKCtxSwCount; 
	mov	ax, word [YKCtxSwCount]
	mov	word [bp-4], ax
	; >>>>> Line:	136
	; >>>>> idleCount = YKIdleCount; 
	mov	ax, word [YKIdleCount]
	mov	word [bp-6], ax
	; >>>>> Line:	137
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	139
	; >>>>> printString ("<<<<< Context  
	mov	ax, L_lab5_app_42
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	140
	; >>>>> printInt((int)switchCount); 
	push	word [bp-4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	141
	; >>>>> printString(", CPU usage: "); 
	mov	ax, L_lab5_app_43
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	142
	; >>>>> tmp = (int) (idleCount/max); 
	mov	ax, word [bp-6]
	xor	dx, dx
	div	word [bp-2]
	mov	word [bp-8], ax
	; >>>>> Line:	143
	; >>>>> printInt(100-tmp); 
	mov	ax, 100
	sub	ax, word [bp-8]
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	144
	; >>>>> printString("% >>>>>\r\n"); 
	mov	ax, L_lab5_app_44
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	146
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	147
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	148
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	149
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_lab5_app_48:
	jmp	L_lab5_app_47
L_lab5_app_49:
	mov	sp, bp
	pop	bp
	ret
L_lab5_app_45:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_lab5_app_46
	ALIGN	2
main:
	; >>>>> Line:	154
	; >>>>> { 
	jmp	L_lab5_app_51
L_lab5_app_52:
	; >>>>> Line:	155
	; >>>>> YKInitialize(); 
	call	YKInitialize
	; >>>>> Line:	158
	; >>>>> PSemPtr = YKSemCreate(1); 
	mov	ax, 1
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	word [PSemPtr], ax
	; >>>>> Line:	159
	; >>>>> SSemPtr = YKSemCreate(0); 
	xor	ax, ax
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	word [SSemPtr], ax
	; >>>>> Line:	160
	; >>>>> WSemPtr = YKSemCreate(0); 
	xor	ax, ax
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	word [WSemPtr], ax
	; >>>>> Line:	161
	; >>>>> NSemPtr = YKSemCreate(0); 
	xor	ax, ax
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	word [NSemPtr], ax
	; >>>>> Line:	162
	; >>>>> YKNewTask(TaskStat, (void *) &TaskStatStk[512], 30); 
	mov	al, 30
	push	ax
	mov	ax, (TaskStatStk+1024)
	push	ax
	mov	ax, TaskStat
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	164
	; >>>>> YKRun(); 
	call	YKRun
	mov	sp, bp
	pop	bp
	ret
L_lab5_app_51:
	push	bp
	mov	bp, sp
	jmp	L_lab5_app_52
	ALIGN	2
TaskWStk:
	TIMES	1024 db 0
TaskSStk:
	TIMES	1024 db 0
TaskPStk:
	TIMES	1024 db 0
TaskStatStk:
	TIMES	1024 db 0
TaskPRMStk:
	TIMES	1024 db 0
PSemPtr:
	TIMES	2 db 0
SSemPtr:
	TIMES	2 db 0
WSemPtr:
	TIMES	2 db 0
NSemPtr:
	TIMES	2 db 0
