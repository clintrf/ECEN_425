; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
run_flag:
	DB	0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	27
	; >>>>> void YKInitialize(void){ 
	jmp	L_yakc_1
L_yakc_2:
	; >>>>> Line:	29
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	30
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	31
	; >>>>> TKCurrentlyRunning = 0; 
	mov	word [TKCurrentlyRunning], 0
	; >>>>> Line:	32
	; >>>>> YKISRDepth = 0; 
	mov	word [YKISRDepth], 0
	; >>>>> Line:	36
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	39
	; >>>>> YKAvailTCBList = &(YKTCBArray[0]); 
	mov	word [YKAvailTCBList], YKTCBArray
	; >>>>> Line:	41
	; >>>>> for (i = 0; i < 9; i++) 
	mov	word [bp-2], 0
	jmp	L_yakc_4
L_yakc_3:
	; >>>>> Line:	42
	; >>>>> YKTCBArray[i].next = &(YKTCBArray[i+1]); 
	mov	ax, word [bp-2]
	inc	ax
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	push	ax
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	mov	dx, ax
	add	dx, YKTCBArray
	mov	si, dx
	add	si, 8
	pop	ax
	mov	word [si], ax
L_yakc_6:
	inc	word [bp-2]
L_yakc_4:
	cmp	word [bp-2], 9
	jl	L_yakc_3
L_yakc_5:
	; >>>>> Line:	43
	; >>>>> YKTCBArray[9].next = 0; 
	mov	word [(134+YKTCBArray)], 0
	; >>>>> Line:	45
	; >>>>> for (i = 0; i < 19; i++){ 
	mov	word [bp-2], 0
	jmp	L_yakc_8
L_yakc_7:
	; >>>>> Line:	46
	; >>>>> YKSemArray[i].val = -10; 
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	mov	si, ax
	add	si, YKSemArray
	mov	word [si], -10
	; >>>>> Line:	47
	; >>>>> YKSemArray[i].active = 0; 
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, YKSemArray
	mov	si, ax
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	48
	; >>>>> YKSemArray[i].id = i; 
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, YKSemArray
	mov	si, ax
	add	si, 4
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_10:
	inc	word [bp-2]
L_yakc_8:
	cmp	word [bp-2], 19
	jl	L_yakc_7
L_yakc_9:
	; >>>>> Line:	51
	; >>>>> YKNewTask(YKIdleTask, (void*)&idleStack[256], 100); 
	mov	al, 100
	push	ax
	mov	ax, (idleStack+512)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	sp, bp
	pop	bp
	ret
L_yakc_1:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_2
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	54
	; >>>>> void YKIdleTask(void){ 
	jmp	L_yakc_12
L_yakc_13:
	; >>>>> Line:	55
	; >>>>> while(1){ 
	jmp	L_yakc_15
L_yakc_14:
	; >>>>> Line:	56
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	57
	; >>>>> YKIdleCount=YKIdleCount+1; 
	mov	ax, word [YKIdleCount]
	inc	ax
	mov	word [YKIdleCount], ax
	; >>>>> Line:	58
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_15:
	jmp	L_yakc_14
L_yakc_16:
	mov	sp, bp
	pop	bp
	ret
L_yakc_12:
	push	bp
	mov	bp, sp
	jmp	L_yakc_13
	ALIGN	2
YKNewTask:
	; >>>>> Line:	62
	; >>>>> else 
	jmp	L_yakc_18
L_yakc_19:
	; >>>>> Line:	66
	; >>>>> taskStack = ((int *)taskStack) - 1; 
	mov	ax, word [bp+6]
	sub	ax, 2
	mov	word [bp+6], ax
	; >>>>> Line:	69
	; >>>>> tmp = YKAvailTCBList; 
	mov	ax, word [YKAvailTCBList]
	mov	word [bp-2], ax
	; >>>>> Line:	70
	; >>>>> YKAvailTCBList = tmp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKAvailTCBList], ax
	; >>>>> Line:	73
	; >>>>> tmp->priority = priority; 
	mov	al, byte [bp+8]
	xor	ah, ah
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], ax
	; >>>>> Line:	74
	; >>>>> tmp->delay = 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	76
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	79
	; >>>>> if (YKRdyList == 0){ 
	mov	ax, word [YKRdyList]
	test	ax, ax
	jne	L_yakc_20
	; >>>>> Line:	80
	; >>>>> YKRdyList = tmp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	; >>>>> Line:	81
	; >>>>> tmp->next = 0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	82
	; >>>>> tmp->prev = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	jmp	L_yakc_21
L_yakc_20:
	; >>>>> Line:	85
	; >>>>> tmp2 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	86
	; >>>>> while (tmp2->priority < tmp->priority){ 
	jmp	L_yakc_23
L_yakc_22:
	; >>>>> Line:	87
	; >>>>> tmp2 = tmp2->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_23:
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_22
L_yakc_24:
	; >>>>> Line:	89
	; >>>>> if (tmp2->prev == 0) 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_25
	; >>>>> Line:	90
	; >>>>> YKRdyList = tmp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_26
L_yakc_25:
	; >>>>> Line:	92
	; >>>>> tmp2->prev->next = tmp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_26:
	; >>>>> Line:	93
	; >>>>> tmp->prev = tmp2->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	94
	; >>>>> le 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	95
	; >>>>> tmp2->prev = tmp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_21:
	; >>>>> Line:	99
	; >>>>> tmp->stackptr = taskStack; 
	mov	si, word [bp-2]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	102
	; >>>>> tmp->stackptr = tmp->stackptr - 11; 
	mov	si, word [bp-2]
	mov	ax, word [si]
	sub	ax, 22
	mov	word [si], ax
	; >>>>> Line:	103
	; >>>>> for(i=11; i>=0;i--){ 
	mov	word [bp-6], 11
	jmp	L_yakc_28
L_yakc_27:
	; >>>>> Line:	104
	; >>>>> if(i == 11){ 
	cmp	word [bp-6], 11
	jne	L_yakc_31
	; >>>>> Line:	105
	; >>>>> *(tmp->stackptr+i) = 0x200; 
	mov	ax, word [bp-6]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp-2]
	add	si, word [di]
	mov	word [si], 512
	jmp	L_yakc_32
L_yakc_31:
	; >>>>> Line:	107
	; >>>>> else if(i == 10){ 
	cmp	word [bp-6], 10
	jne	L_yakc_33
	; >>>>> Line:	108
	; >>>>> *(tmp->stackptr+i) = 0; 
	mov	ax, word [bp-6]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp-2]
	add	si, word [di]
	mov	word [si], 0
	jmp	L_yakc_34
L_yakc_33:
	; >>>>> Line:	110
	; >>>>> else if(i == 9){ 
	cmp	word [bp-6], 9
	jne	L_yakc_35
	; >>>>> Line:	111
	; >>>>> *(tmp->stackptr+i) = (int)task; 
	mov	ax, word [bp-6]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp-2]
	add	si, word [di]
	mov	ax, word [bp+4]
	mov	word [si], ax
	jmp	L_yakc_36
L_yakc_35:
	; >>>>> Line:	114
	; >>>>> *(tmp->stackptr+i) = 0; 
	mov	ax, word [bp-6]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp-2]
	add	si, word [di]
	mov	word [si], 0
L_yakc_36:
L_yakc_34:
L_yakc_32:
L_yakc_30:
	dec	word [bp-6]
L_yakc_28:
	cmp	word [bp-6], 0
	jge	L_yakc_27
L_yakc_29:
	; >>>>> Line:	119
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_18:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_19
L_yakc_38:
	DB	"Start Run and call scheduler",0xA,0
	ALIGN	2
YKRun:
	; >>>>> Line:	123
	; >>>>> void YKRun(void){ 
	jmp	L_yakc_39
L_yakc_40:
	; >>>>> Line:	124
	; >>>>> printString("Start Run and call scheduler\n"); 
	mov	ax, L_yakc_38
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	125
	; >>>>> run_flag = 1; 
	mov	byte [run_flag], 1
	; >>>>> Line:	126
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_39:
	push	bp
	mov	bp, sp
	jmp	L_yakc_40
	ALIGN	2
YKScheduler:
	; >>>>> Line:	129
	; >>>>> ->stackptr); 
	jmp	L_yakc_42
L_yakc_43:
	; >>>>> Line:	137
	; >>>>> highest_priority_task = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	138
	; >>>>> currentlyRunning = TKCurrentlyRunning; 
	mov	ax, word [TKCurrentlyRunning]
	mov	word [bp-4], ax
	; >>>>> Line:	140
	; >>>>> if(!run_flag || (TKCurrentlyRunning == highest_priority_task)){ 
	mov	al, byte [run_flag]
	test	al, al
	je	L_yakc_45
	mov	ax, word [bp-2]
	cmp	ax, word [TKCurrentlyRunning]
	jne	L_yakc_44
L_yakc_45:
	; >>>>> Line:	141
	; >>>>> return; 
	jmp	L_yakc_46
L_yakc_44:
	; >>>>> Line:	144
	; >>>>> YKCtxSwCount = YKCtxSwCount + 1; 
	mov	ax, word [YKCtxSwCount]
	inc	ax
	mov	word [YKCtxSwCount], ax
	; >>>>> Line:	145
	; >>>>> TKCurrentlyRunning = highest_priority_task; 
	mov	ax, word [bp-2]
	mov	word [TKCurrentlyRunning], ax
	; >>>>> Line:	146
	; >>>>> if(!save_flag){ 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_47
	; >>>>> Line:	148
	; >>>>> YKDispatcherNSave(highest_priority_task->stackptr); 
	mov	si, word [bp-2]
	push	word [si]
	call	YKDispatcherNSave
	add	sp, 2
	jmp	L_yakc_48
L_yakc_47:
	; >>>>> Line:	153
	; >>>>> YKDispatcherSave(&(currentlyRunning->stackptr), highest_priority_task->stackptr); 
	mov	si, word [bp-2]
	push	word [si]
	push	word [bp-4]
	call	YKDispatcherSave
	add	sp, 4
L_yakc_48:
L_yakc_46:
	mov	sp, bp
	pop	bp
	ret
L_yakc_42:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_43
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	159
	; >>>>> voi 
	jmp	L_yakc_50
L_yakc_51:
	; >>>>> Line:	161
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	163
	; >>>>> if(count == 0){ 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_52
	; >>>>> Line:	164
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	165
	; >>>>> return; 
	jmp	L_yakc_53
L_yakc_52:
	; >>>>> Line:	169
	; >>>>> ready = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	171
	; >>>>> YKRdyList = ready->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	172
	; >>>>> ready->next->prev = 0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	174
	; >>>>> ready->next = YKDelayList; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [YKDelayList]
	mov	word [si], ax
	; >>>>> Line:	175
	; >>>>> YKDelayList = ready; 
	mov	ax, word [bp-2]
	mov	word [YKDelayList], ax
	; >>>>> Line:	176
	; >>>>> ready->prev = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	177
	; >>>>> if(ready->next != 0){ 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_54
	; >>>>> Line:	178
	; >>>>> ready->next->prev=ready; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_54:
	; >>>>> Line:	180
	; >>>>> ready->delay = count; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	181
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	182
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_53:
	mov	sp, bp
	pop	bp
	ret
L_yakc_50:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_51
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	186
	; >>>>> void YKEnterISR(void){ 
	jmp	L_yakc_56
L_yakc_57:
	; >>>>> Line:	187
	; >>>>> YKISRDepth = YKISRDepth + 1; 
	mov	ax, word [YKISRDepth]
	inc	ax
	mov	word [YKISRDepth], ax
	mov	sp, bp
	pop	bp
	ret
L_yakc_56:
	push	bp
	mov	bp, sp
	jmp	L_yakc_57
	ALIGN	2
YKExitISR:
	; >>>>> Line:	191
	; >>>>> void YKExitISR(void){ 
	jmp	L_yakc_59
L_yakc_60:
	; >>>>> Line:	192
	; >>>>> YKISRDepth = YKISRDepth - 1; 
	mov	ax, word [YKISRDepth]
	dec	ax
	mov	word [YKISRDepth], ax
	; >>>>> Line:	194
	; >>>>> if(YKISRDep 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_yakc_61
	; >>>>> Line:	195
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_61:
	mov	sp, bp
	pop	bp
	ret
L_yakc_59:
	push	bp
	mov	bp, sp
	jmp	L_yakc_60
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	199
	; >>>>> void YKTickHandler(void){ 
	jmp	L_yakc_63
L_yakc_64:
	; >>>>> Line:	202
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	203
	; >>>>> YKTickNum = YKTickNum + 1; 
	mov	ax, word [YKTickNum]
	inc	ax
	mov	word [YKTickNum], ax
	; >>>>> Line:	204
	; >>>>> tempDelay = YKDelayList; 
	mov	ax, word [YKDelayList]
	mov	word [bp-2], ax
	; >>>>> Line:	206
	; >>>>> while(tempDelay != 0){ 
	jmp	L_yakc_66
L_yakc_65:
	; >>>>> Line:	207
	; >>>>> tempNext = tempDelay->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	208
	; >>>>> tempDelay->delay = tempDelay->delay - 1; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	dec	ax
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], ax
	; >>>>> Line:	209
	; >>>>> if(tempDelay->delay <= 0){ 
	mov	si, word [bp-2]
	add	si, 6
	cmp	word [si], 0
	jg	L_yakc_68
	; >>>>> Line:	211
	; >>>>> if(tempDelay->prev == 0){ 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_69
	; >>>>> Line:	212
	; >>>>> YKDelayList = tempDelay->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKDelayList], ax
	jmp	L_yakc_70
L_yakc_69:
	; >>>>> Line:	215
	; >>>>> tempDelay->prev->next = tempDelay->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp-2]
	add	di, 10
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_70:
	; >>>>> Line:	217
	; >>>>> if(tempDelay->next != 0){ 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_71
	; >>>>> Line:	218
	; >>>>> t initialValue){ 
	mov	si, word [bp-2]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 8
	mov	di, word [di]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_71:
	; >>>>> Line:	221
	; >>>>> tempReady = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	222
	; >>>>> while(tempReady->priority < tempDelay->priority){ 
	jmp	L_yakc_73
L_yakc_72:
	; >>>>> Line:	223
	; >>>>> tempReady = tempReady->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_73:
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_72
L_yakc_74:
	; >>>>> Line:	225
	; >>>>> if(tempReady->prev == 0){ 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_75
	; >>>>> Line:	226
	; >>>>> YKRdyList = tempDelay; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_76
L_yakc_75:
	; >>>>> Line:	229
	; >>>>> tempReady->prev->next = tempDelay; 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_76:
	; >>>>> Line:	232
	; >>>>> tempDelay->prev = tempReady->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	233
	; >>>>> tempDelay->next = tempReady; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	234
	; >>>>> tempReady->prev = tempDelay; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_68:
	; >>>>> Line:	236
	; >>>>> tempDelay = tempNext; 
	mov	ax, word [bp-6]
	mov	word [bp-2], ax
L_yakc_66:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_65
L_yakc_67:
	; >>>>> Line:	238
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_63:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_64
	ALIGN	2
YKSemCreate:
	; >>>>> Line:	241
	; >>>>> YKSEM* YKSemCreate(int initialValue){ 
	jmp	L_yakc_78
L_yakc_79:
	; >>>>> Line:	263
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	264
	; >>>>> i = 0; 
	mov	word [bp-2], 0
	; >>>>> Line:	265
	; >>>>> while(YKSemArray[i].active){ 
	jmp	L_yakc_81
L_yakc_80:
	; >>>>> Line:	266
	; >>>>> i = i+1; 
	mov	ax, word [bp-2]
	inc	ax
	mov	word [bp-2], ax
L_yakc_81:
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, YKSemArray
	mov	si, ax
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_80
L_yakc_82:
	; >>>>> Line:	270
	; >>>>> YKSemArray[i].active = 1; 
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, YKSemArray
	mov	si, ax
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	271
	; >>>>> YKSemArray[i].val = initialValue; 
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	mov	si, ax
	add	si, YKSemArray
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	272
	; >>>>> YKSemArray[i].id = i; 
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, YKSemArray
	mov	si, ax
	add	si, 4
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	274
	; >>>>> return &(YKSemArray[i]); 
	mov	ax, word [bp-2]
	mov	cx, 6
	imul	cx
	add	ax, YKSemArray
L_yakc_83:
	mov	sp, bp
	pop	bp
	ret
L_yakc_78:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_79
	ALIGN	2
YKSemPend:
	; >>>>> Line:	284
	; >>>>> void YKSemPend(YKSEM *semaphore){ 
	jmp	L_yakc_85
L_yakc_86:
	; >>>>> Line:	331
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	332
	; >>>>> semaphore->val = semaphore->val - 1; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	dec	ax
	mov	word [si], ax
	; >>>>> Line:	333
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	335
	; >>>>> if (semaphore->val >= 0){ return; } 
	mov	si, word [bp+4]
	cmp	word [si], 0
	jl	L_yakc_87
	; >>>>> Line:	335
	; >>>>> if (semaphore->val >= 0){ return; } 
	jmp	L_yakc_88
L_yakc_87:
	; >>>>> Line:	337
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	338
	; >>>>> readyTask = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	339
	; >>>>> YKRdyList = readyTask->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	340
	; >>>>> readyTask->next->pre 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	341
	; >>>>> readyTask->next = YKSemWaitList; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [YKSemWaitList]
	mov	word [si], ax
	; >>>>> Line:	342
	; >>>>> YKSemWaitList = readyTask; 
	mov	ax, word [bp-2]
	mov	word [YKSemWaitList], ax
	; >>>>> Line:	343
	; >>>>> readyTask->prev = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	345
	; >>>>> if(readyTask->next != 0){ 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_89
	; >>>>> Line:	346
	; >>>>> readyTask->next->prev = readyTask; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_89:
	; >>>>> Line:	349
	; >>>>> readyTask->semWait = semaphore; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	351
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	352
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_88:
	mov	sp, bp
	pop	bp
	ret
L_yakc_85:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_86
	ALIGN	2
YKSemPost:
	; >>>>> Line:	366
	; >>>>> void YKSemPost(YKSEM *semaphore){ 
	jmp	L_yakc_91
L_yakc_92:
	; >>>>> Line:	392
	; >>>>> unSuspTask = 0; 
	mov	word [bp-4], 0
	; >>>>> Line:	393
	; >>>>> semWaiting = YKSemWaitList; 
	mov	ax, word [YKSemWaitList]
	mov	word [bp-2], ax
	; >>>>> Line:	395
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	396
	; >>>>> semaphore->val = semaphore->val + 1; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	inc	ax
	mov	word [si], ax
	; >>>>> Line:	399
	; >>>>> while(semWaiting != 0){ 
	jmp	L_yakc_94
L_yakc_93:
	; >>>>> Line:	401
	; >>>>> if(semWaiting->semWait  
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [bp+4]
	cmp	ax, word [si]
	jne	L_yakc_96
	; >>>>> Line:	402
	; >>>>> if((unSuspTask == 0) || (semWaiting->priority < unSuspTask->priority)){ 
	mov	ax, word [bp-4]
	test	ax, ax
	je	L_yakc_98
	mov	si, word [bp-2]
	add	si, 4
	mov	di, word [bp-4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_97
L_yakc_98:
	; >>>>> Line:	403
	; >>>>> unSuspTask = semWaiting; 
	mov	ax, word [bp-2]
	mov	word [bp-4], ax
L_yakc_97:
L_yakc_96:
	; >>>>> Line:	406
	; >>>>> semWaiting = semWaiting->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_94:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_93
L_yakc_95:
	; >>>>> Line:	409
	; >>>>> if(unSuspTask == 0){ 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_99
	; >>>>> Line:	410
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	411
	; >>>>> return; 
	jmp	L_yakc_100
L_yakc_99:
	; >>>>> Line:	414
	; >>>>> if(unSuspTask->prev == 0){ 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_101
	; >>>>> Line:	415
	; >>>>> YKSemWaitList = unSuspTask->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKSemWaitList], ax
	jmp	L_yakc_102
L_yakc_101:
	; >>>>> Line:	418
	; >>>>> unSuspTask->prev->next = unSuspTask->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	di, word [bp-4]
	add	di, 10
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_102:
	; >>>>> Line:	421
	; >>>>> if (unSuspTask->next != 0){ 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_103
	; >>>>> Line:	422
	; >>>>> unSuspTask->next->prev = unSuspTask->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-4]
	add	di, 8
	mov	di, word [di]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_103:
	; >>>>> Line:	426
	; >>>>> readyTask = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-6], ax
	; >>>>> Line:	427
	; >>>>> while (readyTask->priority  
	jmp	L_yakc_105
L_yakc_104:
	; >>>>> Line:	428
	; >>>>> readyTask = readyTask->next; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_105:
	mov	si, word [bp-6]
	add	si, 4
	mov	di, word [bp-4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_104
L_yakc_106:
	; >>>>> Line:	430
	; >>>>> if(readyTask->prev == 0){ 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_107
	; >>>>> Line:	431
	; >>>>> YKRdyList = unSuspTask; 
	mov	ax, word [bp-4]
	mov	word [YKRdyList], ax
	jmp	L_yakc_108
L_yakc_107:
	; >>>>> Line:	434
	; >>>>> readyTask->prev->next = unSuspTask; 
	mov	si, word [bp-6]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
L_yakc_108:
	; >>>>> Line:	436
	; >>>>> unSuspTask->prev = readyTask->prev; 
	mov	si, word [bp-6]
	add	si, 10
	mov	di, word [bp-4]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	437
	; >>>>> unSuspTask->next = readyTask; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	438
	; >>>>> readyTask->prev = unSuspTask; 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	440
	; >>>>> unSuspTask->semWait = 0; 
	mov	si, word [bp-4]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	442
	; >>>>> if( YKISRDepth == 0){ 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_yakc_109
	; >>>>> Line:	443
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_109:
	; >>>>> Line:	445
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_100:
	; >>>>> Line:	446
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_yakc_91:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_92
	ALIGN	2
YKCtxSwCount:
	TIMES	2 db 0
YKIdleCount:
	TIMES	2 db 0
YKTickNum:
	TIMES	2 db 0
YKRdyList:
	TIMES	2 db 0
YKDelayList:
	TIMES	2 db 0
YKSemWaitList:
	TIMES	2 db 0
YKAvailTCBList:
	TIMES	2 db 0
YKTCBArray:
	TIMES	140 db 0
idleStack:
	TIMES	512 db 0
YKISRDepth:
	TIMES	2 db 0
YKSemArray:
	TIMES	114 db 0
TKCurrentlyRunning:
	TIMES	2 db 0
